
zad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001c90  08001c90  00002c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cb0  08001cb0  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001cb0  08001cb0  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cb0  08001cb0  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cb0  08001cb0  00002cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cb4  08001cb4  00002cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001cb8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000587d  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160d  00000000  00000000  000088b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00009ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052a  00000000  00000000  0000a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015839  00000000  00000000  0000ab12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000060f7  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00071004  00000000  00000000  00026442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00097446  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c10  00000000  00000000  0009748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0009909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c78 	.word	0x08001c78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001c78 	.word	0x08001c78

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	@ (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	@ (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	@ (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	@ 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	@ 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	@ (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2010      	movs	r0, #16
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000330:	2010      	movs	r0, #16
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000336:	f7ff ff47 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800033a:	4603      	mov	r3, r0
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff97 	bl	8000274 <NVIC_EncodePriority>
 8000346:	4603      	mov	r3, r0
 8000348:	4619      	mov	r1, r3
 800034a:	2011      	movs	r0, #17
 800034c:	f7ff ff68 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000350:	2011      	movs	r0, #17
 8000352:	f7ff ff47 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <LL_AHB1_GRP1_EnableClock>:
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000364:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	4907      	ldr	r1, [pc, #28]	@ (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4013      	ands	r3, r2
 8000378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800037a:	68fb      	ldr	r3, [r7, #12]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000390:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000394:	f7ff ffe2 	bl	800035c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000398:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800039c:	f7ff ffde 	bl	800035c <LL_AHB1_GRP1_EnableClock>

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <__NVIC_GetPriorityGrouping>:
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <__NVIC_GetPriorityGrouping+0x18>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	0a1b      	lsrs	r3, r3, #8
 80003ae:	f003 0307 	and.w	r3, r3, #7
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <__NVIC_EnableIRQ>:
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db0b      	blt.n	80003ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 021f 	and.w	r2, r3, #31
 80003d8:	4907      	ldr	r1, [pc, #28]	@ (80003f8 <__NVIC_EnableIRQ+0x38>)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	095b      	lsrs	r3, r3, #5
 80003e0:	2001      	movs	r0, #1
 80003e2:	fa00 f202 	lsl.w	r2, r0, r2
 80003e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e100 	.word	0xe000e100

080003fc <__NVIC_SetPriority>:
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	6039      	str	r1, [r7, #0]
 8000406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040c:	2b00      	cmp	r3, #0
 800040e:	db0a      	blt.n	8000426 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	b2da      	uxtb	r2, r3
 8000414:	490c      	ldr	r1, [pc, #48]	@ (8000448 <__NVIC_SetPriority+0x4c>)
 8000416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041a:	0112      	lsls	r2, r2, #4
 800041c:	b2d2      	uxtb	r2, r2
 800041e:	440b      	add	r3, r1
 8000420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000424:	e00a      	b.n	800043c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4908      	ldr	r1, [pc, #32]	@ (800044c <__NVIC_SetPriority+0x50>)
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	f003 030f 	and.w	r3, r3, #15
 8000432:	3b04      	subs	r3, #4
 8000434:	0112      	lsls	r2, r2, #4
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	440b      	add	r3, r1
 800043a:	761a      	strb	r2, [r3, #24]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	e000e100 	.word	0xe000e100
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <NVIC_EncodePriority>:
{
 8000450:	b480      	push	{r7}
 8000452:	b089      	sub	sp, #36	@ 0x24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	f1c3 0307 	rsb	r3, r3, #7
 800046a:	2b04      	cmp	r3, #4
 800046c:	bf28      	it	cs
 800046e:	2304      	movcs	r3, #4
 8000470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3304      	adds	r3, #4
 8000476:	2b06      	cmp	r3, #6
 8000478:	d902      	bls.n	8000480 <NVIC_EncodePriority+0x30>
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	3b03      	subs	r3, #3
 800047e:	e000      	b.n	8000482 <NVIC_EncodePriority+0x32>
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000484:	f04f 32ff 	mov.w	r2, #4294967295
 8000488:	69bb      	ldr	r3, [r7, #24]
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	43da      	mvns	r2, r3
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	401a      	ands	r2, r3
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000498:	f04f 31ff 	mov.w	r1, #4294967295
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	43d9      	mvns	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a8:	4313      	orrs	r3, r2
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3724      	adds	r7, #36	@ 0x24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f043 0201 	orr.w	r2, r3, #1
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800052a:	f023 0306 	bic.w	r3, r3, #6
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	430a      	orrs	r2, r1
 8000534:	431a      	orrs	r2, r3
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	60da      	str	r2, [r3, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	60da      	str	r2, [r3, #12]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <LL_AHB1_GRP1_EnableClock>:
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	4907      	ldr	r1, [pc, #28]	@ (80005b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4013      	ands	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	4907      	ldr	r1, [pc, #28]	@ (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_I2C1_Init>:
//I2C_Read_Callback I2C_Read = I2C_ReadData;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	@ 0x38
 80005ec:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000612:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000616:	f7ff ffb7 	bl	8000588 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800061a:	23c0      	movs	r3, #192	@ 0xc0
 800061c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800061e:	2302      	movs	r3, #2
 8000620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000626:	2301      	movs	r3, #1
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800062e:	2304      	movs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4821      	ldr	r0, [pc, #132]	@ (80006bc <MX_I2C1_Init+0xd4>)
 8000638:	f000 fef0 	bl	800141c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800063c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000640:	f7ff ffba 	bl	80005b8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000644:	f7ff feae 	bl	80003a4 <__NVIC_GetPriorityGrouping>
 8000648:	4603      	mov	r3, r0
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fefe 	bl	8000450 <NVIC_EncodePriority>
 8000654:	4603      	mov	r3, r0
 8000656:	4619      	mov	r1, r3
 8000658:	201f      	movs	r0, #31
 800065a:	f7ff fecf 	bl	80003fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800065e:	201f      	movs	r0, #31
 8000660:	f7ff feae 	bl	80003c0 <__NVIC_EnableIRQ>

  /** I2C Initialization*/
  LL_I2C_EnableAutoEndMode(I2C1);
 8000664:	4816      	ldr	r0, [pc, #88]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 8000666:	f7ff ff7e 	bl	8000566 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800066a:	4815      	ldr	r0, [pc, #84]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 800066c:	f7ff ff6b 	bl	8000546 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000670:	4813      	ldr	r0, [pc, #76]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 8000672:	f7ff ff40 	bl	80004f6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 8000678:	f7ff ff2d 	bl	80004d6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D2B;
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_I2C1_Init+0xdc>)
 8000682:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000690:	2300      	movs	r3, #0
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 80006a0:	f000 ffcf 	bl	8001642 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 80006aa:	f7ff ff34 	bl	8000516 <LL_I2C_SetOwnAddress2>
  LL_I2C_Enable(I2C1);
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0xd8>)
 80006b0:	f7ff ff01 	bl	80004b6 <LL_I2C_Enable>
}
 80006b4:	bf00      	nop
 80006b6:	3738      	adds	r7, #56	@ 0x38
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	48000400 	.word	0x48000400
 80006c0:	40005400 	.word	0x40005400
 80006c4:	00101d2b 	.word	0x00101d2b

080006c8 <__NVIC_SetPriorityGrouping>:
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_SetPriority>:
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	@ (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	@ (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	@ 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	@ 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <LL_RCC_HSI_Enable+0x1c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <LL_RCC_HSI_Enable+0x1c>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <LL_RCC_HSI_IsReady+0x20>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	2b02      	cmp	r3, #2
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4904      	ldr	r1, [pc, #16]	@ (8000854 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000842:	4313      	orrs	r3, r2
 8000844:	600b      	str	r3, [r1, #0]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <LL_RCC_SetSysClkSource+0x24>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f023 0203 	bic.w	r2, r3, #3
 8000868:	4904      	ldr	r1, [pc, #16]	@ (800087c <LL_RCC_SetSysClkSource+0x24>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	604b      	str	r3, [r1, #4]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40021000 	.word	0x40021000

08000880 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <LL_RCC_GetSysClkSource+0x18>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 030c 	and.w	r3, r3, #12
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80008ac:	4904      	ldr	r1, [pc, #16]	@ (80008c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	604b      	str	r3, [r1, #4]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80008d4:	4904      	ldr	r1, [pc, #16]	@ (80008e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	604b      	str	r3, [r1, #4]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000

080008ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80008fc:	4904      	ldr	r1, [pc, #16]	@ (8000910 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	604b      	str	r3, [r1, #4]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000

08000914 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <LL_RCC_SetI2CClockSource+0x2c>)
 800091e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	0e1b      	lsrs	r3, r3, #24
 8000924:	43db      	mvns	r3, r3
 8000926:	401a      	ands	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800092e:	4904      	ldr	r1, [pc, #16]	@ (8000940 <LL_RCC_SetI2CClockSource+0x2c>)
 8000930:	4313      	orrs	r3, r2
 8000932:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000

08000944 <LL_APB1_GRP1_EnableClock>:
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <LL_APB1_GRP1_EnableClock+0x2c>)
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	4907      	ldr	r1, [pc, #28]	@ (8000970 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <LL_APB1_GRP1_EnableClock+0x2c>)
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4013      	ands	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	4907      	ldr	r1, [pc, #28]	@ (80009a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4313      	orrs	r3, r2
 8000986:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800098a:	699a      	ldr	r2, [r3, #24]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000

080009a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <LL_FLASH_SetLatency+0x24>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f023 0207 	bic.w	r2, r3, #7
 80009b4:	4904      	ldr	r1, [pc, #16]	@ (80009c8 <LL_FLASH_SetLatency+0x24>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40022000 	.word	0x40022000

080009cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <LL_FLASH_GetLatency+0x18>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0307 	and.w	r3, r3, #7
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff ffc1 	bl	8000974 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009f2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80009f6:	f7ff ffa5 	bl	8000944 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff fe64 	bl	80006c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000a00:	f7ff fe86 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff feb8 	bl	8000780 <NVIC_EncodePriority>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff fe88 	bl	800072c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f80a 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f7ff fcb4 	bl	800038c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a24:	f7ff fc72 	bl	800030c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a28:	f000 fb0a 	bl	8001040 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a2c:	f7ff fddc 	bl	80005e8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <main+0x48>

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff ffb3 	bl	80009a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000a3e:	bf00      	nop
 8000a40:	f7ff ffc4 	bl	80009cc <LL_FLASH_GetLatency>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1fa      	bne.n	8000a40 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000a4a:	f7ff fecd 	bl	80007e8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a4e:	bf00      	nop
 8000a50:	f7ff feda 	bl	8000808 <LL_RCC_HSI_IsReady>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1fa      	bne.n	8000a50 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a5a:	2010      	movs	r0, #16
 8000a5c:	f7ff fee6 	bl	800082c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff1b 	bl	800089c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff2c 	bl	80008c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ff3d 	bl	80008ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fef0 	bl	8000858 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000a78:	bf00      	nop
 8000a7a:	f7ff ff01 	bl	8000880 <LL_RCC_GetSysClkSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1fa      	bne.n	8000a7a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <SystemClock_Config+0x68>)
 8000a86:	f001 f8b5 	bl	8001bf4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <SystemClock_Config+0x68>)
 8000a8c:	f001 f8c0 	bl	8001c10 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000a90:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a94:	f7ff ff3e 	bl	8000914 <LL_RCC_SetI2CClockSource>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	007a1200 	.word	0x007a1200

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	@ (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	@ (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	@ (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	@ 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	@ 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LL_DMA_SetDataTransferDirection+0x48>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	461a      	mov	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c90:	f023 0310 	bic.w	r3, r3, #16
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	3a01      	subs	r2, #1
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <LL_DMA_SetDataTransferDirection+0x48>)
 8000c9a:	5c8a      	ldrb	r2, [r1, r2]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	440a      	add	r2, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	08001ca8 	.word	0x08001ca8

08000cbc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <LL_DMA_SetMode+0x44>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f023 0220 	bic.w	r2, r3, #32
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <LL_DMA_SetMode+0x44>)
 8000ce2:	5ccb      	ldrb	r3, [r1, r3]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	440b      	add	r3, r1
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	08001ca8 	.word	0x08001ca8

08000d04 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <LL_DMA_SetPeriphIncMode+0x44>)
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	4907      	ldr	r1, [pc, #28]	@ (8000d48 <LL_DMA_SetPeriphIncMode+0x44>)
 8000d2a:	5ccb      	ldrb	r3, [r1, r3]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	440b      	add	r3, r1
 8000d32:	4619      	mov	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	08001ca8 	.word	0x08001ca8

08000d4c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <LL_DMA_SetMemoryIncMode+0x44>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	461a      	mov	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4907      	ldr	r1, [pc, #28]	@ (8000d90 <LL_DMA_SetMemoryIncMode+0x44>)
 8000d72:	5ccb      	ldrb	r3, [r1, r3]
 8000d74:	4619      	mov	r1, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	440b      	add	r3, r1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	08001ca8 	.word	0x08001ca8

08000d94 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <LL_DMA_SetPeriphSize+0x44>)
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <LL_DMA_SetPeriphSize+0x44>)
 8000dba:	5ccb      	ldrb	r3, [r1, r3]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	08001ca8 	.word	0x08001ca8

08000ddc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <LL_DMA_SetMemorySize+0x44>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	461a      	mov	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	4907      	ldr	r1, [pc, #28]	@ (8000e20 <LL_DMA_SetMemorySize+0x44>)
 8000e02:	5ccb      	ldrb	r3, [r1, r3]
 8000e04:	4619      	mov	r1, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	440b      	add	r3, r1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	08001ca8 	.word	0x08001ca8

08000e24 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4907      	ldr	r1, [pc, #28]	@ (8000e68 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000e4a:	5ccb      	ldrb	r3, [r1, r3]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	440b      	add	r3, r1
 8000e52:	4619      	mov	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	08001ca8 	.word	0x08001ca8

08000e6c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <LL_DMA_SetPeriphAddress+0x2c>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4413      	add	r3, r2
 8000e86:	461a      	mov	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6093      	str	r3, [r2, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	08001ca8 	.word	0x08001ca8

08000e9c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <LL_DMA_EnableIT_TE+0x3c>)
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <LL_DMA_EnableIT_TE+0x3c>)
 8000ebc:	5c8a      	ldrb	r2, [r1, r2]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	440a      	add	r2, r1
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	08001ca8 	.word	0x08001ca8

08000edc <LL_AHB1_GRP1_EnableClock>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_APB1_GRP1_EnableClock>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f16:	69da      	ldr	r2, [r3, #28]
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f22:	69da      	ldr	r2, [r3, #28]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4013      	ands	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3308      	adds	r3, #8
 8000f94:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	e853 3f00 	ldrex	r3, [r3]
 8000f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3308      	adds	r3, #8
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	61ba      	str	r2, [r7, #24]
 8000fae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fb0:	6979      	ldr	r1, [r7, #20]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	e841 2300 	strex	r3, r2, [r1]
 8000fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e7      	bne.n	8000f90 <LL_USART_DisableIT_CTS+0x8>
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	@ 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b089      	sub	sp, #36	@ 0x24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	e853 3f00 	ldrex	r3, [r3]
 8000fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	61ba      	str	r2, [r7, #24]
 8000ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ff6:	6979      	ldr	r1, [r7, #20]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	e841 2300 	strex	r3, r2, [r1]
 8000ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1e7      	bne.n	8000fd6 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3724      	adds	r7, #36	@ 0x24
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d103      	bne.n	800102c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3328      	adds	r3, #40	@ 0x28
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e002      	b.n	8001032 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3324      	adds	r3, #36	@ 0x24
 8001030:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <MX_USART2_UART_Init>:
	}
}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800106a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800106e:	f7ff ff4d 	bl	8000f0c <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001072:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001076:	f7ff ff31 	bl	8000edc <LL_AHB1_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800107a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800107e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001090:	2307      	movs	r3, #7
 8001092:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109c:	f000 f9be 	bl	800141c <LL_GPIO_Init>


	/* USART2_RX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2106      	movs	r1, #6
 80010a4:	4844      	ldr	r0, [pc, #272]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010a6:	f7ff fde3 	bl	8000c70 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80010aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ae:	2106      	movs	r1, #6
 80010b0:	4841      	ldr	r0, [pc, #260]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010b2:	f7ff feb7 	bl	8000e24 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80010b6:	2220      	movs	r2, #32
 80010b8:	2106      	movs	r1, #6
 80010ba:	483f      	ldr	r0, [pc, #252]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010bc:	f7ff fdfe 	bl	8000cbc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2106      	movs	r1, #6
 80010c4:	483c      	ldr	r0, [pc, #240]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010c6:	f7ff fe1d 	bl	8000d04 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	2106      	movs	r1, #6
 80010ce:	483a      	ldr	r0, [pc, #232]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010d0:	f7ff fe3c 	bl	8000d4c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2106      	movs	r1, #6
 80010d8:	4837      	ldr	r0, [pc, #220]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010da:	f7ff fe5b 	bl	8000d94 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80010de:	2200      	movs	r2, #0
 80010e0:	2106      	movs	r1, #6
 80010e2:	4835      	ldr	r0, [pc, #212]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010e4:	f7ff fe7a 	bl	8000ddc <LL_DMA_SetMemorySize>

	/* USART2_TX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80010e8:	2210      	movs	r2, #16
 80010ea:	2107      	movs	r1, #7
 80010ec:	4832      	ldr	r0, [pc, #200]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010ee:	f7ff fdbf 	bl	8000c70 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80010f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010f6:	2107      	movs	r1, #7
 80010f8:	482f      	ldr	r0, [pc, #188]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 80010fa:	f7ff fe93 	bl	8000e24 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80010fe:	2200      	movs	r2, #0
 8001100:	2107      	movs	r1, #7
 8001102:	482d      	ldr	r0, [pc, #180]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 8001104:	f7ff fdda 	bl	8000cbc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001108:	2200      	movs	r2, #0
 800110a:	2107      	movs	r1, #7
 800110c:	482a      	ldr	r0, [pc, #168]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 800110e:	f7ff fdf9 	bl	8000d04 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	2107      	movs	r1, #7
 8001116:	4828      	ldr	r0, [pc, #160]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 8001118:	f7ff fe18 	bl	8000d4c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800111c:	2200      	movs	r2, #0
 800111e:	2107      	movs	r1, #7
 8001120:	4825      	ldr	r0, [pc, #148]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 8001122:	f7ff fe37 	bl	8000d94 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001126:	2200      	movs	r2, #0
 8001128:	2107      	movs	r1, #7
 800112a:	4823      	ldr	r0, [pc, #140]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 800112c:	f7ff fe56 	bl	8000ddc <LL_DMA_SetMemorySize>

	/*data transfer to USART2 via DMA*/
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001130:	2100      	movs	r1, #0
 8001132:	4822      	ldr	r0, [pc, #136]	@ (80011bc <MX_USART2_UART_Init+0x17c>)
 8001134:	f7ff ff6e 	bl	8001014 <LL_USART_DMA_GetRegAddr>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	2107      	movs	r1, #7
 800113e:	481e      	ldr	r0, [pc, #120]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 8001140:	f7ff fe94 	bl	8000e6c <LL_DMA_SetPeriphAddress>
	LL_USART_EnableDMAReq_TX(USART2);
 8001144:	481d      	ldr	r0, [pc, #116]	@ (80011bc <MX_USART2_UART_Init+0x17c>)
 8001146:	f7ff ff42 	bl	8000fce <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800114a:	2107      	movs	r1, #7
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <MX_USART2_UART_Init+0x178>)
 800114e:	f7ff fea5 	bl	8000e9c <LL_DMA_EnableIT_TE>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001152:	f7ff fd03 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8001156:	4603      	mov	r3, r0
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fd53 	bl	8000c08 <NVIC_EncodePriority>
 8001162:	4603      	mov	r3, r0
 8001164:	4619      	mov	r1, r3
 8001166:	2026      	movs	r0, #38	@ 0x26
 8001168:	f7ff fd24 	bl	8000bb4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 800116c:	2026      	movs	r0, #38	@ 0x26
 800116e:	f7ff fd03 	bl	8000b78 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 8001172:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001176:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001184:	230c      	movs	r3, #12
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4809      	ldr	r0, [pc, #36]	@ (80011bc <MX_USART2_UART_Init+0x17c>)
 8001198:	f000 fca6 	bl	8001ae8 <LL_USART_Init>
	LL_USART_DisableIT_CTS(USART2);
 800119c:	4807      	ldr	r0, [pc, #28]	@ (80011bc <MX_USART2_UART_Init+0x17c>)
 800119e:	f7ff fef3 	bl	8000f88 <LL_USART_DisableIT_CTS>
	LL_USART_ConfigAsyncMode(USART2);
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <MX_USART2_UART_Init+0x17c>)
 80011a4:	f7ff feda 	bl	8000f5c <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_USART2_UART_Init+0x17c>)
 80011aa:	f7ff fec7 	bl	8000f3c <LL_USART_Enable>
  }
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	@ 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40004400 	.word	0x40004400

080011c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff fcb8 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <LoopForever+0x6>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	@ (8001200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <LoopForever+0xe>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	@ (800120c <LoopForever+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f000 fd1f 	bl	8001c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff fbf9 	bl	80009e8 <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001204:	08001cb8 	.word	0x08001cb8
  ldr r2, =_sbss
 8001208:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800120c:	20000020 	.word	0x20000020

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>

08001212 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001212:	b480      	push	{r7}
 8001214:	b089      	sub	sp, #36	@ 0x24
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	613b      	str	r3, [r7, #16]
  return result;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2103      	movs	r1, #3
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	401a      	ands	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	61bb      	str	r3, [r7, #24]
  return result;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3724      	adds	r7, #36	@ 0x24
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	43db      	mvns	r3, r3
 8001284:	401a      	ands	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	605a      	str	r2, [r3, #4]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	613b      	str	r3, [r7, #16]
  return result;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2103      	movs	r1, #3
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	61bb      	str	r3, [r7, #24]
  return result;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80012fe:	b480      	push	{r7}
 8001300:	b089      	sub	sp, #36	@ 0x24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	613b      	str	r3, [r7, #16]
  return result;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2103      	movs	r1, #3
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	401a      	ands	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa93 f3a3 	rbit	r3, r3
 8001338:	61bb      	str	r3, [r7, #24]
  return result;
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	fab3 f383 	clz	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	60da      	str	r2, [r3, #12]
}
 8001350:	bf00      	nop
 8001352:	3724      	adds	r7, #36	@ 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	613b      	str	r3, [r7, #16]
  return result;
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	210f      	movs	r1, #15
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	61bb      	str	r3, [r7, #24]
  return result;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	431a      	orrs	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80013ae:	bf00      	nop
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b089      	sub	sp, #36	@ 0x24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	613b      	str	r3, [r7, #16]
  return result;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	210f      	movs	r1, #15
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	61bb      	str	r3, [r7, #24]
  return result;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	431a      	orrs	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001410:	bf00      	nop
 8001412:	3724      	adds	r7, #36	@ 0x24
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	613b      	str	r3, [r7, #16]
  return result;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800143e:	e051      	b.n	80014e4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d043      	beq.n	80014de <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d003      	beq.n	8001466 <LL_GPIO_Init+0x4a>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d10e      	bne.n	8001484 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	461a      	mov	r2, r3
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff16 	bl	80012a0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	461a      	mov	r2, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fef6 	bl	8001270 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	461a      	mov	r2, r3
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff36 	bl	80012fe <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d11a      	bne.n	80014d0 <LL_GPIO_Init+0xb4>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	60bb      	str	r3, [r7, #8]
  return result;
 80014a6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	d807      	bhi.n	80014c2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	461a      	mov	r2, r3
 80014b8:	69b9      	ldr	r1, [r7, #24]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff4e 	bl	800135c <LL_GPIO_SetAFPin_0_7>
 80014c0:	e006      	b.n	80014d0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	461a      	mov	r2, r3
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff75 	bl	80013ba <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	461a      	mov	r2, r3
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fe9a 	bl	8001212 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1a6      	bne.n	8001440 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <LL_I2C_Enable>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_I2C_Disable>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 0201 	bic.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_I2C_ConfigFilters>:
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0219      	lsls	r1, r3, #8
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	430b      	orrs	r3, r1
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_I2C_SetOwnAddress1>:
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800157e:	f023 0307 	bic.w	r3, r3, #7
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	430a      	orrs	r2, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	609a      	str	r2, [r3, #8]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_I2C_EnableOwnAddress1>:
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_I2C_DisableOwnAddress1>:
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_I2C_SetTiming>:
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	611a      	str	r2, [r3, #16]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_I2C_SetMode>:
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	605a      	str	r2, [r3, #4]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff65 	bl	800151c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6899      	ldr	r1, [r3, #8]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	461a      	mov	r2, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff6d 	bl	800153c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ffb6 	bl	80015da <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ff44 	bl	80014fc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffa0 	bl	80015ba <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6919      	ldr	r1, [r3, #16]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	461a      	mov	r2, r3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff70 	bl	800156a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff81 	bl	800159a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa9 	bl	80015f6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffb6 	bl	800161c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <LL_RCC_HSI_IsReady>:
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <LL_RCC_HSI_IsReady+0x20>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000

080016e0 <LL_RCC_LSE_IsReady>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <LL_RCC_LSE_IsReady+0x20>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000

08001704 <LL_RCC_GetSysClkSource>:
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <LL_RCC_GetSysClkSource+0x18>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <LL_RCC_GetAHBPrescaler>:
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <LL_RCC_GetAHBPrescaler+0x18>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <LL_RCC_GetAPB1Prescaler>:
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <LL_RCC_GetAPB2Prescaler>:
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <LL_RCC_GetAPB2Prescaler+0x18>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <LL_RCC_GetUSARTClockSource+0x28>)
 800177e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001780:	2103      	movs	r1, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	4313      	orrs	r3, r2
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <LL_RCC_PLL_GetPrediv+0x18>)
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	f003 030f 	and.w	r3, r3, #15
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80017fc:	f000 f862 	bl	80018c4 <RCC_GetSystemClockFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f880 	bl	8001910 <RCC_GetHCLKClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f88e 	bl	800193c <RCC_GetPCLK1ClockFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f89a 	bl	8001964 <RCC_GetPCLK2ClockFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d130      	bne.n	80018b4 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff8e 	bl	8001774 <LL_RCC_GetUSARTClockSource>
 8001858:	4603      	mov	r3, r0
 800185a:	2b03      	cmp	r3, #3
 800185c:	d00a      	beq.n	8001874 <LL_RCC_GetUSARTClockFreq+0x34>
 800185e:	2b03      	cmp	r3, #3
 8001860:	d819      	bhi.n	8001896 <LL_RCC_GetUSARTClockFreq+0x56>
 8001862:	2b01      	cmp	r3, #1
 8001864:	d002      	beq.n	800186c <LL_RCC_GetUSARTClockFreq+0x2c>
 8001866:	2b02      	cmp	r3, #2
 8001868:	d00c      	beq.n	8001884 <LL_RCC_GetUSARTClockFreq+0x44>
 800186a:	e014      	b.n	8001896 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800186c:	f000 f82a 	bl	80018c4 <RCC_GetSystemClockFreq>
 8001870:	60f8      	str	r0, [r7, #12]
        break;
 8001872:	e01f      	b.n	80018b4 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001874:	f7ff ff22 	bl	80016bc <LL_RCC_HSI_IsReady>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d017      	beq.n	80018ae <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <LL_RCC_GetUSARTClockFreq+0x80>)
 8001880:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001882:	e014      	b.n	80018ae <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001884:	f7ff ff2c 	bl	80016e0 <LL_RCC_LSE_IsReady>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d011      	beq.n	80018b2 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800188e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001892:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001894:	e00d      	b.n	80018b2 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001896:	f000 f815 	bl	80018c4 <RCC_GetSystemClockFreq>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f837 	bl	8001910 <RCC_GetHCLKClockFreq>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f849 	bl	800193c <RCC_GetPCLK1ClockFreq>
 80018aa:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80018ac:	e002      	b.n	80018b4 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80018ae:	bf00      	nop
 80018b0:	e000      	b.n	80018b4 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80018b2:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	007a1200 	.word	0x007a1200

080018c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80018ce:	f7ff ff19 	bl	8001704 <LL_RCC_GetSysClkSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d00c      	beq.n	80018f2 <RCC_GetSystemClockFreq+0x2e>
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d80e      	bhi.n	80018fa <RCC_GetSystemClockFreq+0x36>
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <RCC_GetSystemClockFreq+0x22>
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d003      	beq.n	80018ec <RCC_GetSystemClockFreq+0x28>
 80018e4:	e009      	b.n	80018fa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <RCC_GetSystemClockFreq+0x48>)
 80018e8:	607b      	str	r3, [r7, #4]
      break;
 80018ea:	e009      	b.n	8001900 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <RCC_GetSystemClockFreq+0x48>)
 80018ee:	607b      	str	r3, [r7, #4]
      break;
 80018f0:	e006      	b.n	8001900 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80018f2:	f000 f84b 	bl	800198c <RCC_PLL_GetFreqDomain_SYS>
 80018f6:	6078      	str	r0, [r7, #4]
      break;
 80018f8:	e002      	b.n	8001900 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <RCC_GetSystemClockFreq+0x48>)
 80018fc:	607b      	str	r3, [r7, #4]
      break;
 80018fe:	bf00      	nop
  }

  return frequency;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	007a1200 	.word	0x007a1200

08001910 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001918:	f7ff ff02 	bl	8001720 <LL_RCC_GetAHBPrescaler>
 800191c:	4603      	mov	r3, r0
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <RCC_GetHCLKClockFreq+0x28>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	40d3      	lsrs	r3, r2
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	08001c90 	.word	0x08001c90

0800193c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001944:	f7ff fefa 	bl	800173c <LL_RCC_GetAPB1Prescaler>
 8001948:	4603      	mov	r3, r0
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <RCC_GetPCLK1ClockFreq+0x24>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	40d3      	lsrs	r3, r2
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	08001ca0 	.word	0x08001ca0

08001964 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800196c:	f7ff fef4 	bl	8001758 <LL_RCC_GetAPB2Prescaler>
 8001970:	4603      	mov	r3, r0
 8001972:	0adb      	lsrs	r3, r3, #11
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <RCC_GetPCLK2ClockFreq+0x24>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	461a      	mov	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	40d3      	lsrs	r3, r2
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	08001ca0 	.word	0x08001ca0

0800198c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800199a:	f7ff ff01 	bl	80017a0 <LL_RCC_PLL_GetMainSource>
 800199e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d003      	beq.n	80019b6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80019ae:	e005      	b.n	80019bc <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80019b2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80019b4:	e005      	b.n	80019c2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80019b8:	60fb      	str	r3, [r7, #12]
      break;
 80019ba:	e002      	b.n	80019c2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80019be:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80019c0:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80019c2:	f7ff ff09 	bl	80017d8 <LL_RCC_PLL_GetPrediv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	3301      	adds	r3, #1
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	fbb2 f4f3 	udiv	r4, r2, r3
 80019d0:	f7ff fef4 	bl	80017bc <LL_RCC_PLL_GetMultiplicator>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80019da:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80019de:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	603a      	str	r2, [r7, #0]
  return result;
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	40d3      	lsrs	r3, r2
 80019f2:	3302      	adds	r3, #2
 80019f4:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	003d0900 	.word	0x003d0900
 8001a04:	007a1200 	.word	0x007a1200

08001a08 <LL_USART_IsEnabled>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <LL_USART_IsEnabled+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_USART_IsEnabled+0x1a>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_USART_SetStopBitsLength>:
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_USART_SetHWFlowCtrl>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_USART_SetBaudRate>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b087      	sub	sp, #28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a8e:	d11a      	bne.n	8001ac6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	005a      	lsls	r2, r3, #1
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	441a      	add	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	60da      	str	r2, [r3, #12]
}
 8001ac4:	e00a      	b.n	8001adc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	085a      	lsrs	r2, r3, #1
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	441a      	add	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff84 	bl	8001a08 <LL_USART_IsEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d14e      	bne.n	8001ba4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <LL_USART_Init+0xc8>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6851      	ldr	r1, [r2, #4]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	68d2      	ldr	r2, [r2, #12]
 8001b16:	4311      	orrs	r1, r2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	6912      	ldr	r2, [r2, #16]
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	6992      	ldr	r2, [r2, #24]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff7c 	bl	8001a2e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff89 	bl	8001a54 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb4 <LL_USART_Init+0xcc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d104      	bne.n	8001b54 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fe78 	bl	8001840 <LL_RCC_GetUSARTClockFreq>
 8001b50:	61b8      	str	r0, [r7, #24]
 8001b52:	e016      	b.n	8001b82 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <LL_USART_Init+0xd0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d107      	bne.n	8001b6c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe47 	bl	80017f4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	e00a      	b.n	8001b82 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <LL_USART_Init+0xd4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d106      	bne.n	8001b82 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe3b 	bl	80017f4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001b9c:	69b9      	ldr	r1, [r7, #24]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff6b 	bl	8001a7a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	efff69f3 	.word	0xefff69f3
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40004800 	.word	0x40004800

08001bc0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <LL_InitTick+0x30>)
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <LL_InitTick+0x30>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <LL_InitTick+0x30>)
 8001be0:	2205      	movs	r2, #5
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001bfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffdd 	bl	8001bc0 <LL_InitTick>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <LL_SetSystemCoreClock+0x1c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <__libc_init_array>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	4d0d      	ldr	r5, [pc, #52]	@ (8001c68 <__libc_init_array+0x38>)
 8001c34:	4c0d      	ldr	r4, [pc, #52]	@ (8001c6c <__libc_init_array+0x3c>)
 8001c36:	1b64      	subs	r4, r4, r5
 8001c38:	10a4      	asrs	r4, r4, #2
 8001c3a:	2600      	movs	r6, #0
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d109      	bne.n	8001c54 <__libc_init_array+0x24>
 8001c40:	4d0b      	ldr	r5, [pc, #44]	@ (8001c70 <__libc_init_array+0x40>)
 8001c42:	4c0c      	ldr	r4, [pc, #48]	@ (8001c74 <__libc_init_array+0x44>)
 8001c44:	f000 f818 	bl	8001c78 <_init>
 8001c48:	1b64      	subs	r4, r4, r5
 8001c4a:	10a4      	asrs	r4, r4, #2
 8001c4c:	2600      	movs	r6, #0
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d105      	bne.n	8001c5e <__libc_init_array+0x2e>
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c58:	4798      	blx	r3
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7ee      	b.n	8001c3c <__libc_init_array+0xc>
 8001c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c62:	4798      	blx	r3
 8001c64:	3601      	adds	r6, #1
 8001c66:	e7f2      	b.n	8001c4e <__libc_init_array+0x1e>
 8001c68:	08001cb0 	.word	0x08001cb0
 8001c6c:	08001cb0 	.word	0x08001cb0
 8001c70:	08001cb0 	.word	0x08001cb0
 8001c74:	08001cb4 	.word	0x08001cb4

08001c78 <_init>:
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	bf00      	nop
 8001c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7e:	bc08      	pop	{r3}
 8001c80:	469e      	mov	lr, r3
 8001c82:	4770      	bx	lr

08001c84 <_fini>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr
