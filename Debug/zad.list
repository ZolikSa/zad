
zad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000616c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08006300  08006300  00007300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d0  080066d0  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080066d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d8  2**0
                  CONTENTS
 10 .bss          000001a0  200001d8  200001d8  000081d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  000081d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000069ac  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4e  00000000  00000000  0000ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  00010708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060f  00000000  00000000  00010f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b05  00000000  00000000  00011587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000802e  00000000  00000000  0002908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077993  00000000  00000000  000310ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8a4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032dc  00000000  00000000  000a8a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000abd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062e4 	.word	0x080062e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080062e4 	.word	0x080062e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	@ (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	4907      	ldr	r1, [pc, #28]	@ (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff ffe3 	bl	8000d5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d96:	f7ff ff57 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffa7 	bl	8000cf4 <NVIC_EncodePriority>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	2010      	movs	r0, #16
 8000dac:	f7ff ff78 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000db0:	2010      	movs	r0, #16
 8000db2:	f7ff ff57 	bl	8000c64 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000db6:	f7ff ff47 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff97 	bl	8000cf4 <NVIC_EncodePriority>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2011      	movs	r0, #17
 8000dcc:	f7ff ff68 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_EnableIRQ>

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <LL_AHB1_GRP1_EnableClock>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000de6:	695a      	ldr	r2, [r3, #20]
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4013      	ands	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e10:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e14:	f7ff ffe2 	bl	8000ddc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e18:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000e1c:	f7ff ffde 	bl	8000ddc <LL_AHB1_GRP1_EnableClock>

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <__NVIC_GetPriorityGrouping>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	@ (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	@ 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000faa:	f023 0306 	bic.w	r3, r3, #6
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	60da      	str	r2, [r3, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60da      	str	r2, [r3, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d101      	bne.n	8000ffe <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b04      	cmp	r3, #4
 800101e:	d101      	bne.n	8001024 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	2b20      	cmp	r3, #32
 8001044:	d101      	bne.n	800104a <LL_I2C_IsActiveFlag_STOP+0x18>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001068:	2b40      	cmp	r3, #64	@ 0x40
 800106a:	d101      	bne.n	8001070 <LL_I2C_IsActiveFlag_TC+0x18>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <LL_I2C_IsActiveFlag_TC+0x1a>
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f043 0220 	orr.w	r2, r3, #32
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	61da      	str	r2, [r3, #28]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010da:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010e4:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	4313      	orrs	r3, r2
 80010ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	0d5b      	lsrs	r3, r3, #21
 80010fc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <LL_I2C_HandleTransfer+0x5c>)
 8001102:	430b      	orrs	r3, r1
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	431a      	orrs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	03ff7bff 	.word	0x03ff7bff

08001120 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001146:	78fa      	ldrb	r2, [r7, #3]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_AHB1_GRP1_EnableClock>:
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	4907      	ldr	r1, [pc, #28]	@ (8001184 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4313      	orrs	r3, r2
 800116a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4013      	ands	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000

08001188 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4013      	ands	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_I2C1_Init>:
//I2C_Read_Callback I2C_Read = I2C_ReadData;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	@ 0x38
 80011bc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011e2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80011e6:	f7ff ffb7 	bl	8001158 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011ea:	23c0      	movs	r3, #192	@ 0xc0
 80011ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011ee:	2302      	movs	r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80011f6:	2301      	movs	r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80011fe:	2304      	movs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <MX_I2C1_Init+0xd4>)
 8001208:	f001 f9b4 	bl	8002574 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800120c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001210:	f7ff ffba 	bl	8001188 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001214:	f7ff fe06 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8001218:	4603      	mov	r3, r0
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fe56 	bl	8000ed0 <NVIC_EncodePriority>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	201f      	movs	r0, #31
 800122a:	f7ff fe27 	bl	8000e7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800122e:	201f      	movs	r0, #31
 8001230:	f7ff fe06 	bl	8000e40 <__NVIC_EnableIRQ>

  /** I2C Initialization*/
  LL_I2C_EnableAutoEndMode(I2C1);
 8001234:	4816      	ldr	r0, [pc, #88]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001236:	f7ff ff32 	bl	800109e <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800123a:	4815      	ldr	r0, [pc, #84]	@ (8001290 <MX_I2C1_Init+0xd8>)
 800123c:	f7ff fec3 	bl	8000fc6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001240:	4813      	ldr	r0, [pc, #76]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001242:	f7ff fe98 	bl	8000f76 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001248:	f7ff fe85 	bl	8000f56 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D2B;
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_I2C1_Init+0xdc>)
 8001252:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001270:	f001 fa93 	bl	800279a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_I2C1_Init+0xd8>)
 800127a:	f7ff fe8c 	bl	8000f96 <LL_I2C_SetOwnAddress2>
  LL_I2C_Enable(I2C1);
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001280:	f7ff fe59 	bl	8000f36 <LL_I2C_Enable>
}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	@ 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	48000400 	.word	0x48000400
 8001290:	40005400 	.word	0x40005400
 8001294:	00101d2b 	.word	0x00101d2b

08001298 <I2C_WriteData>:

void I2C_WriteData(uint8_t slave_addr, uint8_t register_addr, uint8_t *data, uint8_t length)
  {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	603a      	str	r2, [r7, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	460b      	mov	r3, r1
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	4613      	mov	r3, r2
 80012ac:	717b      	strb	r3, [r7, #5]
	if (length == 0) return;
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d036      	beq.n	8001322 <I2C_WriteData+0x8a>
    /* Start the I2C write transfer with register address */
    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80012b4:	79f9      	ldrb	r1, [r7, #7]
 80012b6:	797b      	ldrb	r3, [r7, #5]
 80012b8:	3301      	adds	r3, #1
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <I2C_WriteData+0x94>)
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	4613      	mov	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	4819      	ldr	r0, [pc, #100]	@ (8001330 <I2C_WriteData+0x98>)
 80012cc:	f7ff fef8 	bl	80010c0 <LL_I2C_HandleTransfer>
    /* Transmit the register address */
    LL_I2C_TransmitData8(I2C1, register_addr);
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4816      	ldr	r0, [pc, #88]	@ (8001330 <I2C_WriteData+0x98>)
 80012d6:	f7ff ff30 	bl	800113a <LL_I2C_TransmitData8>

    for (uint8_t i = 0; i < length; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e011      	b.n	8001304 <I2C_WriteData+0x6c>
     	 {
          while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80012e0:	bf00      	nop
 80012e2:	4813      	ldr	r0, [pc, #76]	@ (8001330 <I2C_WriteData+0x98>)
 80012e4:	f7ff fe7f 	bl	8000fe6 <LL_I2C_IsActiveFlag_TXIS>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <I2C_WriteData+0x4a>
          LL_I2C_TransmitData8(I2C1, data[i]);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	480d      	ldr	r0, [pc, #52]	@ (8001330 <I2C_WriteData+0x98>)
 80012fa:	f7ff ff1e 	bl	800113a <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < length; i++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3e9      	bcc.n	80012e0 <I2C_WriteData+0x48>
     	 }
    while (!LL_I2C_IsActiveFlag_STOP(I2C1));
 800130c:	bf00      	nop
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <I2C_WriteData+0x98>)
 8001310:	f7ff fe8f 	bl	8001032 <LL_I2C_IsActiveFlag_STOP>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f9      	beq.n	800130e <I2C_WriteData+0x76>
    LL_I2C_ClearFlag_STOP(I2C1);
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <I2C_WriteData+0x98>)
 800131c:	f7ff feaf 	bl	800107e <LL_I2C_ClearFlag_STOP>
 8001320:	e000      	b.n	8001324 <I2C_WriteData+0x8c>
	if (length == 0) return;
 8001322:	bf00      	nop
  }
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	80002000 	.word	0x80002000
 8001330:	40005400 	.word	0x40005400

08001334 <I2C_ReadData>:

void I2C_ReadData(uint8_t slave_addr, uint8_t register_addr, uint8_t *data, uint8_t length)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b087      	sub	sp, #28
 8001338:	af02      	add	r7, sp, #8
 800133a:	603a      	str	r2, [r7, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	460b      	mov	r3, r1
 8001344:	71bb      	strb	r3, [r7, #6]
 8001346:	4613      	mov	r3, r2
 8001348:	717b      	strb	r3, [r7, #5]
    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 800134a:	79f9      	ldrb	r1, [r7, #7]
 800134c:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <I2C_ReadData+0xa8>)
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	2200      	movs	r2, #0
 8001358:	4821      	ldr	r0, [pc, #132]	@ (80013e0 <I2C_ReadData+0xac>)
 800135a:	f7ff feb1 	bl	80010c0 <LL_I2C_HandleTransfer>
    LL_I2C_TransmitData8(I2C1, register_addr);
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	4619      	mov	r1, r3
 8001362:	481f      	ldr	r0, [pc, #124]	@ (80013e0 <I2C_ReadData+0xac>)
 8001364:	f7ff fee9 	bl	800113a <LL_I2C_TransmitData8>
    while (!LL_I2C_IsActiveFlag_TC(I2C1)); // Wait for transfer complete
 8001368:	bf00      	nop
 800136a:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <I2C_ReadData+0xac>)
 800136c:	f7ff fe74 	bl	8001058 <LL_I2C_IsActiveFlag_TC>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f9      	beq.n	800136a <I2C_ReadData+0x36>

    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001376:	79f9      	ldrb	r1, [r7, #7]
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <I2C_ReadData+0xb0>)
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <I2C_ReadData+0xac>)
 8001388:	f7ff fe9a 	bl	80010c0 <LL_I2C_HandleTransfer>

    for (uint8_t i = 0; i < length; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e011      	b.n	80013b6 <I2C_ReadData+0x82>
    	{
        while (!LL_I2C_IsActiveFlag_RXNE(I2C1));
 8001392:	bf00      	nop
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <I2C_ReadData+0xac>)
 8001396:	f7ff fe39 	bl	800100c <LL_I2C_IsActiveFlag_RXNE>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f9      	beq.n	8001394 <I2C_ReadData+0x60>
        data[i] = LL_I2C_ReceiveData8(I2C1);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	18d4      	adds	r4, r2, r3
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <I2C_ReadData+0xac>)
 80013a8:	f7ff feba 	bl	8001120 <LL_I2C_ReceiveData8>
 80013ac:	4603      	mov	r3, r0
 80013ae:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < length; i++)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3e9      	bcc.n	8001392 <I2C_ReadData+0x5e>
    	}
    while (!LL_I2C_IsActiveFlag_STOP(I2C1));
 80013be:	bf00      	nop
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <I2C_ReadData+0xac>)
 80013c2:	f7ff fe36 	bl	8001032 <LL_I2C_IsActiveFlag_STOP>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f9      	beq.n	80013c0 <I2C_ReadData+0x8c>
    LL_I2C_ClearFlag_STOP(I2C1);
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <I2C_ReadData+0xac>)
 80013ce:	f7ff fe56 	bl	800107e <LL_I2C_ClearFlag_STOP>
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	80002000 	.word	0x80002000
 80013e0:	40005400 	.word	0x40005400
 80013e4:	80002400 	.word	0x80002400

080013e8 <__NVIC_SetPriorityGrouping>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_SetPriority>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <LL_RCC_HSI_Enable+0x1c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <LL_RCC_HSI_Enable+0x1c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <LL_RCC_HSI_IsReady+0x20>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b02      	cmp	r3, #2
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4904      	ldr	r1, [pc, #16]	@ (8001574 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <LL_RCC_SetSysClkSource+0x24>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 0203 	bic.w	r2, r3, #3
 8001588:	4904      	ldr	r1, [pc, #16]	@ (800159c <LL_RCC_SetSysClkSource+0x24>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000

080015a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <LL_RCC_GetSysClkSource+0x18>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	4904      	ldr	r1, [pc, #16]	@ (80015e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015f4:	4904      	ldr	r1, [pc, #16]	@ (8001608 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000

0800160c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800161c:	4904      	ldr	r1, [pc, #16]	@ (8001630 <LL_RCC_SetAPB2Prescaler+0x24>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000

08001634 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <LL_RCC_SetI2CClockSource+0x2c>)
 800163e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	0e1b      	lsrs	r3, r3, #24
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800164e:	4904      	ldr	r1, [pc, #16]	@ (8001660 <LL_RCC_SetI2CClockSource+0x2c>)
 8001650:	4313      	orrs	r3, r2
 8001652:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000

08001664 <LL_APB1_GRP1_EnableClock>:
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000

080016c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <LL_FLASH_SetLatency+0x24>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 0207 	bic.w	r2, r3, #7
 80016d4:	4904      	ldr	r1, [pc, #16]	@ (80016e8 <LL_FLASH_SetLatency+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40022000 	.word	0x40022000

080016ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <LL_FLASH_GetLatency+0x18>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	b087      	sub	sp, #28
 800170e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff ffbf 	bl	8001694 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001716:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800171a:	f7ff ffa3 	bl	8001664 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f7ff fe62 	bl	80013e8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001724:	f7ff fe84 	bl	8001430 <__NVIC_GetPriorityGrouping>
 8001728:	4603      	mov	r3, r0
 800172a:	2200      	movs	r2, #0
 800172c:	210f      	movs	r1, #15
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff feb6 	bl	80014a0 <NVIC_EncodePriority>
 8001734:	4603      	mov	r3, r0
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff fe86 	bl	800144c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f8c2 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f7ff fb62 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001748:	f7ff fb20 	bl	8000d8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800174c:	f000 fd04 	bl	8002158 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001750:	f7ff fd32 	bl	80011b8 <MX_I2C1_Init>
  hts221_init();
 8001754:	f001 fb6a 	bl	8002e2c <hts221_init>
  lps25hb_init();
 8001758:	f001 fcf4 	bl	8003144 <lps25hb_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pressure = lps25hb_get_pressure();
 800175c:	f001 fd30 	bl	80031c0 <lps25hb_get_pressure>
 8001760:	eef0 7a40 	vmov.f32	s15, s0
 8001764:	4b4e      	ldr	r3, [pc, #312]	@ (80018a0 <main+0x198>)
 8001766:	edc3 7a00 	vstr	s15, [r3]
	  T=lps25hb_get_temperature()+273.15;
 800176a:	f001 fd4f 	bl	800320c <lps25hb_get_temperature>
 800176e:	ee10 3a10 	vmov	r3, s0
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fee8 	bl	8000548 <__aeabi_f2d>
 8001778:	a347      	add	r3, pc, #284	@ (adr r3, 8001898 <main+0x190>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fd85 	bl	800028c <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa0d 	bl	8000ba8 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	4a44      	ldr	r2, [pc, #272]	@ (80018a4 <main+0x19c>)
 8001792:	6013      	str	r3, [r2, #0]
	  height = (-log((100*pressure/pressureatsealevel))*T)/constant;
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <main+0x198>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80018a8 <main+0x1a0>
 800179e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017a2:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <main+0x1a4>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ac:	ee16 0a90 	vmov	r0, s13
 80017b0:	f7fe feca 	bl	8000548 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	ec43 2b10 	vmov	d0, r2, r3
 80017bc:	f004 fb94 	bl	8005ee8 <log>
 80017c0:	ec53 2b10 	vmov	r2, r3, d0
 80017c4:	4614      	mov	r4, r2
 80017c6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80017ca:	4b36      	ldr	r3, [pc, #216]	@ (80018a4 <main+0x19c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feba 	bl	8000548 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7fe ff0c 	bl	80005f8 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4690      	mov	r8, r2
 80017e6:	4699      	mov	r9, r3
 80017e8:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <main+0x1a8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feab 	bl	8000548 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4640      	mov	r0, r8
 80017f8:	4649      	mov	r1, r9
 80017fa:	f7ff f827 	bl	800084c <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9cf 	bl	8000ba8 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <main+0x1ac>)
 800180e:	6013      	str	r3, [r2, #0]
	  temperature=hts221_get_temperature();
 8001810:	f001 fbc3 	bl	8002f9a <hts221_get_temperature>
 8001814:	eef0 7a40 	vmov.f32	s15, s0
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <main+0x1b0>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
	  humidity=hts221_get_humidity();
 800181e:	f001 fb37 	bl	8002e90 <hts221_get_humidity>
 8001822:	4603      	mov	r3, r0
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <main+0x1b4>)
 8001828:	701a      	strb	r2, [r3, #0]
	  memset(formated_text, '\0', sizeof(formated_text));
 800182a:	221e      	movs	r2, #30
 800182c:	2100      	movs	r1, #0
 800182e:	4824      	ldr	r0, [pc, #144]	@ (80018c0 <main+0x1b8>)
 8001830:	f002 fa8f 	bl	8003d52 <memset>
	  sprintf(formated_text, "\n Teplota: %.1f, Vlhkost: %d%% Tlak: %.2f, Vyska: %.2f\r", temperature,humidity,pressure, height);
 8001834:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <main+0x1b0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe85 	bl	8000548 <__aeabi_f2d>
 800183e:	4682      	mov	sl, r0
 8001840:	468b      	mov	fp, r1
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <main+0x1b4>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461e      	mov	r6, r3
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <main+0x198>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	4680      	mov	r8, r0
 8001854:	4689      	mov	r9, r1
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <main+0x1ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe74 	bl	8000548 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001868:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800186c:	9600      	str	r6, [sp, #0]
 800186e:	4652      	mov	r2, sl
 8001870:	465b      	mov	r3, fp
 8001872:	4914      	ldr	r1, [pc, #80]	@ (80018c4 <main+0x1bc>)
 8001874:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <main+0x1b8>)
 8001876:	f002 fa09 	bl	8003c8c <siprintf>
	  USART2_PutBuffer((uint8_t*)formated_text, strlen(formated_text));
 800187a:	4811      	ldr	r0, [pc, #68]	@ (80018c0 <main+0x1b8>)
 800187c:	f7fe fcf8 	bl	8000270 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <main+0x1b8>)
 8001888:	f000 fd26 	bl	80022d8 <USART2_PutBuffer>
	  LL_mDelay(2000);
 800188c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001890:	f001 fa6a 	bl	8002d68 <LL_mDelay>
	  pressure = lps25hb_get_pressure();
 8001894:	bf00      	nop
 8001896:	e761      	b.n	800175c <main+0x54>
 8001898:	66666666 	.word	0x66666666
 800189c:	40711266 	.word	0x40711266
 80018a0:	200001fc 	.word	0x200001fc
 80018a4:	20000204 	.word	0x20000204
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000200 	.word	0x20000200
 80018b8:	200001f8 	.word	0x200001f8
 80018bc:	200001f4 	.word	0x200001f4
 80018c0:	20000208 	.word	0x20000208
 80018c4:	08006300 	.word	0x08006300

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fef9 	bl	80016c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80018d2:	bf00      	nop
 80018d4:	f7ff ff0a 	bl	80016ec <LL_FLASH_GetLatency>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1fa      	bne.n	80018d4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80018de:	f7ff fe13 	bl	8001508 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80018e2:	bf00      	nop
 80018e4:	f7ff fe20 	bl	8001528 <LL_RCC_HSI_IsReady>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d1fa      	bne.n	80018e4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80018ee:	2010      	movs	r0, #16
 80018f0:	f7ff fe2c 	bl	800154c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fe61 	bl	80015bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fe72 	bl	80015e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff fe83 	bl	800160c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fe36 	bl	8001578 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800190c:	bf00      	nop
 800190e:	f7ff fe47 	bl	80015a0 <LL_RCC_GetSysClkSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1fa      	bne.n	800190e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001918:	4805      	ldr	r0, [pc, #20]	@ (8001930 <SystemClock_Config+0x68>)
 800191a:	f001 fa17 	bl	8002d4c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800191e:	4804      	ldr	r0, [pc, #16]	@ (8001930 <SystemClock_Config+0x68>)
 8001920:	f001 fa48 	bl	8002db4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001924:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001928:	f7ff fe84 	bl	8001634 <LL_RCC_SetI2CClockSource>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	007a1200 	.word	0x007a1200

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e6:	f002 fa07 	bl	8003df8 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	bf00      	nop
 8001a10:	e7fd      	b.n	8001a0e <_exit+0x12>

08001a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e00a      	b.n	8001a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a24:	f3af 8000 	nop.w
 8001a28:	4601      	mov	r1, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dbf0      	blt.n	8001a24 <_read+0x12>
  }

  return len;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e009      	b.n	8001a72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60ba      	str	r2, [r7, #8]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf1      	blt.n	8001a5e <_write+0x12>
  }
  return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_close>:

int _close(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aac:	605a      	str	r2, [r3, #4]
  return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_isatty>:

int _isatty(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f002 f96c 	bl	8003df8 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20003000 	.word	0x20003000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20000228 	.word	0x20000228
 8001b54:	20000378 	.word	0x20000378

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	@ (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <LL_DMA_EnableChannel+0x3c>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	3a01      	subs	r2, #1
 8001cae:	4907      	ldr	r1, [pc, #28]	@ (8001ccc <LL_DMA_EnableChannel+0x3c>)
 8001cb0:	5c8a      	ldrb	r2, [r1, r2]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	440a      	add	r2, r1
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	08006350 	.word	0x08006350

08001cd0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <LL_DMA_SetDataTransferDirection+0x48>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cf0:	f023 0310 	bic.w	r3, r3, #16
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	4907      	ldr	r1, [pc, #28]	@ (8001d18 <LL_DMA_SetDataTransferDirection+0x48>)
 8001cfa:	5c8a      	ldrb	r2, [r1, r2]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	440a      	add	r2, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	08006350 	.word	0x08006350

08001d1c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <LL_DMA_SetMode+0x44>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0220 	bic.w	r2, r3, #32
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	4907      	ldr	r1, [pc, #28]	@ (8001d60 <LL_DMA_SetMode+0x44>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	4619      	mov	r1, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	440b      	add	r3, r1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	08006350 	.word	0x08006350

08001d64 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	440b      	add	r3, r1
 8001d92:	4619      	mov	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	08006350 	.word	0x08006350

08001dac <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <LL_DMA_SetMemoryIncMode+0x44>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4907      	ldr	r1, [pc, #28]	@ (8001df0 <LL_DMA_SetMemoryIncMode+0x44>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	440b      	add	r3, r1
 8001dda:	4619      	mov	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	08006350 	.word	0x08006350

08001df4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a0c      	ldr	r2, [pc, #48]	@ (8001e38 <LL_DMA_SetPeriphSize+0x44>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <LL_DMA_SetPeriphSize+0x44>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	440b      	add	r3, r1
 8001e22:	4619      	mov	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	08006350 	.word	0x08006350

08001e3c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <LL_DMA_SetMemorySize+0x44>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <LL_DMA_SetMemorySize+0x44>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	4619      	mov	r1, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	440b      	add	r3, r1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	08006350 	.word	0x08006350

08001e84 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	4907      	ldr	r1, [pc, #28]	@ (8001ec8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	4619      	mov	r1, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	440b      	add	r3, r1
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08006350 	.word	0x08006350

08001ecc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <LL_DMA_SetDataLength+0x44>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	4907      	ldr	r1, [pc, #28]	@ (8001f10 <LL_DMA_SetDataLength+0x44>)
 8001ef2:	5c8a      	ldrb	r2, [r1, r2]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	440a      	add	r2, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	08006350 	.word	0x08006350

08001f14 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <LL_DMA_SetMemoryAddress+0x2c>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	08006350 	.word	0x08006350

08001f44 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <LL_DMA_SetPeriphAddress+0x2c>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6093      	str	r3, [r2, #8]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	08006350 	.word	0x08006350

08001f74 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <LL_DMA_EnableIT_TC+0x3c>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	3a01      	subs	r2, #1
 8001f92:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <LL_DMA_EnableIT_TC+0x3c>)
 8001f94:	5c8a      	ldrb	r2, [r1, r2]
 8001f96:	4611      	mov	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6013      	str	r3, [r2, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	08006350 	.word	0x08006350

08001fb4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff0 <LL_DMA_EnableIT_TE+0x3c>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <LL_DMA_EnableIT_TE+0x3c>)
 8001fd4:	5c8a      	ldrb	r2, [r1, r2]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	440a      	add	r2, r1
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	08006350 	.word	0x08006350

08001ff4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	4907      	ldr	r1, [pc, #28]	@ (8002020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000

08002024 <LL_APB1_GRP1_EnableClock>:
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	4907      	ldr	r1, [pc, #28]	@ (8002050 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4313      	orrs	r3, r2
 8002036:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4013      	ands	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000

08002054 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	@ 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3308      	adds	r3, #8
 80020ac:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	e853 3f00 	ldrex	r3, [r3]
 80020b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3308      	adds	r3, #8
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	61ba      	str	r2, [r7, #24]
 80020c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c8:	6979      	ldr	r1, [r7, #20]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	e841 2300 	strex	r3, r2, [r1]
 80020d0:	613b      	str	r3, [r7, #16]
   return(result);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e7      	bne.n	80020a8 <LL_USART_DisableIT_CTS+0x8>
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b089      	sub	sp, #36	@ 0x24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3308      	adds	r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	e853 3f00 	ldrex	r3, [r3]
 80020fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3308      	adds	r3, #8
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	61ba      	str	r2, [r7, #24]
 800210c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210e:	6979      	ldr	r1, [r7, #20]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	e841 2300 	strex	r3, r2, [r1]
 8002116:	613b      	str	r3, [r7, #16]
   return(result);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1e7      	bne.n	80020ee <LL_USART_EnableDMAReq_TX+0x8>
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	3724      	adds	r7, #36	@ 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3328      	adds	r3, #40	@ 0x28
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e002      	b.n	800214a <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3324      	adds	r3, #36	@ 0x24
 8002148:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <MX_USART2_UART_Init>:
	}
}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08e      	sub	sp, #56	@ 0x38
 800215c:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	615a      	str	r2, [r3, #20]
 8002170:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	615a      	str	r2, [r3, #20]

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002182:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002186:	f7ff ff4d 	bl	8002024 <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800218a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800218e:	f7ff ff31 	bl	8001ff4 <LL_AHB1_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002192:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002196:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002198:	2302      	movs	r3, #2
 800219a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80021a8:	2307      	movs	r3, #7
 80021aa:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b4:	f000 f9de 	bl	8002574 <LL_GPIO_Init>


	/* USART2_RX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2106      	movs	r1, #6
 80021bc:	4844      	ldr	r0, [pc, #272]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021be:	f7ff fd87 	bl	8001cd0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80021c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021c6:	2106      	movs	r1, #6
 80021c8:	4841      	ldr	r0, [pc, #260]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021ca:	f7ff fe5b 	bl	8001e84 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80021ce:	2220      	movs	r2, #32
 80021d0:	2106      	movs	r1, #6
 80021d2:	483f      	ldr	r0, [pc, #252]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021d4:	f7ff fda2 	bl	8001d1c <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80021d8:	2200      	movs	r2, #0
 80021da:	2106      	movs	r1, #6
 80021dc:	483c      	ldr	r0, [pc, #240]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021de:	f7ff fdc1 	bl	8001d64 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	2106      	movs	r1, #6
 80021e6:	483a      	ldr	r0, [pc, #232]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021e8:	f7ff fde0 	bl	8001dac <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2106      	movs	r1, #6
 80021f0:	4837      	ldr	r0, [pc, #220]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021f2:	f7ff fdff 	bl	8001df4 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2106      	movs	r1, #6
 80021fa:	4835      	ldr	r0, [pc, #212]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 80021fc:	f7ff fe1e 	bl	8001e3c <LL_DMA_SetMemorySize>

	/* USART2_TX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002200:	2210      	movs	r2, #16
 8002202:	2107      	movs	r1, #7
 8002204:	4832      	ldr	r0, [pc, #200]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002206:	f7ff fd63 	bl	8001cd0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800220a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800220e:	2107      	movs	r1, #7
 8002210:	482f      	ldr	r0, [pc, #188]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002212:	f7ff fe37 	bl	8001e84 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002216:	2200      	movs	r2, #0
 8002218:	2107      	movs	r1, #7
 800221a:	482d      	ldr	r0, [pc, #180]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 800221c:	f7ff fd7e 	bl	8001d1c <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002220:	2200      	movs	r2, #0
 8002222:	2107      	movs	r1, #7
 8002224:	482a      	ldr	r0, [pc, #168]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002226:	f7ff fd9d 	bl	8001d64 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800222a:	2280      	movs	r2, #128	@ 0x80
 800222c:	2107      	movs	r1, #7
 800222e:	4828      	ldr	r0, [pc, #160]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002230:	f7ff fdbc 	bl	8001dac <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002234:	2200      	movs	r2, #0
 8002236:	2107      	movs	r1, #7
 8002238:	4825      	ldr	r0, [pc, #148]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 800223a:	f7ff fddb 	bl	8001df4 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800223e:	2200      	movs	r2, #0
 8002240:	2107      	movs	r1, #7
 8002242:	4823      	ldr	r0, [pc, #140]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002244:	f7ff fdfa 	bl	8001e3c <LL_DMA_SetMemorySize>

	/*data transfer to USART2 via DMA*/
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002248:	2100      	movs	r1, #0
 800224a:	4822      	ldr	r0, [pc, #136]	@ (80022d4 <MX_USART2_UART_Init+0x17c>)
 800224c:	f7ff ff6e 	bl	800212c <LL_USART_DMA_GetRegAddr>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	2107      	movs	r1, #7
 8002256:	481e      	ldr	r0, [pc, #120]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002258:	f7ff fe74 	bl	8001f44 <LL_DMA_SetPeriphAddress>
	LL_USART_EnableDMAReq_TX(USART2);
 800225c:	481d      	ldr	r0, [pc, #116]	@ (80022d4 <MX_USART2_UART_Init+0x17c>)
 800225e:	f7ff ff42 	bl	80020e6 <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002262:	2107      	movs	r1, #7
 8002264:	481a      	ldr	r0, [pc, #104]	@ (80022d0 <MX_USART2_UART_Init+0x178>)
 8002266:	f7ff fea5 	bl	8001fb4 <LL_DMA_EnableIT_TE>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800226a:	f7ff fc87 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 800226e:	4603      	mov	r3, r0
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fcd7 	bl	8001c28 <NVIC_EncodePriority>
 800227a:	4603      	mov	r3, r0
 800227c:	4619      	mov	r1, r3
 800227e:	2026      	movs	r0, #38	@ 0x26
 8002280:	f7ff fca8 	bl	8001bd4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8002284:	2026      	movs	r0, #38	@ 0x26
 8002286:	f7ff fc87 	bl	8001b98 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 800228a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800228e:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800229c:	230c      	movs	r3, #12
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4809      	ldr	r0, [pc, #36]	@ (80022d4 <MX_USART2_UART_Init+0x17c>)
 80022b0:	f000 fcc6 	bl	8002c40 <LL_USART_Init>
	LL_USART_DisableIT_CTS(USART2);
 80022b4:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <MX_USART2_UART_Init+0x17c>)
 80022b6:	f7ff fef3 	bl	80020a0 <LL_USART_DisableIT_CTS>
	LL_USART_ConfigAsyncMode(USART2);
 80022ba:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <MX_USART2_UART_Init+0x17c>)
 80022bc:	f7ff feda 	bl	8002074 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <MX_USART2_UART_Init+0x17c>)
 80022c2:	f7ff fec7 	bl	8002054 <LL_USART_Enable>
  }
 80022c6:	bf00      	nop
 80022c8:	3738      	adds	r7, #56	@ 0x38
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40004400 	.word	0x40004400

080022d8 <USART2_PutBuffer>:

void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	2107      	movs	r1, #7
 80022ea:	480a      	ldr	r0, [pc, #40]	@ (8002314 <USART2_PutBuffer+0x3c>)
 80022ec:	f7ff fe12 	bl	8001f14 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	461a      	mov	r2, r3
 80022f4:	2107      	movs	r1, #7
 80022f6:	4807      	ldr	r0, [pc, #28]	@ (8002314 <USART2_PutBuffer+0x3c>)
 80022f8:	f7ff fde8 	bl	8001ecc <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80022fc:	2107      	movs	r1, #7
 80022fe:	4805      	ldr	r0, [pc, #20]	@ (8002314 <USART2_PutBuffer+0x3c>)
 8002300:	f7ff fe38 	bl	8001f74 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002304:	2107      	movs	r1, #7
 8002306:	4803      	ldr	r0, [pc, #12]	@ (8002314 <USART2_PutBuffer+0x3c>)
 8002308:	f7ff fcc2 	bl	8001c90 <LL_DMA_EnableChannel>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40020000 	.word	0x40020000

08002318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002350 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800231c:	f7ff fc1c 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480c      	ldr	r0, [pc, #48]	@ (8002354 <LoopForever+0x6>)
  ldr r1, =_edata
 8002322:	490d      	ldr	r1, [pc, #52]	@ (8002358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002324:	4a0d      	ldr	r2, [pc, #52]	@ (800235c <LoopForever+0xe>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002338:	4c0a      	ldr	r4, [pc, #40]	@ (8002364 <LoopForever+0x16>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002346:	f001 fd5d 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800234a:	f7ff f9dd 	bl	8001708 <main>

0800234e <LoopForever>:

LoopForever:
    b LoopForever
 800234e:	e7fe      	b.n	800234e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002350:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800235c:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 8002360:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002364:	20000378 	.word	0x20000378

08002368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC1_2_IRQHandler>

0800236a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800236a:	b480      	push	{r7}
 800236c:	b089      	sub	sp, #36	@ 0x24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	613b      	str	r3, [r7, #16]
  return result;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2103      	movs	r1, #3
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	401a      	ands	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	61bb      	str	r3, [r7, #24]
  return result;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	3724      	adds	r7, #36	@ 0x24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	43db      	mvns	r3, r3
 80023dc:	401a      	ands	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	613b      	str	r3, [r7, #16]
  return result;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2103      	movs	r1, #3
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61bb      	str	r3, [r7, #24]
  return result;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002456:	b480      	push	{r7}
 8002458:	b089      	sub	sp, #36	@ 0x24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	613b      	str	r3, [r7, #16]
  return result;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2103      	movs	r1, #3
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	61bb      	str	r3, [r7, #24]
  return result;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3724      	adds	r7, #36	@ 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	613b      	str	r3, [r7, #16]
  return result;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	210f      	movs	r1, #15
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	61bb      	str	r3, [r7, #24]
  return result;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002512:	b480      	push	{r7}
 8002514:	b089      	sub	sp, #36	@ 0x24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	613b      	str	r3, [r7, #16]
  return result;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	210f      	movs	r1, #15
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	61bb      	str	r3, [r7, #24]
  return result;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	431a      	orrs	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002568:	bf00      	nop
 800256a:	3724      	adds	r7, #36	@ 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	613b      	str	r3, [r7, #16]
  return result;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002596:	e051      	b.n	800263c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d043      	beq.n	8002636 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d003      	beq.n	80025be <LL_GPIO_Init+0x4a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d10e      	bne.n	80025dc <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	461a      	mov	r2, r3
 80025c4:	69b9      	ldr	r1, [r7, #24]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ff16 	bl	80023f8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	461a      	mov	r2, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fef6 	bl	80023c8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	461a      	mov	r2, r3
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff36 	bl	8002456 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d11a      	bne.n	8002628 <LL_GPIO_Init+0xb4>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	60bb      	str	r3, [r7, #8]
  return result;
 80025fe:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b07      	cmp	r3, #7
 8002608:	d807      	bhi.n	800261a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	461a      	mov	r2, r3
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff4e 	bl	80024b4 <LL_GPIO_SetAFPin_0_7>
 8002618:	e006      	b.n	8002628 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	461a      	mov	r2, r3
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff75 	bl	8002512 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	461a      	mov	r2, r3
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fe9a 	bl	800236a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1a6      	bne.n	8002598 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <LL_I2C_Enable>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	601a      	str	r2, [r3, #0]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_I2C_Disable>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 0201 	bic.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_I2C_ConfigFilters>:
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0219      	lsls	r1, r3, #8
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	601a      	str	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_I2C_SetOwnAddress1>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	430a      	orrs	r2, r1
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_I2C_EnableOwnAddress1>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_I2C_DisableOwnAddress1>:
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	609a      	str	r2, [r3, #8]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_I2C_SetTiming>:
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	611a      	str	r2, [r3, #16]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_I2C_SetMode>:
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_I2C_AcknowledgeNextData>:
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	605a      	str	r2, [r3, #4]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff65 	bl	8002674 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff6d 	bl	8002694 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ffb6 	bl	8002732 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff44 	bl	8002654 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ffa0 	bl	8002712 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6919      	ldr	r1, [r3, #16]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	461a      	mov	r2, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff70 	bl	80026c2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ff81 	bl	80026f2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa9 	bl	800274e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4619      	mov	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffb6 	bl	8002774 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <LL_RCC_HSI_IsReady>:
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <LL_RCC_HSI_IsReady+0x20>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000

08002838 <LL_RCC_LSE_IsReady>:
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <LL_RCC_LSE_IsReady+0x20>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40021000 	.word	0x40021000

0800285c <LL_RCC_GetSysClkSource>:
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <LL_RCC_GetSysClkSource+0x18>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000

08002878 <LL_RCC_GetAHBPrescaler>:
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <LL_RCC_GetAHBPrescaler+0x18>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <LL_RCC_GetAPB1Prescaler>:
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <LL_RCC_GetAPB1Prescaler+0x18>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <LL_RCC_GetAPB2Prescaler>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <LL_RCC_GetUSARTClockSource+0x28>)
 80028d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d8:	2103      	movs	r1, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	4313      	orrs	r3, r2
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40021000 	.word	0x40021000

080028f8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <LL_RCC_PLL_GetMainSource+0x18>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <LL_RCC_PLL_GetPrediv+0x18>)
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	f003 030f 	and.w	r3, r3, #15
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002954:	f000 f862 	bl	8002a1c <RCC_GetSystemClockFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f880 	bl	8002a68 <RCC_GetHCLKClockFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f88e 	bl	8002a94 <RCC_GetPCLK1ClockFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f89a 	bl	8002abc <RCC_GetPCLK2ClockFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d130      	bne.n	8002a0c <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff8e 	bl	80028cc <LL_RCC_GetUSARTClockSource>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d00a      	beq.n	80029cc <LL_RCC_GetUSARTClockFreq+0x34>
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d819      	bhi.n	80029ee <LL_RCC_GetUSARTClockFreq+0x56>
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d002      	beq.n	80029c4 <LL_RCC_GetUSARTClockFreq+0x2c>
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d00c      	beq.n	80029dc <LL_RCC_GetUSARTClockFreq+0x44>
 80029c2:	e014      	b.n	80029ee <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80029c4:	f000 f82a 	bl	8002a1c <RCC_GetSystemClockFreq>
 80029c8:	60f8      	str	r0, [r7, #12]
        break;
 80029ca:	e01f      	b.n	8002a0c <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80029cc:	f7ff ff22 	bl	8002814 <LL_RCC_HSI_IsReady>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d017      	beq.n	8002a06 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <LL_RCC_GetUSARTClockFreq+0x80>)
 80029d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80029da:	e014      	b.n	8002a06 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80029dc:	f7ff ff2c 	bl	8002838 <LL_RCC_LSE_IsReady>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d011      	beq.n	8002a0a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80029e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80029ec:	e00d      	b.n	8002a0a <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80029ee:	f000 f815 	bl	8002a1c <RCC_GetSystemClockFreq>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f837 	bl	8002a68 <RCC_GetHCLKClockFreq>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f849 	bl	8002a94 <RCC_GetPCLK1ClockFreq>
 8002a02:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002a04:	e002      	b.n	8002a0c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002a0a:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	007a1200 	.word	0x007a1200

08002a1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002a26:	f7ff ff19 	bl	800285c <LL_RCC_GetSysClkSource>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d00c      	beq.n	8002a4a <RCC_GetSystemClockFreq+0x2e>
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d80e      	bhi.n	8002a52 <RCC_GetSystemClockFreq+0x36>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <RCC_GetSystemClockFreq+0x22>
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d003      	beq.n	8002a44 <RCC_GetSystemClockFreq+0x28>
 8002a3c:	e009      	b.n	8002a52 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <RCC_GetSystemClockFreq+0x48>)
 8002a40:	607b      	str	r3, [r7, #4]
      break;
 8002a42:	e009      	b.n	8002a58 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a44:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <RCC_GetSystemClockFreq+0x48>)
 8002a46:	607b      	str	r3, [r7, #4]
      break;
 8002a48:	e006      	b.n	8002a58 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002a4a:	f000 f84b 	bl	8002ae4 <RCC_PLL_GetFreqDomain_SYS>
 8002a4e:	6078      	str	r0, [r7, #4]
      break;
 8002a50:	e002      	b.n	8002a58 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <RCC_GetSystemClockFreq+0x48>)
 8002a54:	607b      	str	r3, [r7, #4]
      break;
 8002a56:	bf00      	nop
  }

  return frequency;
 8002a58:	687b      	ldr	r3, [r7, #4]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	007a1200 	.word	0x007a1200

08002a68 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002a70:	f7ff ff02 	bl	8002878 <LL_RCC_GetAHBPrescaler>
 8002a74:	4603      	mov	r3, r0
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <RCC_GetHCLKClockFreq+0x28>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	461a      	mov	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	40d3      	lsrs	r3, r2
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08006338 	.word	0x08006338

08002a94 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002a9c:	f7ff fefa 	bl	8002894 <LL_RCC_GetAPB1Prescaler>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	40d3      	lsrs	r3, r2
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	08006348 	.word	0x08006348

08002abc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002ac4:	f7ff fef4 	bl	80028b0 <LL_RCC_GetAPB2Prescaler>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	0adb      	lsrs	r3, r3, #11
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <RCC_GetPCLK2ClockFreq+0x24>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	40d3      	lsrs	r3, r2
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08006348 	.word	0x08006348

08002ae4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002af2:	f7ff ff01 	bl	80028f8 <LL_RCC_PLL_GetMainSource>
 8002af6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d003      	beq.n	8002b0e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002b06:	e005      	b.n	8002b14 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002b08:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b0a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002b0c:	e005      	b.n	8002b1a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002b10:	60fb      	str	r3, [r7, #12]
      break;
 8002b12:	e002      	b.n	8002b1a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002b14:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b16:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002b18:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002b1a:	f7ff ff09 	bl	8002930 <LL_RCC_PLL_GetPrediv>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	3301      	adds	r3, #1
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	fbb2 f4f3 	udiv	r4, r2, r3
 8002b28:	f7ff fef4 	bl	8002914 <LL_RCC_PLL_GetMultiplicator>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b32:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002b36:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	603a      	str	r2, [r7, #0]
  return result;
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	40d3      	lsrs	r3, r2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	003d0900 	.word	0x003d0900
 8002b5c:	007a1200 	.word	0x007a1200

08002b60 <LL_USART_IsEnabled>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <LL_USART_IsEnabled+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_USART_IsEnabled+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_USART_SetStopBitsLength>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_USART_SetHWFlowCtrl>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_USART_SetBaudRate>:
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b087      	sub	sp, #28
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be6:	d11a      	bne.n	8002c1e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	005a      	lsls	r2, r3, #1
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	441a      	add	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	60da      	str	r2, [r3, #12]
}
 8002c1c:	e00a      	b.n	8002c34 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	085a      	lsrs	r2, r3, #1
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	441a      	add	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	60da      	str	r2, [r3, #12]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff84 	bl	8002b60 <LL_USART_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d14e      	bne.n	8002cfc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <LL_USART_Init+0xc8>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	6851      	ldr	r1, [r2, #4]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	68d2      	ldr	r2, [r2, #12]
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	6912      	ldr	r2, [r2, #16]
 8002c74:	4311      	orrs	r1, r2
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	6992      	ldr	r2, [r2, #24]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff7c 	bl	8002b86 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff89 	bl	8002bac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <LL_USART_Init+0xcc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d104      	bne.n	8002cac <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7ff fe78 	bl	8002998 <LL_RCC_GetUSARTClockFreq>
 8002ca8:	61b8      	str	r0, [r7, #24]
 8002caa:	e016      	b.n	8002cda <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <LL_USART_Init+0xd0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d107      	bne.n	8002cc4 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fe47 	bl	800294c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	e00a      	b.n	8002cda <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <LL_USART_Init+0xd4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d106      	bne.n	8002cda <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ccc:	f107 0308 	add.w	r3, r7, #8
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fe3b 	bl	800294c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002cf4:	69b9      	ldr	r1, [r7, #24]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff6b 	bl	8002bd2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	efff69f3 	.word	0xefff69f3
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40004400 	.word	0x40004400
 8002d14:	40004800 	.word	0x40004800

08002d18 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4a07      	ldr	r2, [pc, #28]	@ (8002d48 <LL_InitTick+0x30>)
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <LL_InitTick+0x30>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <LL_InitTick+0x30>)
 8002d38:	2205      	movs	r2, #5
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002d54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ffdd 	bl	8002d18 <LL_InitTick>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002d70:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <LL_mDelay+0x48>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002d76:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d00c      	beq.n	8002d9a <LL_mDelay+0x32>
  {
    Delay++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3301      	adds	r3, #1
 8002d84:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002d86:	e008      	b.n	8002d9a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <LL_mDelay+0x48>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <LL_mDelay+0x32>
    {
      Delay--;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f3      	bne.n	8002d88 <LL_mDelay+0x20>
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <LL_SetSystemCoreClock+0x1c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000008 	.word	0x20000008

08002dd4 <hts221_readArray>:
// Device address for the HTS221 sensor
uint8_t addressh = HTS221_DEVICE_ADDRESS;

// Function to read an array of bytes from the HTS221 sensor
void hts221_readArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71bb      	strb	r3, [r7, #6]
    I2C_ReadData(addressh, reg, data, length);
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <hts221_readArray+0x28>)
 8002de6:	7818      	ldrb	r0, [r3, #0]
 8002de8:	79bb      	ldrb	r3, [r7, #6]
 8002dea:	79f9      	ldrb	r1, [r7, #7]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	f7fe faa1 	bl	8001334 <I2C_ReadData>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000000c 	.word	0x2000000c

08002e00 <hts221_writeArray>:

// Function to write an array of bytes to the HTS221 sensor
void hts221_writeArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71bb      	strb	r3, [r7, #6]
    I2C_WriteData(addressh, reg, data, length);
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <hts221_writeArray+0x28>)
 8002e12:	7818      	ldrb	r0, [r3, #0]
 8002e14:	79bb      	ldrb	r3, [r7, #6]
 8002e16:	79f9      	ldrb	r1, [r7, #7]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	f7fe fa3d 	bl	8001298 <I2C_WriteData>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c

08002e2c <hts221_init>:

// Function to initialize the HTS221 sensor
uint8_t hts221_init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
    uint8_t status = 1;
 8002e32:	2301      	movs	r3, #1
 8002e34:	71fb      	strb	r3, [r7, #7]
    LL_mDelay(100);
 8002e36:	2064      	movs	r0, #100	@ 0x64
 8002e38:	f7ff ff96 	bl	8002d68 <LL_mDelay>

    uint8_t who_am_i = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	71bb      	strb	r3, [r7, #6]
    hts221_readArray(HTS221_WHO_AM_I_ADDRESS, &who_am_i, 1);
 8002e40:	1dbb      	adds	r3, r7, #6
 8002e42:	2201      	movs	r2, #1
 8002e44:	4619      	mov	r1, r3
 8002e46:	200f      	movs	r0, #15
 8002e48:	f7ff ffc4 	bl	8002dd4 <hts221_readArray>

    if (who_am_i != HTS221_WHO_AM_I_VALUE)
 8002e4c:	79bb      	ldrb	r3, [r7, #6]
 8002e4e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002e50:	d001      	beq.n	8002e56 <hts221_init+0x2a>
    {
        status = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	71fb      	strb	r3, [r7, #7]
    }

    uint8_t control_r = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	717b      	strb	r3, [r7, #5]
    hts221_readArray(HTS221_ADDRESS_CONTROL_R, &control_r, 1);
 8002e5a:	1d7b      	adds	r3, r7, #5
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4619      	mov	r1, r3
 8002e60:	2020      	movs	r0, #32
 8002e62:	f7ff ffb7 	bl	8002dd4 <hts221_readArray>
    control_r &= 0x78;
 8002e66:	797b      	ldrb	r3, [r7, #5]
 8002e68:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	717b      	strb	r3, [r7, #5]
    control_r |= 0x81;
 8002e70:	797b      	ldrb	r3, [r7, #5]
 8002e72:	f063 037e 	orn	r3, r3, #126	@ 0x7e
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	717b      	strb	r3, [r7, #5]
    hts221_writeArray(HTS221_ADDRESS_CONTROL_R, &control_r, 1);
 8002e7a:	1d7b      	adds	r3, r7, #5
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2020      	movs	r0, #32
 8002e82:	f7ff ffbd 	bl	8002e00 <hts221_writeArray>

    return status;
 8002e86:	79fb      	ldrb	r3, [r7, #7]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <hts221_get_humidity>:

// Function to get the humidity value
int8_t hts221_get_humidity(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
    uint8_t humidity_array[2];
    hts221_readArray(HTS221_ADDRESS_HUMIDITY_L, humidity_array, 2);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	2028      	movs	r0, #40	@ 0x28
 8002ea0:	f7ff ff98 	bl	8002dd4 <hts221_readArray>
    int16_t humidity = (humidity_array[1] << 8) | humidity_array[0];
 8002ea4:	7d7b      	ldrb	r3, [r7, #21]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	7d3b      	ldrb	r3, [r7, #20]
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    uint8_t calibration_val_x0_array[2];
    hts221_readArray(HTS221_ADDRESS_H0_T0_OUT_L, calibration_val_x0_array, 2);
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2036      	movs	r0, #54	@ 0x36
 8002ebc:	f7ff ff8a 	bl	8002dd4 <hts221_readArray>
    int16_t calibration_x0 = (calibration_val_x0_array[1] << 8) | calibration_val_x0_array[0];
 8002ec0:	7c7b      	ldrb	r3, [r7, #17]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	7c3b      	ldrb	r3, [r7, #16]
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	84bb      	strh	r3, [r7, #36]	@ 0x24

    uint8_t calibration_val_x1_array[2];
    hts221_readArray(HTS221_ADDRESS_H1_T0_OUT_L, calibration_val_x1_array, 2);
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	203a      	movs	r0, #58	@ 0x3a
 8002ed8:	f7ff ff7c 	bl	8002dd4 <hts221_readArray>
    int16_t calibration_x1 = (calibration_val_x1_array[1] << 8) | calibration_val_x1_array[0];
 8002edc:	7b7b      	ldrb	r3, [r7, #13]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	7b3b      	ldrb	r3, [r7, #12]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	847b      	strh	r3, [r7, #34]	@ 0x22

    uint8_t calibration_y0 = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	72fb      	strb	r3, [r7, #11]
    uint8_t calibration_y1 = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	72bb      	strb	r3, [r7, #10]
    hts221_readArray(HTS221_ADDRESS_H0_rH_x2, &calibration_y0, 1);
 8002ef2:	f107 030b 	add.w	r3, r7, #11
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4619      	mov	r1, r3
 8002efa:	2030      	movs	r0, #48	@ 0x30
 8002efc:	f7ff ff6a 	bl	8002dd4 <hts221_readArray>
    hts221_readArray(HTS221_ADDRESS_H1_rH_x2, &calibration_y1, 1);
 8002f00:	f107 030a 	add.w	r3, r7, #10
 8002f04:	2201      	movs	r2, #1
 8002f06:	4619      	mov	r1, r3
 8002f08:	2031      	movs	r0, #49	@ 0x31
 8002f0a:	f7ff ff63 	bl	8002dd4 <hts221_readArray>

    float k = (float)(calibration_y1 - calibration_y0) / (calibration_x1 - calibration_x0);
 8002f0e:	7abb      	ldrb	r3, [r7, #10]
 8002f10:	461a      	mov	r2, r3
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f1e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002f22:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f34:	edc7 7a07 	vstr	s15, [r7, #28]
    float q = (float)(calibration_y1 - k * calibration_x1);
 8002f38:	7abb      	ldrb	r3, [r7, #10]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5a:	edc7 7a06 	vstr	s15, [r7, #24]
    int8_t total = (int8_t)((k * humidity + q) / 2);
 8002f5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f72:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f86:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f8a:	793b      	ldrb	r3, [r7, #4]
 8002f8c:	75fb      	strb	r3, [r7, #23]

    return total;
 8002f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3728      	adds	r7, #40	@ 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <hts221_get_temperature>:

// Function to get the temperature value
float hts221_get_temperature(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	@ 0x28
 8002f9e:	af00      	add	r7, sp, #0
    uint8_t temperature[2];
    hts221_readArray(HTS221_ADDRESS_TEMP_OUT_L, temperature, 2);
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	202a      	movs	r0, #42	@ 0x2a
 8002faa:	f7ff ff13 	bl	8002dd4 <hts221_readArray>
    int16_t total_t = (temperature[1] << 8) | temperature[0];
 8002fae:	7b7b      	ldrb	r3, [r7, #13]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	7b3b      	ldrb	r3, [r7, #12]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	84fb      	strh	r3, [r7, #38]	@ 0x26

    uint8_t cal0[2], cal1[2];
    hts221_readArray(HTS221_ADDRESS_T0_OUT_L, cal0, 2);
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	203c      	movs	r0, #60	@ 0x3c
 8002fc6:	f7ff ff05 	bl	8002dd4 <hts221_readArray>
    hts221_readArray(HTS221_ADDRESS_T1_OUT_L, cal1, 2);
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	2202      	movs	r2, #2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	203e      	movs	r0, #62	@ 0x3e
 8002fd2:	f7ff feff 	bl	8002dd4 <hts221_readArray>

    int16_t total_cal0 = (cal0[1] << 8) | cal0[0];
 8002fd6:	7a7b      	ldrb	r3, [r7, #9]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	7a3b      	ldrb	r3, [r7, #8]
 8002fde:	b21b      	sxth	r3, r3
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t total_cal1 = (cal1[1] << 8) | cal1[0];
 8002fe4:	797b      	ldrb	r3, [r7, #5]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	793b      	ldrb	r3, [r7, #4]
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	847b      	strh	r3, [r7, #34]	@ 0x22

    uint8_t cal0_y_temp = 0, cal1_y_temp = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	70fb      	strb	r3, [r7, #3]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	70bb      	strb	r3, [r7, #2]
    hts221_readArray(HTS221_ADDRESS_T0_degC_x8, &cal0_y_temp, 1);
 8002ffa:	1cfb      	adds	r3, r7, #3
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4619      	mov	r1, r3
 8003000:	2032      	movs	r0, #50	@ 0x32
 8003002:	f7ff fee7 	bl	8002dd4 <hts221_readArray>
    hts221_readArray(HTS221_ADDRESS_T1_degC_x8, &cal1_y_temp, 1);
 8003006:	1cbb      	adds	r3, r7, #2
 8003008:	2201      	movs	r2, #1
 800300a:	4619      	mov	r1, r3
 800300c:	2033      	movs	r0, #51	@ 0x33
 800300e:	f7ff fee1 	bl	8002dd4 <hts221_readArray>

    uint8_t temp0 = 0, temp1 = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	707b      	strb	r3, [r7, #1]
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    hts221_readArray(HTS221_ADDRESS_T1T0_msb, &temp0, 1);
 800301c:	1c7b      	adds	r3, r7, #1
 800301e:	2201      	movs	r2, #1
 8003020:	4619      	mov	r1, r3
 8003022:	2035      	movs	r0, #53	@ 0x35
 8003024:	f7ff fed6 	bl	8002dd4 <hts221_readArray>
    temp1 = temp0 >> 2 & 0x03;
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    temp0 &= 0x03;
 8003036:	787b      	ldrb	r3, [r7, #1]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	707b      	strb	r3, [r7, #1]

    int16_t cal0_y = (temp0 << 8) | cal0_y_temp;
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	b21a      	sxth	r2, r3
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	b21b      	sxth	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	83fb      	strh	r3, [r7, #30]
    int16_t cal1_y = (temp1 << 8) | cal1_y_temp;
 800304e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	b21a      	sxth	r2, r3
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	b21b      	sxth	r3, r3
 800305a:	4313      	orrs	r3, r2
 800305c:	83bb      	strh	r3, [r7, #28]

    float k = (float)(cal1_y - cal0_y) / (total_cal1 - total_cal0);
 800305e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003062:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003070:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003074:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003086:	edc7 7a06 	vstr	s15, [r7, #24]
    float q = (float)(cal1_y - k * total_cal1);
 800308a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003096:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ae:	edc7 7a05 	vstr	s15, [r7, #20]
    float total = (float)((k * total_t + q) / 8);
 80030b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030be:	edd7 7a06 	vldr	s15, [r7, #24]
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ce:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80030d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d6:	edc7 7a04 	vstr	s15, [r7, #16]

    return total;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	ee07 3a90 	vmov	s15, r3
}
 80030e0:	eeb0 0a67 	vmov.f32	s0, s15
 80030e4:	3728      	adds	r7, #40	@ 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <lps25hb_readArray>:
// Device address for the LPS22HB sensor
uint8_t address = LPS25HB_DEVICE_ADDRESS_0;

// Function to read an array of bytes from the LPS22HB sensor
void lps25hb_readArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71bb      	strb	r3, [r7, #6]
    I2C_ReadData(address, reg, data, length);
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <lps25hb_readArray+0x28>)
 80030fe:	7818      	ldrb	r0, [r3, #0]
 8003100:	79bb      	ldrb	r3, [r7, #6]
 8003102:	79f9      	ldrb	r1, [r7, #7]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	f7fe f915 	bl	8001334 <I2C_ReadData>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000000d 	.word	0x2000000d

08003118 <lps25hb_writeArray>:

// Function to write an array of bytes to the LPS22HB sensor
void lps25hb_writeArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
 8003124:	4613      	mov	r3, r2
 8003126:	71bb      	strb	r3, [r7, #6]
    I2C_WriteData(address, reg, data, length);
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <lps25hb_writeArray+0x28>)
 800312a:	7818      	ldrb	r0, [r3, #0]
 800312c:	79bb      	ldrb	r3, [r7, #6]
 800312e:	79f9      	ldrb	r1, [r7, #7]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	f7fe f8b1 	bl	8001298 <I2C_WriteData>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2000000d 	.word	0x2000000d

08003144 <lps25hb_init>:

// Function to initialize the LPS22HB sensor
uint8_t lps25hb_init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
    uint8_t status = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	71fb      	strb	r3, [r7, #7]

    LL_mDelay(100);
 800314e:	2064      	movs	r0, #100	@ 0x64
 8003150:	f7ff fe0a 	bl	8002d68 <LL_mDelay>

    uint8_t who_am_i = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	71bb      	strb	r3, [r7, #6]
    lps25hb_readArray(LPS25HB_WHO_AM_I_ADDRESS, &who_am_i, 1);
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	2201      	movs	r2, #1
 800315c:	4619      	mov	r1, r3
 800315e:	200f      	movs	r0, #15
 8003160:	f7ff ffc4 	bl	80030ec <lps25hb_readArray>

    if (who_am_i != LPS25HB_WHO_AM_I_VALUE)
 8003164:	79bb      	ldrb	r3, [r7, #6]
 8003166:	2bbd      	cmp	r3, #189	@ 0xbd
 8003168:	d00d      	beq.n	8003186 <lps25hb_init+0x42>
    {
        address = LPS25HB_DEVICE_ADDRESS_1;
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <lps25hb_init+0x78>)
 800316c:	22bb      	movs	r2, #187	@ 0xbb
 800316e:	701a      	strb	r2, [r3, #0]
        lps25hb_readArray(LPS25HB_WHO_AM_I_ADDRESS, &who_am_i, 1);
 8003170:	1dbb      	adds	r3, r7, #6
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	200f      	movs	r0, #15
 8003178:	f7ff ffb8 	bl	80030ec <lps25hb_readArray>

        if (who_am_i != LPS25HB_WHO_AM_I_VALUE)
 800317c:	79bb      	ldrb	r3, [r7, #6]
 800317e:	2bbd      	cmp	r3, #189	@ 0xbd
 8003180:	d001      	beq.n	8003186 <lps25hb_init+0x42>
        {
            status = 0;  // Sensor identification failed
 8003182:	2300      	movs	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
        }
    }

    uint8_t control = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	717b      	strb	r3, [r7, #5]
    lps25hb_readArray(LPS25HB_ADDRESS_CONTROL_R, &control, 1);
 800318a:	1d7b      	adds	r3, r7, #5
 800318c:	2201      	movs	r2, #1
 800318e:	4619      	mov	r1, r3
 8003190:	2020      	movs	r0, #32
 8003192:	f7ff ffab 	bl	80030ec <lps25hb_readArray>
    control &= ~0xFF;
 8003196:	2300      	movs	r3, #0
 8003198:	717b      	strb	r3, [r7, #5]
    control |= 0x18;
 800319a:	797b      	ldrb	r3, [r7, #5]
 800319c:	f043 0318 	orr.w	r3, r3, #24
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	717b      	strb	r3, [r7, #5]
    lps25hb_writeArray(LPS25HB_ADDRESS_CONTROL_R, &control, 1);
 80031a4:	1d7b      	adds	r3, r7, #5
 80031a6:	2201      	movs	r2, #1
 80031a8:	4619      	mov	r1, r3
 80031aa:	2020      	movs	r0, #32
 80031ac:	f7ff ffb4 	bl	8003118 <lps25hb_writeArray>

    return status;
 80031b0:	79fb      	ldrb	r3, [r7, #7]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2000000d 	.word	0x2000000d

080031c0 <lps25hb_get_pressure>:

// Function to get the pressure value
float lps25hb_get_pressure(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
    uint8_t pressure[3];
    lps25hb_readArray(LPS25HB_ADDRESS_PRESS_OUT_XL, pressure, 3);
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2203      	movs	r2, #3
 80031ca:	4619      	mov	r1, r3
 80031cc:	2028      	movs	r0, #40	@ 0x28
 80031ce:	f7ff ff8d 	bl	80030ec <lps25hb_readArray>

    int32_t temp = ((int32_t)pressure[2] << 16) | ((int32_t)pressure[1] << 8) | pressure[0];
 80031d2:	79bb      	ldrb	r3, [r7, #6]
 80031d4:	041a      	lsls	r2, r3, #16
 80031d6:	797b      	ldrb	r3, [r7, #5]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	4313      	orrs	r3, r2
 80031dc:	793a      	ldrb	r2, [r7, #4]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    float total_pressure = (float)temp / 4096;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ec:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003208 <lps25hb_get_pressure+0x48>
 80031f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f4:	edc7 7a02 	vstr	s15, [r7, #8]

    return total_pressure;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	ee07 3a90 	vmov	s15, r3
}
 80031fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	45800000 	.word	0x45800000

0800320c <lps25hb_get_temperature>:

// Function to get the temperature value
float lps25hb_get_temperature(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
    uint8_t temperature[2];
    lps25hb_readArray(LPS25HB_ADDRESS_TEMP_OUT_L, temperature, 2);
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	2202      	movs	r2, #2
 8003216:	4619      	mov	r1, r3
 8003218:	202b      	movs	r0, #43	@ 0x2b
 800321a:	f7ff ff67 	bl	80030ec <lps25hb_readArray>

    int16_t total_t = ((int16_t)temperature[1] << 8) | temperature[0];
 800321e:	797b      	ldrb	r3, [r7, #5]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b21a      	sxth	r2, r3
 8003224:	793b      	ldrb	r3, [r7, #4]
 8003226:	b21b      	sxth	r3, r3
 8003228:	4313      	orrs	r3, r2
 800322a:	81fb      	strh	r3, [r7, #14]
    float temp = (float)total_t / 100;
 800322c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003238:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003254 <lps25hb_get_temperature+0x48>
 800323c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003240:	edc7 7a02 	vstr	s15, [r7, #8]

    return temp;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	ee07 3a90 	vmov	s15, r3
}
 800324a:	eeb0 0a67 	vmov.f32	s0, s15
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	42c80000 	.word	0x42c80000

08003258 <__cvt>:
 8003258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	ec57 6b10 	vmov	r6, r7, d0
 8003260:	2f00      	cmp	r7, #0
 8003262:	460c      	mov	r4, r1
 8003264:	4619      	mov	r1, r3
 8003266:	463b      	mov	r3, r7
 8003268:	bfbb      	ittet	lt
 800326a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800326e:	461f      	movlt	r7, r3
 8003270:	2300      	movge	r3, #0
 8003272:	232d      	movlt	r3, #45	@ 0x2d
 8003274:	700b      	strb	r3, [r1, #0]
 8003276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003278:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800327c:	4691      	mov	r9, r2
 800327e:	f023 0820 	bic.w	r8, r3, #32
 8003282:	bfbc      	itt	lt
 8003284:	4632      	movlt	r2, r6
 8003286:	4616      	movlt	r6, r2
 8003288:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800328c:	d005      	beq.n	800329a <__cvt+0x42>
 800328e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003292:	d100      	bne.n	8003296 <__cvt+0x3e>
 8003294:	3401      	adds	r4, #1
 8003296:	2102      	movs	r1, #2
 8003298:	e000      	b.n	800329c <__cvt+0x44>
 800329a:	2103      	movs	r1, #3
 800329c:	ab03      	add	r3, sp, #12
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	ab02      	add	r3, sp, #8
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	ec47 6b10 	vmov	d0, r6, r7
 80032a8:	4653      	mov	r3, sl
 80032aa:	4622      	mov	r2, r4
 80032ac:	f000 fe5c 	bl	8003f68 <_dtoa_r>
 80032b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032b4:	4605      	mov	r5, r0
 80032b6:	d119      	bne.n	80032ec <__cvt+0x94>
 80032b8:	f019 0f01 	tst.w	r9, #1
 80032bc:	d00e      	beq.n	80032dc <__cvt+0x84>
 80032be:	eb00 0904 	add.w	r9, r0, r4
 80032c2:	2200      	movs	r2, #0
 80032c4:	2300      	movs	r3, #0
 80032c6:	4630      	mov	r0, r6
 80032c8:	4639      	mov	r1, r7
 80032ca:	f7fd fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80032ce:	b108      	cbz	r0, 80032d4 <__cvt+0x7c>
 80032d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80032d4:	2230      	movs	r2, #48	@ 0x30
 80032d6:	9b03      	ldr	r3, [sp, #12]
 80032d8:	454b      	cmp	r3, r9
 80032da:	d31e      	bcc.n	800331a <__cvt+0xc2>
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80032e0:	1b5b      	subs	r3, r3, r5
 80032e2:	4628      	mov	r0, r5
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	b004      	add	sp, #16
 80032e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032f0:	eb00 0904 	add.w	r9, r0, r4
 80032f4:	d1e5      	bne.n	80032c2 <__cvt+0x6a>
 80032f6:	7803      	ldrb	r3, [r0, #0]
 80032f8:	2b30      	cmp	r3, #48	@ 0x30
 80032fa:	d10a      	bne.n	8003312 <__cvt+0xba>
 80032fc:	2200      	movs	r2, #0
 80032fe:	2300      	movs	r3, #0
 8003300:	4630      	mov	r0, r6
 8003302:	4639      	mov	r1, r7
 8003304:	f7fd fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003308:	b918      	cbnz	r0, 8003312 <__cvt+0xba>
 800330a:	f1c4 0401 	rsb	r4, r4, #1
 800330e:	f8ca 4000 	str.w	r4, [sl]
 8003312:	f8da 3000 	ldr.w	r3, [sl]
 8003316:	4499      	add	r9, r3
 8003318:	e7d3      	b.n	80032c2 <__cvt+0x6a>
 800331a:	1c59      	adds	r1, r3, #1
 800331c:	9103      	str	r1, [sp, #12]
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e7d9      	b.n	80032d6 <__cvt+0x7e>

08003322 <__exponent>:
 8003322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003324:	2900      	cmp	r1, #0
 8003326:	bfba      	itte	lt
 8003328:	4249      	neglt	r1, r1
 800332a:	232d      	movlt	r3, #45	@ 0x2d
 800332c:	232b      	movge	r3, #43	@ 0x2b
 800332e:	2909      	cmp	r1, #9
 8003330:	7002      	strb	r2, [r0, #0]
 8003332:	7043      	strb	r3, [r0, #1]
 8003334:	dd29      	ble.n	800338a <__exponent+0x68>
 8003336:	f10d 0307 	add.w	r3, sp, #7
 800333a:	461d      	mov	r5, r3
 800333c:	270a      	movs	r7, #10
 800333e:	461a      	mov	r2, r3
 8003340:	fbb1 f6f7 	udiv	r6, r1, r7
 8003344:	fb07 1416 	mls	r4, r7, r6, r1
 8003348:	3430      	adds	r4, #48	@ 0x30
 800334a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800334e:	460c      	mov	r4, r1
 8003350:	2c63      	cmp	r4, #99	@ 0x63
 8003352:	f103 33ff 	add.w	r3, r3, #4294967295
 8003356:	4631      	mov	r1, r6
 8003358:	dcf1      	bgt.n	800333e <__exponent+0x1c>
 800335a:	3130      	adds	r1, #48	@ 0x30
 800335c:	1e94      	subs	r4, r2, #2
 800335e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003362:	1c41      	adds	r1, r0, #1
 8003364:	4623      	mov	r3, r4
 8003366:	42ab      	cmp	r3, r5
 8003368:	d30a      	bcc.n	8003380 <__exponent+0x5e>
 800336a:	f10d 0309 	add.w	r3, sp, #9
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	42ac      	cmp	r4, r5
 8003372:	bf88      	it	hi
 8003374:	2300      	movhi	r3, #0
 8003376:	3302      	adds	r3, #2
 8003378:	4403      	add	r3, r0
 800337a:	1a18      	subs	r0, r3, r0
 800337c:	b003      	add	sp, #12
 800337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003380:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003384:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003388:	e7ed      	b.n	8003366 <__exponent+0x44>
 800338a:	2330      	movs	r3, #48	@ 0x30
 800338c:	3130      	adds	r1, #48	@ 0x30
 800338e:	7083      	strb	r3, [r0, #2]
 8003390:	70c1      	strb	r1, [r0, #3]
 8003392:	1d03      	adds	r3, r0, #4
 8003394:	e7f1      	b.n	800337a <__exponent+0x58>
	...

08003398 <_printf_float>:
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	b08d      	sub	sp, #52	@ 0x34
 800339e:	460c      	mov	r4, r1
 80033a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80033a4:	4616      	mov	r6, r2
 80033a6:	461f      	mov	r7, r3
 80033a8:	4605      	mov	r5, r0
 80033aa:	f000 fcdb 	bl	8003d64 <_localeconv_r>
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	9304      	str	r3, [sp, #16]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fc ff5c 	bl	8000270 <strlen>
 80033b8:	2300      	movs	r3, #0
 80033ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80033bc:	f8d8 3000 	ldr.w	r3, [r8]
 80033c0:	9005      	str	r0, [sp, #20]
 80033c2:	3307      	adds	r3, #7
 80033c4:	f023 0307 	bic.w	r3, r3, #7
 80033c8:	f103 0208 	add.w	r2, r3, #8
 80033cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80033d0:	f8d4 b000 	ldr.w	fp, [r4]
 80033d4:	f8c8 2000 	str.w	r2, [r8]
 80033d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80033e0:	9307      	str	r3, [sp, #28]
 80033e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80033e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80033ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003660 <_printf_float+0x2c8>)
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295
 80033f4:	f7fd fb9a 	bl	8000b2c <__aeabi_dcmpun>
 80033f8:	bb70      	cbnz	r0, 8003458 <_printf_float+0xc0>
 80033fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033fe:	4b98      	ldr	r3, [pc, #608]	@ (8003660 <_printf_float+0x2c8>)
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	f7fd fb74 	bl	8000af0 <__aeabi_dcmple>
 8003408:	bb30      	cbnz	r0, 8003458 <_printf_float+0xc0>
 800340a:	2200      	movs	r2, #0
 800340c:	2300      	movs	r3, #0
 800340e:	4640      	mov	r0, r8
 8003410:	4649      	mov	r1, r9
 8003412:	f7fd fb63 	bl	8000adc <__aeabi_dcmplt>
 8003416:	b110      	cbz	r0, 800341e <_printf_float+0x86>
 8003418:	232d      	movs	r3, #45	@ 0x2d
 800341a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800341e:	4a91      	ldr	r2, [pc, #580]	@ (8003664 <_printf_float+0x2cc>)
 8003420:	4b91      	ldr	r3, [pc, #580]	@ (8003668 <_printf_float+0x2d0>)
 8003422:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003426:	bf94      	ite	ls
 8003428:	4690      	movls	r8, r2
 800342a:	4698      	movhi	r8, r3
 800342c:	2303      	movs	r3, #3
 800342e:	6123      	str	r3, [r4, #16]
 8003430:	f02b 0304 	bic.w	r3, fp, #4
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	f04f 0900 	mov.w	r9, #0
 800343a:	9700      	str	r7, [sp, #0]
 800343c:	4633      	mov	r3, r6
 800343e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003440:	4621      	mov	r1, r4
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f9d2 	bl	80037ec <_printf_common>
 8003448:	3001      	adds	r0, #1
 800344a:	f040 808d 	bne.w	8003568 <_printf_float+0x1d0>
 800344e:	f04f 30ff 	mov.w	r0, #4294967295
 8003452:	b00d      	add	sp, #52	@ 0x34
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	4640      	mov	r0, r8
 800345e:	4649      	mov	r1, r9
 8003460:	f7fd fb64 	bl	8000b2c <__aeabi_dcmpun>
 8003464:	b140      	cbz	r0, 8003478 <_printf_float+0xe0>
 8003466:	464b      	mov	r3, r9
 8003468:	2b00      	cmp	r3, #0
 800346a:	bfbc      	itt	lt
 800346c:	232d      	movlt	r3, #45	@ 0x2d
 800346e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003472:	4a7e      	ldr	r2, [pc, #504]	@ (800366c <_printf_float+0x2d4>)
 8003474:	4b7e      	ldr	r3, [pc, #504]	@ (8003670 <_printf_float+0x2d8>)
 8003476:	e7d4      	b.n	8003422 <_printf_float+0x8a>
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800347e:	9206      	str	r2, [sp, #24]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	d13b      	bne.n	80034fc <_printf_float+0x164>
 8003484:	2306      	movs	r3, #6
 8003486:	6063      	str	r3, [r4, #4]
 8003488:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800348c:	2300      	movs	r3, #0
 800348e:	6022      	str	r2, [r4, #0]
 8003490:	9303      	str	r3, [sp, #12]
 8003492:	ab0a      	add	r3, sp, #40	@ 0x28
 8003494:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003498:	ab09      	add	r3, sp, #36	@ 0x24
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6861      	ldr	r1, [r4, #4]
 800349e:	ec49 8b10 	vmov	d0, r8, r9
 80034a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80034a6:	4628      	mov	r0, r5
 80034a8:	f7ff fed6 	bl	8003258 <__cvt>
 80034ac:	9b06      	ldr	r3, [sp, #24]
 80034ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034b0:	2b47      	cmp	r3, #71	@ 0x47
 80034b2:	4680      	mov	r8, r0
 80034b4:	d129      	bne.n	800350a <_printf_float+0x172>
 80034b6:	1cc8      	adds	r0, r1, #3
 80034b8:	db02      	blt.n	80034c0 <_printf_float+0x128>
 80034ba:	6863      	ldr	r3, [r4, #4]
 80034bc:	4299      	cmp	r1, r3
 80034be:	dd41      	ble.n	8003544 <_printf_float+0x1ac>
 80034c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80034c4:	fa5f fa8a 	uxtb.w	sl, sl
 80034c8:	3901      	subs	r1, #1
 80034ca:	4652      	mov	r2, sl
 80034cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80034d2:	f7ff ff26 	bl	8003322 <__exponent>
 80034d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034d8:	1813      	adds	r3, r2, r0
 80034da:	2a01      	cmp	r2, #1
 80034dc:	4681      	mov	r9, r0
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	dc02      	bgt.n	80034e8 <_printf_float+0x150>
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	07d2      	lsls	r2, r2, #31
 80034e6:	d501      	bpl.n	80034ec <_printf_float+0x154>
 80034e8:	3301      	adds	r3, #1
 80034ea:	6123      	str	r3, [r4, #16]
 80034ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0a2      	beq.n	800343a <_printf_float+0xa2>
 80034f4:	232d      	movs	r3, #45	@ 0x2d
 80034f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034fa:	e79e      	b.n	800343a <_printf_float+0xa2>
 80034fc:	9a06      	ldr	r2, [sp, #24]
 80034fe:	2a47      	cmp	r2, #71	@ 0x47
 8003500:	d1c2      	bne.n	8003488 <_printf_float+0xf0>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1c0      	bne.n	8003488 <_printf_float+0xf0>
 8003506:	2301      	movs	r3, #1
 8003508:	e7bd      	b.n	8003486 <_printf_float+0xee>
 800350a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800350e:	d9db      	bls.n	80034c8 <_printf_float+0x130>
 8003510:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003514:	d118      	bne.n	8003548 <_printf_float+0x1b0>
 8003516:	2900      	cmp	r1, #0
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	dd0b      	ble.n	8003534 <_printf_float+0x19c>
 800351c:	6121      	str	r1, [r4, #16]
 800351e:	b913      	cbnz	r3, 8003526 <_printf_float+0x18e>
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	07d0      	lsls	r0, r2, #31
 8003524:	d502      	bpl.n	800352c <_printf_float+0x194>
 8003526:	3301      	adds	r3, #1
 8003528:	440b      	add	r3, r1
 800352a:	6123      	str	r3, [r4, #16]
 800352c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800352e:	f04f 0900 	mov.w	r9, #0
 8003532:	e7db      	b.n	80034ec <_printf_float+0x154>
 8003534:	b913      	cbnz	r3, 800353c <_printf_float+0x1a4>
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	07d2      	lsls	r2, r2, #31
 800353a:	d501      	bpl.n	8003540 <_printf_float+0x1a8>
 800353c:	3302      	adds	r3, #2
 800353e:	e7f4      	b.n	800352a <_printf_float+0x192>
 8003540:	2301      	movs	r3, #1
 8003542:	e7f2      	b.n	800352a <_printf_float+0x192>
 8003544:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800354a:	4299      	cmp	r1, r3
 800354c:	db05      	blt.n	800355a <_printf_float+0x1c2>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	6121      	str	r1, [r4, #16]
 8003552:	07d8      	lsls	r0, r3, #31
 8003554:	d5ea      	bpl.n	800352c <_printf_float+0x194>
 8003556:	1c4b      	adds	r3, r1, #1
 8003558:	e7e7      	b.n	800352a <_printf_float+0x192>
 800355a:	2900      	cmp	r1, #0
 800355c:	bfd4      	ite	le
 800355e:	f1c1 0202 	rsble	r2, r1, #2
 8003562:	2201      	movgt	r2, #1
 8003564:	4413      	add	r3, r2
 8003566:	e7e0      	b.n	800352a <_printf_float+0x192>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	055a      	lsls	r2, r3, #21
 800356c:	d407      	bmi.n	800357e <_printf_float+0x1e6>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	4642      	mov	r2, r8
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	d12b      	bne.n	80035d4 <_printf_float+0x23c>
 800357c:	e767      	b.n	800344e <_printf_float+0xb6>
 800357e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003582:	f240 80dd 	bls.w	8003740 <_printf_float+0x3a8>
 8003586:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800358a:	2200      	movs	r2, #0
 800358c:	2300      	movs	r3, #0
 800358e:	f7fd fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003592:	2800      	cmp	r0, #0
 8003594:	d033      	beq.n	80035fe <_printf_float+0x266>
 8003596:	4a37      	ldr	r2, [pc, #220]	@ (8003674 <_printf_float+0x2dc>)
 8003598:	2301      	movs	r3, #1
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	47b8      	blx	r7
 80035a0:	3001      	adds	r0, #1
 80035a2:	f43f af54 	beq.w	800344e <_printf_float+0xb6>
 80035a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80035aa:	4543      	cmp	r3, r8
 80035ac:	db02      	blt.n	80035b4 <_printf_float+0x21c>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	07d8      	lsls	r0, r3, #31
 80035b2:	d50f      	bpl.n	80035d4 <_printf_float+0x23c>
 80035b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035b8:	4631      	mov	r1, r6
 80035ba:	4628      	mov	r0, r5
 80035bc:	47b8      	blx	r7
 80035be:	3001      	adds	r0, #1
 80035c0:	f43f af45 	beq.w	800344e <_printf_float+0xb6>
 80035c4:	f04f 0900 	mov.w	r9, #0
 80035c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80035cc:	f104 0a1a 	add.w	sl, r4, #26
 80035d0:	45c8      	cmp	r8, r9
 80035d2:	dc09      	bgt.n	80035e8 <_printf_float+0x250>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	079b      	lsls	r3, r3, #30
 80035d8:	f100 8103 	bmi.w	80037e2 <_printf_float+0x44a>
 80035dc:	68e0      	ldr	r0, [r4, #12]
 80035de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035e0:	4298      	cmp	r0, r3
 80035e2:	bfb8      	it	lt
 80035e4:	4618      	movlt	r0, r3
 80035e6:	e734      	b.n	8003452 <_printf_float+0xba>
 80035e8:	2301      	movs	r3, #1
 80035ea:	4652      	mov	r2, sl
 80035ec:	4631      	mov	r1, r6
 80035ee:	4628      	mov	r0, r5
 80035f0:	47b8      	blx	r7
 80035f2:	3001      	adds	r0, #1
 80035f4:	f43f af2b 	beq.w	800344e <_printf_float+0xb6>
 80035f8:	f109 0901 	add.w	r9, r9, #1
 80035fc:	e7e8      	b.n	80035d0 <_printf_float+0x238>
 80035fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	dc39      	bgt.n	8003678 <_printf_float+0x2e0>
 8003604:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <_printf_float+0x2dc>)
 8003606:	2301      	movs	r3, #1
 8003608:	4631      	mov	r1, r6
 800360a:	4628      	mov	r0, r5
 800360c:	47b8      	blx	r7
 800360e:	3001      	adds	r0, #1
 8003610:	f43f af1d 	beq.w	800344e <_printf_float+0xb6>
 8003614:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003618:	ea59 0303 	orrs.w	r3, r9, r3
 800361c:	d102      	bne.n	8003624 <_printf_float+0x28c>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	07d9      	lsls	r1, r3, #31
 8003622:	d5d7      	bpl.n	80035d4 <_printf_float+0x23c>
 8003624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003628:	4631      	mov	r1, r6
 800362a:	4628      	mov	r0, r5
 800362c:	47b8      	blx	r7
 800362e:	3001      	adds	r0, #1
 8003630:	f43f af0d 	beq.w	800344e <_printf_float+0xb6>
 8003634:	f04f 0a00 	mov.w	sl, #0
 8003638:	f104 0b1a 	add.w	fp, r4, #26
 800363c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800363e:	425b      	negs	r3, r3
 8003640:	4553      	cmp	r3, sl
 8003642:	dc01      	bgt.n	8003648 <_printf_float+0x2b0>
 8003644:	464b      	mov	r3, r9
 8003646:	e793      	b.n	8003570 <_printf_float+0x1d8>
 8003648:	2301      	movs	r3, #1
 800364a:	465a      	mov	r2, fp
 800364c:	4631      	mov	r1, r6
 800364e:	4628      	mov	r0, r5
 8003650:	47b8      	blx	r7
 8003652:	3001      	adds	r0, #1
 8003654:	f43f aefb 	beq.w	800344e <_printf_float+0xb6>
 8003658:	f10a 0a01 	add.w	sl, sl, #1
 800365c:	e7ee      	b.n	800363c <_printf_float+0x2a4>
 800365e:	bf00      	nop
 8003660:	7fefffff 	.word	0x7fefffff
 8003664:	08006357 	.word	0x08006357
 8003668:	0800635b 	.word	0x0800635b
 800366c:	0800635f 	.word	0x0800635f
 8003670:	08006363 	.word	0x08006363
 8003674:	08006367 	.word	0x08006367
 8003678:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800367a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800367e:	4553      	cmp	r3, sl
 8003680:	bfa8      	it	ge
 8003682:	4653      	movge	r3, sl
 8003684:	2b00      	cmp	r3, #0
 8003686:	4699      	mov	r9, r3
 8003688:	dc36      	bgt.n	80036f8 <_printf_float+0x360>
 800368a:	f04f 0b00 	mov.w	fp, #0
 800368e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003692:	f104 021a 	add.w	r2, r4, #26
 8003696:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003698:	9306      	str	r3, [sp, #24]
 800369a:	eba3 0309 	sub.w	r3, r3, r9
 800369e:	455b      	cmp	r3, fp
 80036a0:	dc31      	bgt.n	8003706 <_printf_float+0x36e>
 80036a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036a4:	459a      	cmp	sl, r3
 80036a6:	dc3a      	bgt.n	800371e <_printf_float+0x386>
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	07da      	lsls	r2, r3, #31
 80036ac:	d437      	bmi.n	800371e <_printf_float+0x386>
 80036ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036b0:	ebaa 0903 	sub.w	r9, sl, r3
 80036b4:	9b06      	ldr	r3, [sp, #24]
 80036b6:	ebaa 0303 	sub.w	r3, sl, r3
 80036ba:	4599      	cmp	r9, r3
 80036bc:	bfa8      	it	ge
 80036be:	4699      	movge	r9, r3
 80036c0:	f1b9 0f00 	cmp.w	r9, #0
 80036c4:	dc33      	bgt.n	800372e <_printf_float+0x396>
 80036c6:	f04f 0800 	mov.w	r8, #0
 80036ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036ce:	f104 0b1a 	add.w	fp, r4, #26
 80036d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036d4:	ebaa 0303 	sub.w	r3, sl, r3
 80036d8:	eba3 0309 	sub.w	r3, r3, r9
 80036dc:	4543      	cmp	r3, r8
 80036de:	f77f af79 	ble.w	80035d4 <_printf_float+0x23c>
 80036e2:	2301      	movs	r3, #1
 80036e4:	465a      	mov	r2, fp
 80036e6:	4631      	mov	r1, r6
 80036e8:	4628      	mov	r0, r5
 80036ea:	47b8      	blx	r7
 80036ec:	3001      	adds	r0, #1
 80036ee:	f43f aeae 	beq.w	800344e <_printf_float+0xb6>
 80036f2:	f108 0801 	add.w	r8, r8, #1
 80036f6:	e7ec      	b.n	80036d2 <_printf_float+0x33a>
 80036f8:	4642      	mov	r2, r8
 80036fa:	4631      	mov	r1, r6
 80036fc:	4628      	mov	r0, r5
 80036fe:	47b8      	blx	r7
 8003700:	3001      	adds	r0, #1
 8003702:	d1c2      	bne.n	800368a <_printf_float+0x2f2>
 8003704:	e6a3      	b.n	800344e <_printf_float+0xb6>
 8003706:	2301      	movs	r3, #1
 8003708:	4631      	mov	r1, r6
 800370a:	4628      	mov	r0, r5
 800370c:	9206      	str	r2, [sp, #24]
 800370e:	47b8      	blx	r7
 8003710:	3001      	adds	r0, #1
 8003712:	f43f ae9c 	beq.w	800344e <_printf_float+0xb6>
 8003716:	9a06      	ldr	r2, [sp, #24]
 8003718:	f10b 0b01 	add.w	fp, fp, #1
 800371c:	e7bb      	b.n	8003696 <_printf_float+0x2fe>
 800371e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003722:	4631      	mov	r1, r6
 8003724:	4628      	mov	r0, r5
 8003726:	47b8      	blx	r7
 8003728:	3001      	adds	r0, #1
 800372a:	d1c0      	bne.n	80036ae <_printf_float+0x316>
 800372c:	e68f      	b.n	800344e <_printf_float+0xb6>
 800372e:	9a06      	ldr	r2, [sp, #24]
 8003730:	464b      	mov	r3, r9
 8003732:	4442      	add	r2, r8
 8003734:	4631      	mov	r1, r6
 8003736:	4628      	mov	r0, r5
 8003738:	47b8      	blx	r7
 800373a:	3001      	adds	r0, #1
 800373c:	d1c3      	bne.n	80036c6 <_printf_float+0x32e>
 800373e:	e686      	b.n	800344e <_printf_float+0xb6>
 8003740:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003744:	f1ba 0f01 	cmp.w	sl, #1
 8003748:	dc01      	bgt.n	800374e <_printf_float+0x3b6>
 800374a:	07db      	lsls	r3, r3, #31
 800374c:	d536      	bpl.n	80037bc <_printf_float+0x424>
 800374e:	2301      	movs	r3, #1
 8003750:	4642      	mov	r2, r8
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	f43f ae78 	beq.w	800344e <_printf_float+0xb6>
 800375e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003762:	4631      	mov	r1, r6
 8003764:	4628      	mov	r0, r5
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	f43f ae70 	beq.w	800344e <_printf_float+0xb6>
 800376e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003772:	2200      	movs	r2, #0
 8003774:	2300      	movs	r3, #0
 8003776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800377a:	f7fd f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800377e:	b9c0      	cbnz	r0, 80037b2 <_printf_float+0x41a>
 8003780:	4653      	mov	r3, sl
 8003782:	f108 0201 	add.w	r2, r8, #1
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	47b8      	blx	r7
 800378c:	3001      	adds	r0, #1
 800378e:	d10c      	bne.n	80037aa <_printf_float+0x412>
 8003790:	e65d      	b.n	800344e <_printf_float+0xb6>
 8003792:	2301      	movs	r3, #1
 8003794:	465a      	mov	r2, fp
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f ae56 	beq.w	800344e <_printf_float+0xb6>
 80037a2:	f108 0801 	add.w	r8, r8, #1
 80037a6:	45d0      	cmp	r8, sl
 80037a8:	dbf3      	blt.n	8003792 <_printf_float+0x3fa>
 80037aa:	464b      	mov	r3, r9
 80037ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037b0:	e6df      	b.n	8003572 <_printf_float+0x1da>
 80037b2:	f04f 0800 	mov.w	r8, #0
 80037b6:	f104 0b1a 	add.w	fp, r4, #26
 80037ba:	e7f4      	b.n	80037a6 <_printf_float+0x40e>
 80037bc:	2301      	movs	r3, #1
 80037be:	4642      	mov	r2, r8
 80037c0:	e7e1      	b.n	8003786 <_printf_float+0x3ee>
 80037c2:	2301      	movs	r3, #1
 80037c4:	464a      	mov	r2, r9
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	f43f ae3e 	beq.w	800344e <_printf_float+0xb6>
 80037d2:	f108 0801 	add.w	r8, r8, #1
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80037da:	1a5b      	subs	r3, r3, r1
 80037dc:	4543      	cmp	r3, r8
 80037de:	dcf0      	bgt.n	80037c2 <_printf_float+0x42a>
 80037e0:	e6fc      	b.n	80035dc <_printf_float+0x244>
 80037e2:	f04f 0800 	mov.w	r8, #0
 80037e6:	f104 0919 	add.w	r9, r4, #25
 80037ea:	e7f4      	b.n	80037d6 <_printf_float+0x43e>

080037ec <_printf_common>:
 80037ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f0:	4616      	mov	r6, r2
 80037f2:	4698      	mov	r8, r3
 80037f4:	688a      	ldr	r2, [r1, #8]
 80037f6:	690b      	ldr	r3, [r1, #16]
 80037f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bfb8      	it	lt
 8003800:	4613      	movlt	r3, r2
 8003802:	6033      	str	r3, [r6, #0]
 8003804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003808:	4607      	mov	r7, r0
 800380a:	460c      	mov	r4, r1
 800380c:	b10a      	cbz	r2, 8003812 <_printf_common+0x26>
 800380e:	3301      	adds	r3, #1
 8003810:	6033      	str	r3, [r6, #0]
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	0699      	lsls	r1, r3, #26
 8003816:	bf42      	ittt	mi
 8003818:	6833      	ldrmi	r3, [r6, #0]
 800381a:	3302      	addmi	r3, #2
 800381c:	6033      	strmi	r3, [r6, #0]
 800381e:	6825      	ldr	r5, [r4, #0]
 8003820:	f015 0506 	ands.w	r5, r5, #6
 8003824:	d106      	bne.n	8003834 <_printf_common+0x48>
 8003826:	f104 0a19 	add.w	sl, r4, #25
 800382a:	68e3      	ldr	r3, [r4, #12]
 800382c:	6832      	ldr	r2, [r6, #0]
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	42ab      	cmp	r3, r5
 8003832:	dc26      	bgt.n	8003882 <_printf_common+0x96>
 8003834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	3b00      	subs	r3, #0
 800383c:	bf18      	it	ne
 800383e:	2301      	movne	r3, #1
 8003840:	0692      	lsls	r2, r2, #26
 8003842:	d42b      	bmi.n	800389c <_printf_common+0xb0>
 8003844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003848:	4641      	mov	r1, r8
 800384a:	4638      	mov	r0, r7
 800384c:	47c8      	blx	r9
 800384e:	3001      	adds	r0, #1
 8003850:	d01e      	beq.n	8003890 <_printf_common+0xa4>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	6922      	ldr	r2, [r4, #16]
 8003856:	f003 0306 	and.w	r3, r3, #6
 800385a:	2b04      	cmp	r3, #4
 800385c:	bf02      	ittt	eq
 800385e:	68e5      	ldreq	r5, [r4, #12]
 8003860:	6833      	ldreq	r3, [r6, #0]
 8003862:	1aed      	subeq	r5, r5, r3
 8003864:	68a3      	ldr	r3, [r4, #8]
 8003866:	bf0c      	ite	eq
 8003868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800386c:	2500      	movne	r5, #0
 800386e:	4293      	cmp	r3, r2
 8003870:	bfc4      	itt	gt
 8003872:	1a9b      	subgt	r3, r3, r2
 8003874:	18ed      	addgt	r5, r5, r3
 8003876:	2600      	movs	r6, #0
 8003878:	341a      	adds	r4, #26
 800387a:	42b5      	cmp	r5, r6
 800387c:	d11a      	bne.n	80038b4 <_printf_common+0xc8>
 800387e:	2000      	movs	r0, #0
 8003880:	e008      	b.n	8003894 <_printf_common+0xa8>
 8003882:	2301      	movs	r3, #1
 8003884:	4652      	mov	r2, sl
 8003886:	4641      	mov	r1, r8
 8003888:	4638      	mov	r0, r7
 800388a:	47c8      	blx	r9
 800388c:	3001      	adds	r0, #1
 800388e:	d103      	bne.n	8003898 <_printf_common+0xac>
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	3501      	adds	r5, #1
 800389a:	e7c6      	b.n	800382a <_printf_common+0x3e>
 800389c:	18e1      	adds	r1, r4, r3
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	2030      	movs	r0, #48	@ 0x30
 80038a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038a6:	4422      	add	r2, r4
 80038a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038b0:	3302      	adds	r3, #2
 80038b2:	e7c7      	b.n	8003844 <_printf_common+0x58>
 80038b4:	2301      	movs	r3, #1
 80038b6:	4622      	mov	r2, r4
 80038b8:	4641      	mov	r1, r8
 80038ba:	4638      	mov	r0, r7
 80038bc:	47c8      	blx	r9
 80038be:	3001      	adds	r0, #1
 80038c0:	d0e6      	beq.n	8003890 <_printf_common+0xa4>
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7d9      	b.n	800387a <_printf_common+0x8e>
	...

080038c8 <_printf_i>:
 80038c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	7e0f      	ldrb	r7, [r1, #24]
 80038ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038d0:	2f78      	cmp	r7, #120	@ 0x78
 80038d2:	4691      	mov	r9, r2
 80038d4:	4680      	mov	r8, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	469a      	mov	sl, r3
 80038da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038de:	d807      	bhi.n	80038f0 <_printf_i+0x28>
 80038e0:	2f62      	cmp	r7, #98	@ 0x62
 80038e2:	d80a      	bhi.n	80038fa <_printf_i+0x32>
 80038e4:	2f00      	cmp	r7, #0
 80038e6:	f000 80d2 	beq.w	8003a8e <_printf_i+0x1c6>
 80038ea:	2f58      	cmp	r7, #88	@ 0x58
 80038ec:	f000 80b9 	beq.w	8003a62 <_printf_i+0x19a>
 80038f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038f8:	e03a      	b.n	8003970 <_printf_i+0xa8>
 80038fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038fe:	2b15      	cmp	r3, #21
 8003900:	d8f6      	bhi.n	80038f0 <_printf_i+0x28>
 8003902:	a101      	add	r1, pc, #4	@ (adr r1, 8003908 <_printf_i+0x40>)
 8003904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003908:	08003961 	.word	0x08003961
 800390c:	08003975 	.word	0x08003975
 8003910:	080038f1 	.word	0x080038f1
 8003914:	080038f1 	.word	0x080038f1
 8003918:	080038f1 	.word	0x080038f1
 800391c:	080038f1 	.word	0x080038f1
 8003920:	08003975 	.word	0x08003975
 8003924:	080038f1 	.word	0x080038f1
 8003928:	080038f1 	.word	0x080038f1
 800392c:	080038f1 	.word	0x080038f1
 8003930:	080038f1 	.word	0x080038f1
 8003934:	08003a75 	.word	0x08003a75
 8003938:	0800399f 	.word	0x0800399f
 800393c:	08003a2f 	.word	0x08003a2f
 8003940:	080038f1 	.word	0x080038f1
 8003944:	080038f1 	.word	0x080038f1
 8003948:	08003a97 	.word	0x08003a97
 800394c:	080038f1 	.word	0x080038f1
 8003950:	0800399f 	.word	0x0800399f
 8003954:	080038f1 	.word	0x080038f1
 8003958:	080038f1 	.word	0x080038f1
 800395c:	08003a37 	.word	0x08003a37
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6032      	str	r2, [r6, #0]
 8003968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800396c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003970:	2301      	movs	r3, #1
 8003972:	e09d      	b.n	8003ab0 <_printf_i+0x1e8>
 8003974:	6833      	ldr	r3, [r6, #0]
 8003976:	6820      	ldr	r0, [r4, #0]
 8003978:	1d19      	adds	r1, r3, #4
 800397a:	6031      	str	r1, [r6, #0]
 800397c:	0606      	lsls	r6, r0, #24
 800397e:	d501      	bpl.n	8003984 <_printf_i+0xbc>
 8003980:	681d      	ldr	r5, [r3, #0]
 8003982:	e003      	b.n	800398c <_printf_i+0xc4>
 8003984:	0645      	lsls	r5, r0, #25
 8003986:	d5fb      	bpl.n	8003980 <_printf_i+0xb8>
 8003988:	f9b3 5000 	ldrsh.w	r5, [r3]
 800398c:	2d00      	cmp	r5, #0
 800398e:	da03      	bge.n	8003998 <_printf_i+0xd0>
 8003990:	232d      	movs	r3, #45	@ 0x2d
 8003992:	426d      	negs	r5, r5
 8003994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003998:	4859      	ldr	r0, [pc, #356]	@ (8003b00 <_printf_i+0x238>)
 800399a:	230a      	movs	r3, #10
 800399c:	e011      	b.n	80039c2 <_printf_i+0xfa>
 800399e:	6821      	ldr	r1, [r4, #0]
 80039a0:	6833      	ldr	r3, [r6, #0]
 80039a2:	0608      	lsls	r0, r1, #24
 80039a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80039a8:	d402      	bmi.n	80039b0 <_printf_i+0xe8>
 80039aa:	0649      	lsls	r1, r1, #25
 80039ac:	bf48      	it	mi
 80039ae:	b2ad      	uxthmi	r5, r5
 80039b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039b2:	4853      	ldr	r0, [pc, #332]	@ (8003b00 <_printf_i+0x238>)
 80039b4:	6033      	str	r3, [r6, #0]
 80039b6:	bf14      	ite	ne
 80039b8:	230a      	movne	r3, #10
 80039ba:	2308      	moveq	r3, #8
 80039bc:	2100      	movs	r1, #0
 80039be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039c2:	6866      	ldr	r6, [r4, #4]
 80039c4:	60a6      	str	r6, [r4, #8]
 80039c6:	2e00      	cmp	r6, #0
 80039c8:	bfa2      	ittt	ge
 80039ca:	6821      	ldrge	r1, [r4, #0]
 80039cc:	f021 0104 	bicge.w	r1, r1, #4
 80039d0:	6021      	strge	r1, [r4, #0]
 80039d2:	b90d      	cbnz	r5, 80039d8 <_printf_i+0x110>
 80039d4:	2e00      	cmp	r6, #0
 80039d6:	d04b      	beq.n	8003a70 <_printf_i+0x1a8>
 80039d8:	4616      	mov	r6, r2
 80039da:	fbb5 f1f3 	udiv	r1, r5, r3
 80039de:	fb03 5711 	mls	r7, r3, r1, r5
 80039e2:	5dc7      	ldrb	r7, [r0, r7]
 80039e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039e8:	462f      	mov	r7, r5
 80039ea:	42bb      	cmp	r3, r7
 80039ec:	460d      	mov	r5, r1
 80039ee:	d9f4      	bls.n	80039da <_printf_i+0x112>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d10b      	bne.n	8003a0c <_printf_i+0x144>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	07df      	lsls	r7, r3, #31
 80039f8:	d508      	bpl.n	8003a0c <_printf_i+0x144>
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	6861      	ldr	r1, [r4, #4]
 80039fe:	4299      	cmp	r1, r3
 8003a00:	bfde      	ittt	le
 8003a02:	2330      	movle	r3, #48	@ 0x30
 8003a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a0c:	1b92      	subs	r2, r2, r6
 8003a0e:	6122      	str	r2, [r4, #16]
 8003a10:	f8cd a000 	str.w	sl, [sp]
 8003a14:	464b      	mov	r3, r9
 8003a16:	aa03      	add	r2, sp, #12
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f7ff fee6 	bl	80037ec <_printf_common>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d14a      	bne.n	8003aba <_printf_i+0x1f2>
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	b004      	add	sp, #16
 8003a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	4833      	ldr	r0, [pc, #204]	@ (8003b04 <_printf_i+0x23c>)
 8003a38:	2778      	movs	r7, #120	@ 0x78
 8003a3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	6831      	ldr	r1, [r6, #0]
 8003a42:	061f      	lsls	r7, r3, #24
 8003a44:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a48:	d402      	bmi.n	8003a50 <_printf_i+0x188>
 8003a4a:	065f      	lsls	r7, r3, #25
 8003a4c:	bf48      	it	mi
 8003a4e:	b2ad      	uxthmi	r5, r5
 8003a50:	6031      	str	r1, [r6, #0]
 8003a52:	07d9      	lsls	r1, r3, #31
 8003a54:	bf44      	itt	mi
 8003a56:	f043 0320 	orrmi.w	r3, r3, #32
 8003a5a:	6023      	strmi	r3, [r4, #0]
 8003a5c:	b11d      	cbz	r5, 8003a66 <_printf_i+0x19e>
 8003a5e:	2310      	movs	r3, #16
 8003a60:	e7ac      	b.n	80039bc <_printf_i+0xf4>
 8003a62:	4827      	ldr	r0, [pc, #156]	@ (8003b00 <_printf_i+0x238>)
 8003a64:	e7e9      	b.n	8003a3a <_printf_i+0x172>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f023 0320 	bic.w	r3, r3, #32
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	e7f6      	b.n	8003a5e <_printf_i+0x196>
 8003a70:	4616      	mov	r6, r2
 8003a72:	e7bd      	b.n	80039f0 <_printf_i+0x128>
 8003a74:	6833      	ldr	r3, [r6, #0]
 8003a76:	6825      	ldr	r5, [r4, #0]
 8003a78:	6961      	ldr	r1, [r4, #20]
 8003a7a:	1d18      	adds	r0, r3, #4
 8003a7c:	6030      	str	r0, [r6, #0]
 8003a7e:	062e      	lsls	r6, r5, #24
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	d501      	bpl.n	8003a88 <_printf_i+0x1c0>
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	e002      	b.n	8003a8e <_printf_i+0x1c6>
 8003a88:	0668      	lsls	r0, r5, #25
 8003a8a:	d5fb      	bpl.n	8003a84 <_printf_i+0x1bc>
 8003a8c:	8019      	strh	r1, [r3, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	4616      	mov	r6, r2
 8003a94:	e7bc      	b.n	8003a10 <_printf_i+0x148>
 8003a96:	6833      	ldr	r3, [r6, #0]
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	6032      	str	r2, [r6, #0]
 8003a9c:	681e      	ldr	r6, [r3, #0]
 8003a9e:	6862      	ldr	r2, [r4, #4]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7fc fb94 	bl	80001d0 <memchr>
 8003aa8:	b108      	cbz	r0, 8003aae <_printf_i+0x1e6>
 8003aaa:	1b80      	subs	r0, r0, r6
 8003aac:	6060      	str	r0, [r4, #4]
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ab8:	e7aa      	b.n	8003a10 <_printf_i+0x148>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	4632      	mov	r2, r6
 8003abe:	4649      	mov	r1, r9
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	47d0      	blx	sl
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d0ad      	beq.n	8003a24 <_printf_i+0x15c>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	079b      	lsls	r3, r3, #30
 8003acc:	d413      	bmi.n	8003af6 <_printf_i+0x22e>
 8003ace:	68e0      	ldr	r0, [r4, #12]
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	4298      	cmp	r0, r3
 8003ad4:	bfb8      	it	lt
 8003ad6:	4618      	movlt	r0, r3
 8003ad8:	e7a6      	b.n	8003a28 <_printf_i+0x160>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4632      	mov	r2, r6
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	47d0      	blx	sl
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d09d      	beq.n	8003a24 <_printf_i+0x15c>
 8003ae8:	3501      	adds	r5, #1
 8003aea:	68e3      	ldr	r3, [r4, #12]
 8003aec:	9903      	ldr	r1, [sp, #12]
 8003aee:	1a5b      	subs	r3, r3, r1
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	dcf2      	bgt.n	8003ada <_printf_i+0x212>
 8003af4:	e7eb      	b.n	8003ace <_printf_i+0x206>
 8003af6:	2500      	movs	r5, #0
 8003af8:	f104 0619 	add.w	r6, r4, #25
 8003afc:	e7f5      	b.n	8003aea <_printf_i+0x222>
 8003afe:	bf00      	nop
 8003b00:	08006369 	.word	0x08006369
 8003b04:	0800637a 	.word	0x0800637a

08003b08 <std>:
 8003b08:	2300      	movs	r3, #0
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	8181      	strh	r1, [r0, #12]
 8003b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b1c:	81c2      	strh	r2, [r0, #14]
 8003b1e:	6183      	str	r3, [r0, #24]
 8003b20:	4619      	mov	r1, r3
 8003b22:	2208      	movs	r2, #8
 8003b24:	305c      	adds	r0, #92	@ 0x5c
 8003b26:	f000 f914 	bl	8003d52 <memset>
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <std+0x58>)
 8003b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <std+0x5c>)
 8003b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <std+0x60>)
 8003b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <std+0x64>)
 8003b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <std+0x68>)
 8003b3c:	6224      	str	r4, [r4, #32]
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d006      	beq.n	8003b50 <std+0x48>
 8003b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b46:	4294      	cmp	r4, r2
 8003b48:	d002      	beq.n	8003b50 <std+0x48>
 8003b4a:	33d0      	adds	r3, #208	@ 0xd0
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d105      	bne.n	8003b5c <std+0x54>
 8003b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	f000 b978 	b.w	8003e4c <__retarget_lock_init_recursive>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	08003ccd 	.word	0x08003ccd
 8003b64:	08003cef 	.word	0x08003cef
 8003b68:	08003d27 	.word	0x08003d27
 8003b6c:	08003d4b 	.word	0x08003d4b
 8003b70:	2000022c 	.word	0x2000022c

08003b74 <stdio_exit_handler>:
 8003b74:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <stdio_exit_handler+0xc>)
 8003b76:	4903      	ldr	r1, [pc, #12]	@ (8003b84 <stdio_exit_handler+0x10>)
 8003b78:	4803      	ldr	r0, [pc, #12]	@ (8003b88 <stdio_exit_handler+0x14>)
 8003b7a:	f000 b869 	b.w	8003c50 <_fwalk_sglue>
 8003b7e:	bf00      	nop
 8003b80:	20000010 	.word	0x20000010
 8003b84:	080057ad 	.word	0x080057ad
 8003b88:	20000020 	.word	0x20000020

08003b8c <cleanup_stdio>:
 8003b8c:	6841      	ldr	r1, [r0, #4]
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <cleanup_stdio+0x34>)
 8003b90:	4299      	cmp	r1, r3
 8003b92:	b510      	push	{r4, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	d001      	beq.n	8003b9c <cleanup_stdio+0x10>
 8003b98:	f001 fe08 	bl	80057ac <_fflush_r>
 8003b9c:	68a1      	ldr	r1, [r4, #8]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <cleanup_stdio+0x38>)
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d002      	beq.n	8003baa <cleanup_stdio+0x1e>
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f001 fe01 	bl	80057ac <_fflush_r>
 8003baa:	68e1      	ldr	r1, [r4, #12]
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <cleanup_stdio+0x3c>)
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	d004      	beq.n	8003bbc <cleanup_stdio+0x30>
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	f001 bdf8 	b.w	80057ac <_fflush_r>
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000022c 	.word	0x2000022c
 8003bc4:	20000294 	.word	0x20000294
 8003bc8:	200002fc 	.word	0x200002fc

08003bcc <global_stdio_init.part.0>:
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <global_stdio_init.part.0+0x30>)
 8003bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8003c00 <global_stdio_init.part.0+0x34>)
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c04 <global_stdio_init.part.0+0x38>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2104      	movs	r1, #4
 8003bdc:	f7ff ff94 	bl	8003b08 <std>
 8003be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003be4:	2201      	movs	r2, #1
 8003be6:	2109      	movs	r1, #9
 8003be8:	f7ff ff8e 	bl	8003b08 <std>
 8003bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf6:	2112      	movs	r1, #18
 8003bf8:	f7ff bf86 	b.w	8003b08 <std>
 8003bfc:	20000364 	.word	0x20000364
 8003c00:	2000022c 	.word	0x2000022c
 8003c04:	08003b75 	.word	0x08003b75

08003c08 <__sfp_lock_acquire>:
 8003c08:	4801      	ldr	r0, [pc, #4]	@ (8003c10 <__sfp_lock_acquire+0x8>)
 8003c0a:	f000 b920 	b.w	8003e4e <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	2000036d 	.word	0x2000036d

08003c14 <__sfp_lock_release>:
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <__sfp_lock_release+0x8>)
 8003c16:	f000 b91b 	b.w	8003e50 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	2000036d 	.word	0x2000036d

08003c20 <__sinit>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	f7ff fff0 	bl	8003c08 <__sfp_lock_acquire>
 8003c28:	6a23      	ldr	r3, [r4, #32]
 8003c2a:	b11b      	cbz	r3, 8003c34 <__sinit+0x14>
 8003c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c30:	f7ff bff0 	b.w	8003c14 <__sfp_lock_release>
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__sinit+0x28>)
 8003c36:	6223      	str	r3, [r4, #32]
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <__sinit+0x2c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f5      	bne.n	8003c2c <__sinit+0xc>
 8003c40:	f7ff ffc4 	bl	8003bcc <global_stdio_init.part.0>
 8003c44:	e7f2      	b.n	8003c2c <__sinit+0xc>
 8003c46:	bf00      	nop
 8003c48:	08003b8d 	.word	0x08003b8d
 8003c4c:	20000364 	.word	0x20000364

08003c50 <_fwalk_sglue>:
 8003c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c54:	4607      	mov	r7, r0
 8003c56:	4688      	mov	r8, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c60:	f1b9 0901 	subs.w	r9, r9, #1
 8003c64:	d505      	bpl.n	8003c72 <_fwalk_sglue+0x22>
 8003c66:	6824      	ldr	r4, [r4, #0]
 8003c68:	2c00      	cmp	r4, #0
 8003c6a:	d1f7      	bne.n	8003c5c <_fwalk_sglue+0xc>
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d907      	bls.n	8003c88 <_fwalk_sglue+0x38>
 8003c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	d003      	beq.n	8003c88 <_fwalk_sglue+0x38>
 8003c80:	4629      	mov	r1, r5
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c0      	blx	r8
 8003c86:	4306      	orrs	r6, r0
 8003c88:	3568      	adds	r5, #104	@ 0x68
 8003c8a:	e7e9      	b.n	8003c60 <_fwalk_sglue+0x10>

08003c8c <siprintf>:
 8003c8c:	b40e      	push	{r1, r2, r3}
 8003c8e:	b500      	push	{lr}
 8003c90:	b09c      	sub	sp, #112	@ 0x70
 8003c92:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c94:	9002      	str	r0, [sp, #8]
 8003c96:	9006      	str	r0, [sp, #24]
 8003c98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c9c:	4809      	ldr	r0, [pc, #36]	@ (8003cc4 <siprintf+0x38>)
 8003c9e:	9107      	str	r1, [sp, #28]
 8003ca0:	9104      	str	r1, [sp, #16]
 8003ca2:	4909      	ldr	r1, [pc, #36]	@ (8003cc8 <siprintf+0x3c>)
 8003ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca8:	9105      	str	r1, [sp, #20]
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	a902      	add	r1, sp, #8
 8003cb0:	f001 fbfc 	bl	80054ac <_svfiprintf_r>
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	b01c      	add	sp, #112	@ 0x70
 8003cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc0:	b003      	add	sp, #12
 8003cc2:	4770      	bx	lr
 8003cc4:	2000001c 	.word	0x2000001c
 8003cc8:	ffff0208 	.word	0xffff0208

08003ccc <__sread>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	460c      	mov	r4, r1
 8003cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd4:	f000 f86c 	bl	8003db0 <_read_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	bfab      	itete	ge
 8003cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cde:	89a3      	ldrhlt	r3, [r4, #12]
 8003ce0:	181b      	addge	r3, r3, r0
 8003ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ce6:	bfac      	ite	ge
 8003ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cea:	81a3      	strhlt	r3, [r4, #12]
 8003cec:	bd10      	pop	{r4, pc}

08003cee <__swrite>:
 8003cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	461f      	mov	r7, r3
 8003cf4:	898b      	ldrh	r3, [r1, #12]
 8003cf6:	05db      	lsls	r3, r3, #23
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4616      	mov	r6, r2
 8003cfe:	d505      	bpl.n	8003d0c <__swrite+0x1e>
 8003d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d04:	2302      	movs	r3, #2
 8003d06:	2200      	movs	r2, #0
 8003d08:	f000 f840 	bl	8003d8c <_lseek_r>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	4632      	mov	r2, r6
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d22:	f000 b857 	b.w	8003dd4 <_write_r>

08003d26 <__sseek>:
 8003d26:	b510      	push	{r4, lr}
 8003d28:	460c      	mov	r4, r1
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 f82d 	bl	8003d8c <_lseek_r>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	bf15      	itete	ne
 8003d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d42:	81a3      	strheq	r3, [r4, #12]
 8003d44:	bf18      	it	ne
 8003d46:	81a3      	strhne	r3, [r4, #12]
 8003d48:	bd10      	pop	{r4, pc}

08003d4a <__sclose>:
 8003d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4e:	f000 b80d 	b.w	8003d6c <_close_r>

08003d52 <memset>:
 8003d52:	4402      	add	r2, r0
 8003d54:	4603      	mov	r3, r0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d100      	bne.n	8003d5c <memset+0xa>
 8003d5a:	4770      	bx	lr
 8003d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d60:	e7f9      	b.n	8003d56 <memset+0x4>
	...

08003d64 <_localeconv_r>:
 8003d64:	4800      	ldr	r0, [pc, #0]	@ (8003d68 <_localeconv_r+0x4>)
 8003d66:	4770      	bx	lr
 8003d68:	2000015c 	.word	0x2000015c

08003d6c <_close_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4d06      	ldr	r5, [pc, #24]	@ (8003d88 <_close_r+0x1c>)
 8003d70:	2300      	movs	r3, #0
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f7fd fe84 	bl	8001a84 <_close>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_close_r+0x1a>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_close_r+0x1a>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	20000368 	.word	0x20000368

08003d8c <_lseek_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d07      	ldr	r5, [pc, #28]	@ (8003dac <_lseek_r+0x20>)
 8003d90:	4604      	mov	r4, r0
 8003d92:	4608      	mov	r0, r1
 8003d94:	4611      	mov	r1, r2
 8003d96:	2200      	movs	r2, #0
 8003d98:	602a      	str	r2, [r5, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7fd fe99 	bl	8001ad2 <_lseek>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_lseek_r+0x1e>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_lseek_r+0x1e>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20000368 	.word	0x20000368

08003db0 <_read_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d07      	ldr	r5, [pc, #28]	@ (8003dd0 <_read_r+0x20>)
 8003db4:	4604      	mov	r4, r0
 8003db6:	4608      	mov	r0, r1
 8003db8:	4611      	mov	r1, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	602a      	str	r2, [r5, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7fd fe27 	bl	8001a12 <_read>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_read_r+0x1e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_read_r+0x1e>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	20000368 	.word	0x20000368

08003dd4 <_write_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d07      	ldr	r5, [pc, #28]	@ (8003df4 <_write_r+0x20>)
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fd fe32 	bl	8001a4c <_write>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_write_r+0x1e>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_write_r+0x1e>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	20000368 	.word	0x20000368

08003df8 <__errno>:
 8003df8:	4b01      	ldr	r3, [pc, #4]	@ (8003e00 <__errno+0x8>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	2000001c 	.word	0x2000001c

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	@ (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	@ (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	@ (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	@ (8003e48 <__libc_init_array+0x44>)
 8003e18:	f002 fa64 	bl	80062e4 <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	080066d0 	.word	0x080066d0
 8003e40:	080066d0 	.word	0x080066d0
 8003e44:	080066d0 	.word	0x080066d0
 8003e48:	080066d4 	.word	0x080066d4

08003e4c <__retarget_lock_init_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_acquire_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_release_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <quorem>:
 8003e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e56:	6903      	ldr	r3, [r0, #16]
 8003e58:	690c      	ldr	r4, [r1, #16]
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	db7e      	blt.n	8003f5e <quorem+0x10c>
 8003e60:	3c01      	subs	r4, #1
 8003e62:	f101 0814 	add.w	r8, r1, #20
 8003e66:	00a3      	lsls	r3, r4, #2
 8003e68:	f100 0514 	add.w	r5, r0, #20
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e88:	d32e      	bcc.n	8003ee8 <quorem+0x96>
 8003e8a:	f04f 0a00 	mov.w	sl, #0
 8003e8e:	46c4      	mov	ip, r8
 8003e90:	46ae      	mov	lr, r5
 8003e92:	46d3      	mov	fp, sl
 8003e94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e98:	b298      	uxth	r0, r3
 8003e9a:	fb06 a000 	mla	r0, r6, r0, sl
 8003e9e:	0c02      	lsrs	r2, r0, #16
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	fb06 2303 	mla	r3, r6, r3, r2
 8003ea6:	f8de 2000 	ldr.w	r2, [lr]
 8003eaa:	b280      	uxth	r0, r0
 8003eac:	b292      	uxth	r2, r2
 8003eae:	1a12      	subs	r2, r2, r0
 8003eb0:	445a      	add	r2, fp
 8003eb2:	f8de 0000 	ldr.w	r0, [lr]
 8003eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ec0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003eca:	45e1      	cmp	r9, ip
 8003ecc:	f84e 2b04 	str.w	r2, [lr], #4
 8003ed0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003ed4:	d2de      	bcs.n	8003e94 <quorem+0x42>
 8003ed6:	9b00      	ldr	r3, [sp, #0]
 8003ed8:	58eb      	ldr	r3, [r5, r3]
 8003eda:	b92b      	cbnz	r3, 8003ee8 <quorem+0x96>
 8003edc:	9b01      	ldr	r3, [sp, #4]
 8003ede:	3b04      	subs	r3, #4
 8003ee0:	429d      	cmp	r5, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	d32f      	bcc.n	8003f46 <quorem+0xf4>
 8003ee6:	613c      	str	r4, [r7, #16]
 8003ee8:	4638      	mov	r0, r7
 8003eea:	f001 f97b 	bl	80051e4 <__mcmp>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	db25      	blt.n	8003f3e <quorem+0xec>
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f858 2b04 	ldr.w	r2, [r8], #4
 8003efa:	f8d1 c000 	ldr.w	ip, [r1]
 8003efe:	fa1f fe82 	uxth.w	lr, r2
 8003f02:	fa1f f38c 	uxth.w	r3, ip
 8003f06:	eba3 030e 	sub.w	r3, r3, lr
 8003f0a:	4403      	add	r3, r0
 8003f0c:	0c12      	lsrs	r2, r2, #16
 8003f0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003f12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f1c:	45c1      	cmp	r9, r8
 8003f1e:	f841 3b04 	str.w	r3, [r1], #4
 8003f22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f26:	d2e6      	bcs.n	8003ef6 <quorem+0xa4>
 8003f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f30:	b922      	cbnz	r2, 8003f3c <quorem+0xea>
 8003f32:	3b04      	subs	r3, #4
 8003f34:	429d      	cmp	r5, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	d30b      	bcc.n	8003f52 <quorem+0x100>
 8003f3a:	613c      	str	r4, [r7, #16]
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	4630      	mov	r0, r6
 8003f40:	b003      	add	sp, #12
 8003f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	3b04      	subs	r3, #4
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d1cb      	bne.n	8003ee6 <quorem+0x94>
 8003f4e:	3c01      	subs	r4, #1
 8003f50:	e7c6      	b.n	8003ee0 <quorem+0x8e>
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	3b04      	subs	r3, #4
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	d1ef      	bne.n	8003f3a <quorem+0xe8>
 8003f5a:	3c01      	subs	r4, #1
 8003f5c:	e7ea      	b.n	8003f34 <quorem+0xe2>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e7ee      	b.n	8003f40 <quorem+0xee>
 8003f62:	0000      	movs	r0, r0
 8003f64:	0000      	movs	r0, r0
	...

08003f68 <_dtoa_r>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	69c7      	ldr	r7, [r0, #28]
 8003f6e:	b099      	sub	sp, #100	@ 0x64
 8003f70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f74:	ec55 4b10 	vmov	r4, r5, d0
 8003f78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f7c:	4683      	mov	fp, r0
 8003f7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f82:	b97f      	cbnz	r7, 8003fa4 <_dtoa_r+0x3c>
 8003f84:	2010      	movs	r0, #16
 8003f86:	f000 fdfd 	bl	8004b84 <malloc>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003f90:	b920      	cbnz	r0, 8003f9c <_dtoa_r+0x34>
 8003f92:	4ba7      	ldr	r3, [pc, #668]	@ (8004230 <_dtoa_r+0x2c8>)
 8003f94:	21ef      	movs	r1, #239	@ 0xef
 8003f96:	48a7      	ldr	r0, [pc, #668]	@ (8004234 <_dtoa_r+0x2cc>)
 8003f98:	f001 fc68 	bl	800586c <__assert_func>
 8003f9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003fa0:	6007      	str	r7, [r0, #0]
 8003fa2:	60c7      	str	r7, [r0, #12]
 8003fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	b159      	cbz	r1, 8003fc4 <_dtoa_r+0x5c>
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	604a      	str	r2, [r1, #4]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4093      	lsls	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
 8003fb6:	4658      	mov	r0, fp
 8003fb8:	f000 feda 	bl	8004d70 <_Bfree>
 8003fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	1e2b      	subs	r3, r5, #0
 8003fc6:	bfb9      	ittee	lt
 8003fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003fcc:	9303      	strlt	r3, [sp, #12]
 8003fce:	2300      	movge	r3, #0
 8003fd0:	6033      	strge	r3, [r6, #0]
 8003fd2:	9f03      	ldr	r7, [sp, #12]
 8003fd4:	4b98      	ldr	r3, [pc, #608]	@ (8004238 <_dtoa_r+0x2d0>)
 8003fd6:	bfbc      	itt	lt
 8003fd8:	2201      	movlt	r2, #1
 8003fda:	6032      	strlt	r2, [r6, #0]
 8003fdc:	43bb      	bics	r3, r7
 8003fde:	d112      	bne.n	8004006 <_dtoa_r+0x9e>
 8003fe0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003fe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003fec:	4323      	orrs	r3, r4
 8003fee:	f000 854d 	beq.w	8004a8c <_dtoa_r+0xb24>
 8003ff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003ff4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800424c <_dtoa_r+0x2e4>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 854f 	beq.w	8004a9c <_dtoa_r+0xb34>
 8003ffe:	f10a 0303 	add.w	r3, sl, #3
 8004002:	f000 bd49 	b.w	8004a98 <_dtoa_r+0xb30>
 8004006:	ed9d 7b02 	vldr	d7, [sp, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	ec51 0b17 	vmov	r0, r1, d7
 8004010:	2300      	movs	r3, #0
 8004012:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004016:	f7fc fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800401a:	4680      	mov	r8, r0
 800401c:	b158      	cbz	r0, 8004036 <_dtoa_r+0xce>
 800401e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004020:	2301      	movs	r3, #1
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004026:	b113      	cbz	r3, 800402e <_dtoa_r+0xc6>
 8004028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800402a:	4b84      	ldr	r3, [pc, #528]	@ (800423c <_dtoa_r+0x2d4>)
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004250 <_dtoa_r+0x2e8>
 8004032:	f000 bd33 	b.w	8004a9c <_dtoa_r+0xb34>
 8004036:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800403a:	aa16      	add	r2, sp, #88	@ 0x58
 800403c:	a917      	add	r1, sp, #92	@ 0x5c
 800403e:	4658      	mov	r0, fp
 8004040:	f001 f980 	bl	8005344 <__d2b>
 8004044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004048:	4681      	mov	r9, r0
 800404a:	2e00      	cmp	r6, #0
 800404c:	d077      	beq.n	800413e <_dtoa_r+0x1d6>
 800404e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004050:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800405c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004068:	4619      	mov	r1, r3
 800406a:	2200      	movs	r2, #0
 800406c:	4b74      	ldr	r3, [pc, #464]	@ (8004240 <_dtoa_r+0x2d8>)
 800406e:	f7fc f90b 	bl	8000288 <__aeabi_dsub>
 8004072:	a369      	add	r3, pc, #420	@ (adr r3, 8004218 <_dtoa_r+0x2b0>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f7fc fabe 	bl	80005f8 <__aeabi_dmul>
 800407c:	a368      	add	r3, pc, #416	@ (adr r3, 8004220 <_dtoa_r+0x2b8>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f7fc f903 	bl	800028c <__adddf3>
 8004086:	4604      	mov	r4, r0
 8004088:	4630      	mov	r0, r6
 800408a:	460d      	mov	r5, r1
 800408c:	f7fc fa4a 	bl	8000524 <__aeabi_i2d>
 8004090:	a365      	add	r3, pc, #404	@ (adr r3, 8004228 <_dtoa_r+0x2c0>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc faaf 	bl	80005f8 <__aeabi_dmul>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f7fc f8f3 	bl	800028c <__adddf3>
 80040a6:	4604      	mov	r4, r0
 80040a8:	460d      	mov	r5, r1
 80040aa:	f7fc fd55 	bl	8000b58 <__aeabi_d2iz>
 80040ae:	2200      	movs	r2, #0
 80040b0:	4607      	mov	r7, r0
 80040b2:	2300      	movs	r3, #0
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc fd10 	bl	8000adc <__aeabi_dcmplt>
 80040bc:	b140      	cbz	r0, 80040d0 <_dtoa_r+0x168>
 80040be:	4638      	mov	r0, r7
 80040c0:	f7fc fa30 	bl	8000524 <__aeabi_i2d>
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	f7fc fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80040cc:	b900      	cbnz	r0, 80040d0 <_dtoa_r+0x168>
 80040ce:	3f01      	subs	r7, #1
 80040d0:	2f16      	cmp	r7, #22
 80040d2:	d851      	bhi.n	8004178 <_dtoa_r+0x210>
 80040d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004244 <_dtoa_r+0x2dc>)
 80040d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040e2:	f7fc fcfb 	bl	8000adc <__aeabi_dcmplt>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d048      	beq.n	800417c <_dtoa_r+0x214>
 80040ea:	3f01      	subs	r7, #1
 80040ec:	2300      	movs	r3, #0
 80040ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80040f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80040f2:	1b9b      	subs	r3, r3, r6
 80040f4:	1e5a      	subs	r2, r3, #1
 80040f6:	bf44      	itt	mi
 80040f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80040fc:	2300      	movmi	r3, #0
 80040fe:	9208      	str	r2, [sp, #32]
 8004100:	bf54      	ite	pl
 8004102:	f04f 0800 	movpl.w	r8, #0
 8004106:	9308      	strmi	r3, [sp, #32]
 8004108:	2f00      	cmp	r7, #0
 800410a:	db39      	blt.n	8004180 <_dtoa_r+0x218>
 800410c:	9b08      	ldr	r3, [sp, #32]
 800410e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004110:	443b      	add	r3, r7
 8004112:	9308      	str	r3, [sp, #32]
 8004114:	2300      	movs	r3, #0
 8004116:	930a      	str	r3, [sp, #40]	@ 0x28
 8004118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800411a:	2b09      	cmp	r3, #9
 800411c:	d864      	bhi.n	80041e8 <_dtoa_r+0x280>
 800411e:	2b05      	cmp	r3, #5
 8004120:	bfc4      	itt	gt
 8004122:	3b04      	subgt	r3, #4
 8004124:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004128:	f1a3 0302 	sub.w	r3, r3, #2
 800412c:	bfcc      	ite	gt
 800412e:	2400      	movgt	r4, #0
 8004130:	2401      	movle	r4, #1
 8004132:	2b03      	cmp	r3, #3
 8004134:	d863      	bhi.n	80041fe <_dtoa_r+0x296>
 8004136:	e8df f003 	tbb	[pc, r3]
 800413a:	372a      	.short	0x372a
 800413c:	5535      	.short	0x5535
 800413e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004142:	441e      	add	r6, r3
 8004144:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004148:	2b20      	cmp	r3, #32
 800414a:	bfc1      	itttt	gt
 800414c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004150:	409f      	lslgt	r7, r3
 8004152:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004156:	fa24 f303 	lsrgt.w	r3, r4, r3
 800415a:	bfd6      	itet	le
 800415c:	f1c3 0320 	rsble	r3, r3, #32
 8004160:	ea47 0003 	orrgt.w	r0, r7, r3
 8004164:	fa04 f003 	lslle.w	r0, r4, r3
 8004168:	f7fc f9cc 	bl	8000504 <__aeabi_ui2d>
 800416c:	2201      	movs	r2, #1
 800416e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004172:	3e01      	subs	r6, #1
 8004174:	9214      	str	r2, [sp, #80]	@ 0x50
 8004176:	e777      	b.n	8004068 <_dtoa_r+0x100>
 8004178:	2301      	movs	r3, #1
 800417a:	e7b8      	b.n	80040ee <_dtoa_r+0x186>
 800417c:	9012      	str	r0, [sp, #72]	@ 0x48
 800417e:	e7b7      	b.n	80040f0 <_dtoa_r+0x188>
 8004180:	427b      	negs	r3, r7
 8004182:	930a      	str	r3, [sp, #40]	@ 0x28
 8004184:	2300      	movs	r3, #0
 8004186:	eba8 0807 	sub.w	r8, r8, r7
 800418a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800418c:	e7c4      	b.n	8004118 <_dtoa_r+0x1b0>
 800418e:	2300      	movs	r3, #0
 8004190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	dc35      	bgt.n	8004204 <_dtoa_r+0x29c>
 8004198:	2301      	movs	r3, #1
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	9307      	str	r3, [sp, #28]
 800419e:	461a      	mov	r2, r3
 80041a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80041a2:	e00b      	b.n	80041bc <_dtoa_r+0x254>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e7f3      	b.n	8004190 <_dtoa_r+0x228>
 80041a8:	2300      	movs	r3, #0
 80041aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	9307      	str	r3, [sp, #28]
 80041b8:	bfb8      	it	lt
 80041ba:	2301      	movlt	r3, #1
 80041bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80041c0:	2100      	movs	r1, #0
 80041c2:	2204      	movs	r2, #4
 80041c4:	f102 0514 	add.w	r5, r2, #20
 80041c8:	429d      	cmp	r5, r3
 80041ca:	d91f      	bls.n	800420c <_dtoa_r+0x2a4>
 80041cc:	6041      	str	r1, [r0, #4]
 80041ce:	4658      	mov	r0, fp
 80041d0:	f000 fd8e 	bl	8004cf0 <_Balloc>
 80041d4:	4682      	mov	sl, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d13c      	bne.n	8004254 <_dtoa_r+0x2ec>
 80041da:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <_dtoa_r+0x2e0>)
 80041dc:	4602      	mov	r2, r0
 80041de:	f240 11af 	movw	r1, #431	@ 0x1af
 80041e2:	e6d8      	b.n	8003f96 <_dtoa_r+0x2e>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e7e0      	b.n	80041aa <_dtoa_r+0x242>
 80041e8:	2401      	movs	r4, #1
 80041ea:	2300      	movs	r3, #0
 80041ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	9307      	str	r3, [sp, #28]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2312      	movs	r3, #18
 80041fc:	e7d0      	b.n	80041a0 <_dtoa_r+0x238>
 80041fe:	2301      	movs	r3, #1
 8004200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004202:	e7f5      	b.n	80041f0 <_dtoa_r+0x288>
 8004204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	9307      	str	r3, [sp, #28]
 800420a:	e7d7      	b.n	80041bc <_dtoa_r+0x254>
 800420c:	3101      	adds	r1, #1
 800420e:	0052      	lsls	r2, r2, #1
 8004210:	e7d8      	b.n	80041c4 <_dtoa_r+0x25c>
 8004212:	bf00      	nop
 8004214:	f3af 8000 	nop.w
 8004218:	636f4361 	.word	0x636f4361
 800421c:	3fd287a7 	.word	0x3fd287a7
 8004220:	8b60c8b3 	.word	0x8b60c8b3
 8004224:	3fc68a28 	.word	0x3fc68a28
 8004228:	509f79fb 	.word	0x509f79fb
 800422c:	3fd34413 	.word	0x3fd34413
 8004230:	08006398 	.word	0x08006398
 8004234:	080063af 	.word	0x080063af
 8004238:	7ff00000 	.word	0x7ff00000
 800423c:	08006368 	.word	0x08006368
 8004240:	3ff80000 	.word	0x3ff80000
 8004244:	080064a8 	.word	0x080064a8
 8004248:	08006407 	.word	0x08006407
 800424c:	08006394 	.word	0x08006394
 8004250:	08006367 	.word	0x08006367
 8004254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004258:	6018      	str	r0, [r3, #0]
 800425a:	9b07      	ldr	r3, [sp, #28]
 800425c:	2b0e      	cmp	r3, #14
 800425e:	f200 80a4 	bhi.w	80043aa <_dtoa_r+0x442>
 8004262:	2c00      	cmp	r4, #0
 8004264:	f000 80a1 	beq.w	80043aa <_dtoa_r+0x442>
 8004268:	2f00      	cmp	r7, #0
 800426a:	dd33      	ble.n	80042d4 <_dtoa_r+0x36c>
 800426c:	4bad      	ldr	r3, [pc, #692]	@ (8004524 <_dtoa_r+0x5bc>)
 800426e:	f007 020f 	and.w	r2, r7, #15
 8004272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004276:	ed93 7b00 	vldr	d7, [r3]
 800427a:	05f8      	lsls	r0, r7, #23
 800427c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004280:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004284:	d516      	bpl.n	80042b4 <_dtoa_r+0x34c>
 8004286:	4ba8      	ldr	r3, [pc, #672]	@ (8004528 <_dtoa_r+0x5c0>)
 8004288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800428c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004290:	f7fc fadc 	bl	800084c <__aeabi_ddiv>
 8004294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004298:	f004 040f 	and.w	r4, r4, #15
 800429c:	2603      	movs	r6, #3
 800429e:	4da2      	ldr	r5, [pc, #648]	@ (8004528 <_dtoa_r+0x5c0>)
 80042a0:	b954      	cbnz	r4, 80042b8 <_dtoa_r+0x350>
 80042a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042aa:	f7fc facf 	bl	800084c <__aeabi_ddiv>
 80042ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b2:	e028      	b.n	8004306 <_dtoa_r+0x39e>
 80042b4:	2602      	movs	r6, #2
 80042b6:	e7f2      	b.n	800429e <_dtoa_r+0x336>
 80042b8:	07e1      	lsls	r1, r4, #31
 80042ba:	d508      	bpl.n	80042ce <_dtoa_r+0x366>
 80042bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042c4:	f7fc f998 	bl	80005f8 <__aeabi_dmul>
 80042c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042cc:	3601      	adds	r6, #1
 80042ce:	1064      	asrs	r4, r4, #1
 80042d0:	3508      	adds	r5, #8
 80042d2:	e7e5      	b.n	80042a0 <_dtoa_r+0x338>
 80042d4:	f000 80d2 	beq.w	800447c <_dtoa_r+0x514>
 80042d8:	427c      	negs	r4, r7
 80042da:	4b92      	ldr	r3, [pc, #584]	@ (8004524 <_dtoa_r+0x5bc>)
 80042dc:	4d92      	ldr	r5, [pc, #584]	@ (8004528 <_dtoa_r+0x5c0>)
 80042de:	f004 020f 	and.w	r2, r4, #15
 80042e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042ee:	f7fc f983 	bl	80005f8 <__aeabi_dmul>
 80042f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042f6:	1124      	asrs	r4, r4, #4
 80042f8:	2300      	movs	r3, #0
 80042fa:	2602      	movs	r6, #2
 80042fc:	2c00      	cmp	r4, #0
 80042fe:	f040 80b2 	bne.w	8004466 <_dtoa_r+0x4fe>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1d3      	bne.n	80042ae <_dtoa_r+0x346>
 8004306:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004308:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80b7 	beq.w	8004480 <_dtoa_r+0x518>
 8004312:	4b86      	ldr	r3, [pc, #536]	@ (800452c <_dtoa_r+0x5c4>)
 8004314:	2200      	movs	r2, #0
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fc fbdf 	bl	8000adc <__aeabi_dcmplt>
 800431e:	2800      	cmp	r0, #0
 8004320:	f000 80ae 	beq.w	8004480 <_dtoa_r+0x518>
 8004324:	9b07      	ldr	r3, [sp, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80aa 	beq.w	8004480 <_dtoa_r+0x518>
 800432c:	9b00      	ldr	r3, [sp, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	dd37      	ble.n	80043a2 <_dtoa_r+0x43a>
 8004332:	1e7b      	subs	r3, r7, #1
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	4620      	mov	r0, r4
 8004338:	4b7d      	ldr	r3, [pc, #500]	@ (8004530 <_dtoa_r+0x5c8>)
 800433a:	2200      	movs	r2, #0
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc f95b 	bl	80005f8 <__aeabi_dmul>
 8004342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004346:	9c00      	ldr	r4, [sp, #0]
 8004348:	3601      	adds	r6, #1
 800434a:	4630      	mov	r0, r6
 800434c:	f7fc f8ea 	bl	8000524 <__aeabi_i2d>
 8004350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004354:	f7fc f950 	bl	80005f8 <__aeabi_dmul>
 8004358:	4b76      	ldr	r3, [pc, #472]	@ (8004534 <_dtoa_r+0x5cc>)
 800435a:	2200      	movs	r2, #0
 800435c:	f7fb ff96 	bl	800028c <__adddf3>
 8004360:	4605      	mov	r5, r0
 8004362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004366:	2c00      	cmp	r4, #0
 8004368:	f040 808d 	bne.w	8004486 <_dtoa_r+0x51e>
 800436c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004370:	4b71      	ldr	r3, [pc, #452]	@ (8004538 <_dtoa_r+0x5d0>)
 8004372:	2200      	movs	r2, #0
 8004374:	f7fb ff88 	bl	8000288 <__aeabi_dsub>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004380:	462a      	mov	r2, r5
 8004382:	4633      	mov	r3, r6
 8004384:	f7fc fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8004388:	2800      	cmp	r0, #0
 800438a:	f040 828b 	bne.w	80048a4 <_dtoa_r+0x93c>
 800438e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004392:	462a      	mov	r2, r5
 8004394:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004398:	f7fc fba0 	bl	8000adc <__aeabi_dcmplt>
 800439c:	2800      	cmp	r0, #0
 800439e:	f040 8128 	bne.w	80045f2 <_dtoa_r+0x68a>
 80043a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80043a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80043aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f2c0 815a 	blt.w	8004666 <_dtoa_r+0x6fe>
 80043b2:	2f0e      	cmp	r7, #14
 80043b4:	f300 8157 	bgt.w	8004666 <_dtoa_r+0x6fe>
 80043b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004524 <_dtoa_r+0x5bc>)
 80043ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043be:	ed93 7b00 	vldr	d7, [r3]
 80043c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	ed8d 7b00 	vstr	d7, [sp]
 80043ca:	da03      	bge.n	80043d4 <_dtoa_r+0x46c>
 80043cc:	9b07      	ldr	r3, [sp, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f340 8101 	ble.w	80045d6 <_dtoa_r+0x66e>
 80043d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80043d8:	4656      	mov	r6, sl
 80043da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc fa33 	bl	800084c <__aeabi_ddiv>
 80043e6:	f7fc fbb7 	bl	8000b58 <__aeabi_d2iz>
 80043ea:	4680      	mov	r8, r0
 80043ec:	f7fc f89a 	bl	8000524 <__aeabi_i2d>
 80043f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043f4:	f7fc f900 	bl	80005f8 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4620      	mov	r0, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004404:	f7fb ff40 	bl	8000288 <__aeabi_dsub>
 8004408:	f806 4b01 	strb.w	r4, [r6], #1
 800440c:	9d07      	ldr	r5, [sp, #28]
 800440e:	eba6 040a 	sub.w	r4, r6, sl
 8004412:	42a5      	cmp	r5, r4
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	f040 8117 	bne.w	800464a <_dtoa_r+0x6e2>
 800441c:	f7fb ff36 	bl	800028c <__adddf3>
 8004420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004424:	4604      	mov	r4, r0
 8004426:	460d      	mov	r5, r1
 8004428:	f7fc fb76 	bl	8000b18 <__aeabi_dcmpgt>
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 80f9 	bne.w	8004624 <_dtoa_r+0x6bc>
 8004432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004436:	4620      	mov	r0, r4
 8004438:	4629      	mov	r1, r5
 800443a:	f7fc fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800443e:	b118      	cbz	r0, 8004448 <_dtoa_r+0x4e0>
 8004440:	f018 0f01 	tst.w	r8, #1
 8004444:	f040 80ee 	bne.w	8004624 <_dtoa_r+0x6bc>
 8004448:	4649      	mov	r1, r9
 800444a:	4658      	mov	r0, fp
 800444c:	f000 fc90 	bl	8004d70 <_Bfree>
 8004450:	2300      	movs	r3, #0
 8004452:	7033      	strb	r3, [r6, #0]
 8004454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004456:	3701      	adds	r7, #1
 8004458:	601f      	str	r7, [r3, #0]
 800445a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 831d 	beq.w	8004a9c <_dtoa_r+0xb34>
 8004462:	601e      	str	r6, [r3, #0]
 8004464:	e31a      	b.n	8004a9c <_dtoa_r+0xb34>
 8004466:	07e2      	lsls	r2, r4, #31
 8004468:	d505      	bpl.n	8004476 <_dtoa_r+0x50e>
 800446a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800446e:	f7fc f8c3 	bl	80005f8 <__aeabi_dmul>
 8004472:	3601      	adds	r6, #1
 8004474:	2301      	movs	r3, #1
 8004476:	1064      	asrs	r4, r4, #1
 8004478:	3508      	adds	r5, #8
 800447a:	e73f      	b.n	80042fc <_dtoa_r+0x394>
 800447c:	2602      	movs	r6, #2
 800447e:	e742      	b.n	8004306 <_dtoa_r+0x39e>
 8004480:	9c07      	ldr	r4, [sp, #28]
 8004482:	9704      	str	r7, [sp, #16]
 8004484:	e761      	b.n	800434a <_dtoa_r+0x3e2>
 8004486:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <_dtoa_r+0x5bc>)
 8004488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800448a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800448e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004492:	4454      	add	r4, sl
 8004494:	2900      	cmp	r1, #0
 8004496:	d053      	beq.n	8004540 <_dtoa_r+0x5d8>
 8004498:	4928      	ldr	r1, [pc, #160]	@ (800453c <_dtoa_r+0x5d4>)
 800449a:	2000      	movs	r0, #0
 800449c:	f7fc f9d6 	bl	800084c <__aeabi_ddiv>
 80044a0:	4633      	mov	r3, r6
 80044a2:	462a      	mov	r2, r5
 80044a4:	f7fb fef0 	bl	8000288 <__aeabi_dsub>
 80044a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044ac:	4656      	mov	r6, sl
 80044ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044b2:	f7fc fb51 	bl	8000b58 <__aeabi_d2iz>
 80044b6:	4605      	mov	r5, r0
 80044b8:	f7fc f834 	bl	8000524 <__aeabi_i2d>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c4:	f7fb fee0 	bl	8000288 <__aeabi_dsub>
 80044c8:	3530      	adds	r5, #48	@ 0x30
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044d2:	f806 5b01 	strb.w	r5, [r6], #1
 80044d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044da:	f7fc faff 	bl	8000adc <__aeabi_dcmplt>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d171      	bne.n	80045c6 <_dtoa_r+0x65e>
 80044e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044e6:	4911      	ldr	r1, [pc, #68]	@ (800452c <_dtoa_r+0x5c4>)
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7fb fecd 	bl	8000288 <__aeabi_dsub>
 80044ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044f2:	f7fc faf3 	bl	8000adc <__aeabi_dcmplt>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	f040 8095 	bne.w	8004626 <_dtoa_r+0x6be>
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	f43f af50 	beq.w	80043a2 <_dtoa_r+0x43a>
 8004502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <_dtoa_r+0x5c8>)
 8004508:	2200      	movs	r2, #0
 800450a:	f7fc f875 	bl	80005f8 <__aeabi_dmul>
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <_dtoa_r+0x5c8>)
 8004510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004514:	2200      	movs	r2, #0
 8004516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451a:	f7fc f86d 	bl	80005f8 <__aeabi_dmul>
 800451e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004522:	e7c4      	b.n	80044ae <_dtoa_r+0x546>
 8004524:	080064a8 	.word	0x080064a8
 8004528:	08006480 	.word	0x08006480
 800452c:	3ff00000 	.word	0x3ff00000
 8004530:	40240000 	.word	0x40240000
 8004534:	401c0000 	.word	0x401c0000
 8004538:	40140000 	.word	0x40140000
 800453c:	3fe00000 	.word	0x3fe00000
 8004540:	4631      	mov	r1, r6
 8004542:	4628      	mov	r0, r5
 8004544:	f7fc f858 	bl	80005f8 <__aeabi_dmul>
 8004548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800454c:	9415      	str	r4, [sp, #84]	@ 0x54
 800454e:	4656      	mov	r6, sl
 8004550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004554:	f7fc fb00 	bl	8000b58 <__aeabi_d2iz>
 8004558:	4605      	mov	r5, r0
 800455a:	f7fb ffe3 	bl	8000524 <__aeabi_i2d>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004566:	f7fb fe8f 	bl	8000288 <__aeabi_dsub>
 800456a:	3530      	adds	r5, #48	@ 0x30
 800456c:	f806 5b01 	strb.w	r5, [r6], #1
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	42a6      	cmp	r6, r4
 8004576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	d124      	bne.n	80045ca <_dtoa_r+0x662>
 8004580:	4bac      	ldr	r3, [pc, #688]	@ (8004834 <_dtoa_r+0x8cc>)
 8004582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004586:	f7fb fe81 	bl	800028c <__adddf3>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004592:	f7fc fac1 	bl	8000b18 <__aeabi_dcmpgt>
 8004596:	2800      	cmp	r0, #0
 8004598:	d145      	bne.n	8004626 <_dtoa_r+0x6be>
 800459a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800459e:	49a5      	ldr	r1, [pc, #660]	@ (8004834 <_dtoa_r+0x8cc>)
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7fb fe71 	bl	8000288 <__aeabi_dsub>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ae:	f7fc fa95 	bl	8000adc <__aeabi_dcmplt>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	f43f aef5 	beq.w	80043a2 <_dtoa_r+0x43a>
 80045b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80045ba:	1e73      	subs	r3, r6, #1
 80045bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80045be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80045c2:	2b30      	cmp	r3, #48	@ 0x30
 80045c4:	d0f8      	beq.n	80045b8 <_dtoa_r+0x650>
 80045c6:	9f04      	ldr	r7, [sp, #16]
 80045c8:	e73e      	b.n	8004448 <_dtoa_r+0x4e0>
 80045ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004838 <_dtoa_r+0x8d0>)
 80045cc:	f7fc f814 	bl	80005f8 <__aeabi_dmul>
 80045d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d4:	e7bc      	b.n	8004550 <_dtoa_r+0x5e8>
 80045d6:	d10c      	bne.n	80045f2 <_dtoa_r+0x68a>
 80045d8:	4b98      	ldr	r3, [pc, #608]	@ (800483c <_dtoa_r+0x8d4>)
 80045da:	2200      	movs	r2, #0
 80045dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e0:	f7fc f80a 	bl	80005f8 <__aeabi_dmul>
 80045e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045e8:	f7fc fa8c 	bl	8000b04 <__aeabi_dcmpge>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f000 8157 	beq.w	80048a0 <_dtoa_r+0x938>
 80045f2:	2400      	movs	r4, #0
 80045f4:	4625      	mov	r5, r4
 80045f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045f8:	43db      	mvns	r3, r3
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	4656      	mov	r6, sl
 80045fe:	2700      	movs	r7, #0
 8004600:	4621      	mov	r1, r4
 8004602:	4658      	mov	r0, fp
 8004604:	f000 fbb4 	bl	8004d70 <_Bfree>
 8004608:	2d00      	cmp	r5, #0
 800460a:	d0dc      	beq.n	80045c6 <_dtoa_r+0x65e>
 800460c:	b12f      	cbz	r7, 800461a <_dtoa_r+0x6b2>
 800460e:	42af      	cmp	r7, r5
 8004610:	d003      	beq.n	800461a <_dtoa_r+0x6b2>
 8004612:	4639      	mov	r1, r7
 8004614:	4658      	mov	r0, fp
 8004616:	f000 fbab 	bl	8004d70 <_Bfree>
 800461a:	4629      	mov	r1, r5
 800461c:	4658      	mov	r0, fp
 800461e:	f000 fba7 	bl	8004d70 <_Bfree>
 8004622:	e7d0      	b.n	80045c6 <_dtoa_r+0x65e>
 8004624:	9704      	str	r7, [sp, #16]
 8004626:	4633      	mov	r3, r6
 8004628:	461e      	mov	r6, r3
 800462a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800462e:	2a39      	cmp	r2, #57	@ 0x39
 8004630:	d107      	bne.n	8004642 <_dtoa_r+0x6da>
 8004632:	459a      	cmp	sl, r3
 8004634:	d1f8      	bne.n	8004628 <_dtoa_r+0x6c0>
 8004636:	9a04      	ldr	r2, [sp, #16]
 8004638:	3201      	adds	r2, #1
 800463a:	9204      	str	r2, [sp, #16]
 800463c:	2230      	movs	r2, #48	@ 0x30
 800463e:	f88a 2000 	strb.w	r2, [sl]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	3201      	adds	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e7bd      	b.n	80045c6 <_dtoa_r+0x65e>
 800464a:	4b7b      	ldr	r3, [pc, #492]	@ (8004838 <_dtoa_r+0x8d0>)
 800464c:	2200      	movs	r2, #0
 800464e:	f7fb ffd3 	bl	80005f8 <__aeabi_dmul>
 8004652:	2200      	movs	r2, #0
 8004654:	2300      	movs	r3, #0
 8004656:	4604      	mov	r4, r0
 8004658:	460d      	mov	r5, r1
 800465a:	f7fc fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800465e:	2800      	cmp	r0, #0
 8004660:	f43f aebb 	beq.w	80043da <_dtoa_r+0x472>
 8004664:	e6f0      	b.n	8004448 <_dtoa_r+0x4e0>
 8004666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004668:	2a00      	cmp	r2, #0
 800466a:	f000 80db 	beq.w	8004824 <_dtoa_r+0x8bc>
 800466e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004670:	2a01      	cmp	r2, #1
 8004672:	f300 80bf 	bgt.w	80047f4 <_dtoa_r+0x88c>
 8004676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004678:	2a00      	cmp	r2, #0
 800467a:	f000 80b7 	beq.w	80047ec <_dtoa_r+0x884>
 800467e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004682:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004684:	4646      	mov	r6, r8
 8004686:	9a08      	ldr	r2, [sp, #32]
 8004688:	2101      	movs	r1, #1
 800468a:	441a      	add	r2, r3
 800468c:	4658      	mov	r0, fp
 800468e:	4498      	add	r8, r3
 8004690:	9208      	str	r2, [sp, #32]
 8004692:	f000 fc21 	bl	8004ed8 <__i2b>
 8004696:	4605      	mov	r5, r0
 8004698:	b15e      	cbz	r6, 80046b2 <_dtoa_r+0x74a>
 800469a:	9b08      	ldr	r3, [sp, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	dd08      	ble.n	80046b2 <_dtoa_r+0x74a>
 80046a0:	42b3      	cmp	r3, r6
 80046a2:	9a08      	ldr	r2, [sp, #32]
 80046a4:	bfa8      	it	ge
 80046a6:	4633      	movge	r3, r6
 80046a8:	eba8 0803 	sub.w	r8, r8, r3
 80046ac:	1af6      	subs	r6, r6, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	9308      	str	r3, [sp, #32]
 80046b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046b4:	b1f3      	cbz	r3, 80046f4 <_dtoa_r+0x78c>
 80046b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80b7 	beq.w	800482c <_dtoa_r+0x8c4>
 80046be:	b18c      	cbz	r4, 80046e4 <_dtoa_r+0x77c>
 80046c0:	4629      	mov	r1, r5
 80046c2:	4622      	mov	r2, r4
 80046c4:	4658      	mov	r0, fp
 80046c6:	f000 fcc7 	bl	8005058 <__pow5mult>
 80046ca:	464a      	mov	r2, r9
 80046cc:	4601      	mov	r1, r0
 80046ce:	4605      	mov	r5, r0
 80046d0:	4658      	mov	r0, fp
 80046d2:	f000 fc17 	bl	8004f04 <__multiply>
 80046d6:	4649      	mov	r1, r9
 80046d8:	9004      	str	r0, [sp, #16]
 80046da:	4658      	mov	r0, fp
 80046dc:	f000 fb48 	bl	8004d70 <_Bfree>
 80046e0:	9b04      	ldr	r3, [sp, #16]
 80046e2:	4699      	mov	r9, r3
 80046e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046e6:	1b1a      	subs	r2, r3, r4
 80046e8:	d004      	beq.n	80046f4 <_dtoa_r+0x78c>
 80046ea:	4649      	mov	r1, r9
 80046ec:	4658      	mov	r0, fp
 80046ee:	f000 fcb3 	bl	8005058 <__pow5mult>
 80046f2:	4681      	mov	r9, r0
 80046f4:	2101      	movs	r1, #1
 80046f6:	4658      	mov	r0, fp
 80046f8:	f000 fbee 	bl	8004ed8 <__i2b>
 80046fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046fe:	4604      	mov	r4, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 81cf 	beq.w	8004aa4 <_dtoa_r+0xb3c>
 8004706:	461a      	mov	r2, r3
 8004708:	4601      	mov	r1, r0
 800470a:	4658      	mov	r0, fp
 800470c:	f000 fca4 	bl	8005058 <__pow5mult>
 8004710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004712:	2b01      	cmp	r3, #1
 8004714:	4604      	mov	r4, r0
 8004716:	f300 8095 	bgt.w	8004844 <_dtoa_r+0x8dc>
 800471a:	9b02      	ldr	r3, [sp, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8087 	bne.w	8004830 <_dtoa_r+0x8c8>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 8089 	bne.w	8004840 <_dtoa_r+0x8d8>
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004734:	0d1b      	lsrs	r3, r3, #20
 8004736:	051b      	lsls	r3, r3, #20
 8004738:	b12b      	cbz	r3, 8004746 <_dtoa_r+0x7de>
 800473a:	9b08      	ldr	r3, [sp, #32]
 800473c:	3301      	adds	r3, #1
 800473e:	9308      	str	r3, [sp, #32]
 8004740:	f108 0801 	add.w	r8, r8, #1
 8004744:	2301      	movs	r3, #1
 8004746:	930a      	str	r3, [sp, #40]	@ 0x28
 8004748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 81b0 	beq.w	8004ab0 <_dtoa_r+0xb48>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004756:	6918      	ldr	r0, [r3, #16]
 8004758:	f000 fb72 	bl	8004e40 <__hi0bits>
 800475c:	f1c0 0020 	rsb	r0, r0, #32
 8004760:	9b08      	ldr	r3, [sp, #32]
 8004762:	4418      	add	r0, r3
 8004764:	f010 001f 	ands.w	r0, r0, #31
 8004768:	d077      	beq.n	800485a <_dtoa_r+0x8f2>
 800476a:	f1c0 0320 	rsb	r3, r0, #32
 800476e:	2b04      	cmp	r3, #4
 8004770:	dd6b      	ble.n	800484a <_dtoa_r+0x8e2>
 8004772:	9b08      	ldr	r3, [sp, #32]
 8004774:	f1c0 001c 	rsb	r0, r0, #28
 8004778:	4403      	add	r3, r0
 800477a:	4480      	add	r8, r0
 800477c:	4406      	add	r6, r0
 800477e:	9308      	str	r3, [sp, #32]
 8004780:	f1b8 0f00 	cmp.w	r8, #0
 8004784:	dd05      	ble.n	8004792 <_dtoa_r+0x82a>
 8004786:	4649      	mov	r1, r9
 8004788:	4642      	mov	r2, r8
 800478a:	4658      	mov	r0, fp
 800478c:	f000 fcbe 	bl	800510c <__lshift>
 8004790:	4681      	mov	r9, r0
 8004792:	9b08      	ldr	r3, [sp, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dd05      	ble.n	80047a4 <_dtoa_r+0x83c>
 8004798:	4621      	mov	r1, r4
 800479a:	461a      	mov	r2, r3
 800479c:	4658      	mov	r0, fp
 800479e:	f000 fcb5 	bl	800510c <__lshift>
 80047a2:	4604      	mov	r4, r0
 80047a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d059      	beq.n	800485e <_dtoa_r+0x8f6>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4648      	mov	r0, r9
 80047ae:	f000 fd19 	bl	80051e4 <__mcmp>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	da53      	bge.n	800485e <_dtoa_r+0x8f6>
 80047b6:	1e7b      	subs	r3, r7, #1
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	4649      	mov	r1, r9
 80047bc:	2300      	movs	r3, #0
 80047be:	220a      	movs	r2, #10
 80047c0:	4658      	mov	r0, fp
 80047c2:	f000 faf7 	bl	8004db4 <__multadd>
 80047c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047c8:	4681      	mov	r9, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8172 	beq.w	8004ab4 <_dtoa_r+0xb4c>
 80047d0:	2300      	movs	r3, #0
 80047d2:	4629      	mov	r1, r5
 80047d4:	220a      	movs	r2, #10
 80047d6:	4658      	mov	r0, fp
 80047d8:	f000 faec 	bl	8004db4 <__multadd>
 80047dc:	9b00      	ldr	r3, [sp, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	4605      	mov	r5, r0
 80047e2:	dc67      	bgt.n	80048b4 <_dtoa_r+0x94c>
 80047e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	dc41      	bgt.n	800486e <_dtoa_r+0x906>
 80047ea:	e063      	b.n	80048b4 <_dtoa_r+0x94c>
 80047ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80047f2:	e746      	b.n	8004682 <_dtoa_r+0x71a>
 80047f4:	9b07      	ldr	r3, [sp, #28]
 80047f6:	1e5c      	subs	r4, r3, #1
 80047f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	bfbf      	itttt	lt
 80047fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004800:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004802:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004804:	1ae3      	sublt	r3, r4, r3
 8004806:	bfb4      	ite	lt
 8004808:	18d2      	addlt	r2, r2, r3
 800480a:	1b1c      	subge	r4, r3, r4
 800480c:	9b07      	ldr	r3, [sp, #28]
 800480e:	bfbc      	itt	lt
 8004810:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004812:	2400      	movlt	r4, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	bfb5      	itete	lt
 8004818:	eba8 0603 	sublt.w	r6, r8, r3
 800481c:	9b07      	ldrge	r3, [sp, #28]
 800481e:	2300      	movlt	r3, #0
 8004820:	4646      	movge	r6, r8
 8004822:	e730      	b.n	8004686 <_dtoa_r+0x71e>
 8004824:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004826:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004828:	4646      	mov	r6, r8
 800482a:	e735      	b.n	8004698 <_dtoa_r+0x730>
 800482c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800482e:	e75c      	b.n	80046ea <_dtoa_r+0x782>
 8004830:	2300      	movs	r3, #0
 8004832:	e788      	b.n	8004746 <_dtoa_r+0x7de>
 8004834:	3fe00000 	.word	0x3fe00000
 8004838:	40240000 	.word	0x40240000
 800483c:	40140000 	.word	0x40140000
 8004840:	9b02      	ldr	r3, [sp, #8]
 8004842:	e780      	b.n	8004746 <_dtoa_r+0x7de>
 8004844:	2300      	movs	r3, #0
 8004846:	930a      	str	r3, [sp, #40]	@ 0x28
 8004848:	e782      	b.n	8004750 <_dtoa_r+0x7e8>
 800484a:	d099      	beq.n	8004780 <_dtoa_r+0x818>
 800484c:	9a08      	ldr	r2, [sp, #32]
 800484e:	331c      	adds	r3, #28
 8004850:	441a      	add	r2, r3
 8004852:	4498      	add	r8, r3
 8004854:	441e      	add	r6, r3
 8004856:	9208      	str	r2, [sp, #32]
 8004858:	e792      	b.n	8004780 <_dtoa_r+0x818>
 800485a:	4603      	mov	r3, r0
 800485c:	e7f6      	b.n	800484c <_dtoa_r+0x8e4>
 800485e:	9b07      	ldr	r3, [sp, #28]
 8004860:	9704      	str	r7, [sp, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	dc20      	bgt.n	80048a8 <_dtoa_r+0x940>
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800486a:	2b02      	cmp	r3, #2
 800486c:	dd1e      	ble.n	80048ac <_dtoa_r+0x944>
 800486e:	9b00      	ldr	r3, [sp, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f aec0 	bne.w	80045f6 <_dtoa_r+0x68e>
 8004876:	4621      	mov	r1, r4
 8004878:	2205      	movs	r2, #5
 800487a:	4658      	mov	r0, fp
 800487c:	f000 fa9a 	bl	8004db4 <__multadd>
 8004880:	4601      	mov	r1, r0
 8004882:	4604      	mov	r4, r0
 8004884:	4648      	mov	r0, r9
 8004886:	f000 fcad 	bl	80051e4 <__mcmp>
 800488a:	2800      	cmp	r0, #0
 800488c:	f77f aeb3 	ble.w	80045f6 <_dtoa_r+0x68e>
 8004890:	4656      	mov	r6, sl
 8004892:	2331      	movs	r3, #49	@ 0x31
 8004894:	f806 3b01 	strb.w	r3, [r6], #1
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	3301      	adds	r3, #1
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	e6ae      	b.n	80045fe <_dtoa_r+0x696>
 80048a0:	9c07      	ldr	r4, [sp, #28]
 80048a2:	9704      	str	r7, [sp, #16]
 80048a4:	4625      	mov	r5, r4
 80048a6:	e7f3      	b.n	8004890 <_dtoa_r+0x928>
 80048a8:	9b07      	ldr	r3, [sp, #28]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8104 	beq.w	8004abc <_dtoa_r+0xb54>
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	dd05      	ble.n	80048c4 <_dtoa_r+0x95c>
 80048b8:	4629      	mov	r1, r5
 80048ba:	4632      	mov	r2, r6
 80048bc:	4658      	mov	r0, fp
 80048be:	f000 fc25 	bl	800510c <__lshift>
 80048c2:	4605      	mov	r5, r0
 80048c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d05a      	beq.n	8004980 <_dtoa_r+0xa18>
 80048ca:	6869      	ldr	r1, [r5, #4]
 80048cc:	4658      	mov	r0, fp
 80048ce:	f000 fa0f 	bl	8004cf0 <_Balloc>
 80048d2:	4606      	mov	r6, r0
 80048d4:	b928      	cbnz	r0, 80048e2 <_dtoa_r+0x97a>
 80048d6:	4b84      	ldr	r3, [pc, #528]	@ (8004ae8 <_dtoa_r+0xb80>)
 80048d8:	4602      	mov	r2, r0
 80048da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80048de:	f7ff bb5a 	b.w	8003f96 <_dtoa_r+0x2e>
 80048e2:	692a      	ldr	r2, [r5, #16]
 80048e4:	3202      	adds	r2, #2
 80048e6:	0092      	lsls	r2, r2, #2
 80048e8:	f105 010c 	add.w	r1, r5, #12
 80048ec:	300c      	adds	r0, #12
 80048ee:	f000 ffaf 	bl	8005850 <memcpy>
 80048f2:	2201      	movs	r2, #1
 80048f4:	4631      	mov	r1, r6
 80048f6:	4658      	mov	r0, fp
 80048f8:	f000 fc08 	bl	800510c <__lshift>
 80048fc:	f10a 0301 	add.w	r3, sl, #1
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	9b00      	ldr	r3, [sp, #0]
 8004904:	4453      	add	r3, sl
 8004906:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004908:	9b02      	ldr	r3, [sp, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	462f      	mov	r7, r5
 8004910:	930a      	str	r3, [sp, #40]	@ 0x28
 8004912:	4605      	mov	r5, r0
 8004914:	9b07      	ldr	r3, [sp, #28]
 8004916:	4621      	mov	r1, r4
 8004918:	3b01      	subs	r3, #1
 800491a:	4648      	mov	r0, r9
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	f7ff fa98 	bl	8003e52 <quorem>
 8004922:	4639      	mov	r1, r7
 8004924:	9002      	str	r0, [sp, #8]
 8004926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800492a:	4648      	mov	r0, r9
 800492c:	f000 fc5a 	bl	80051e4 <__mcmp>
 8004930:	462a      	mov	r2, r5
 8004932:	9008      	str	r0, [sp, #32]
 8004934:	4621      	mov	r1, r4
 8004936:	4658      	mov	r0, fp
 8004938:	f000 fc70 	bl	800521c <__mdiff>
 800493c:	68c2      	ldr	r2, [r0, #12]
 800493e:	4606      	mov	r6, r0
 8004940:	bb02      	cbnz	r2, 8004984 <_dtoa_r+0xa1c>
 8004942:	4601      	mov	r1, r0
 8004944:	4648      	mov	r0, r9
 8004946:	f000 fc4d 	bl	80051e4 <__mcmp>
 800494a:	4602      	mov	r2, r0
 800494c:	4631      	mov	r1, r6
 800494e:	4658      	mov	r0, fp
 8004950:	920e      	str	r2, [sp, #56]	@ 0x38
 8004952:	f000 fa0d 	bl	8004d70 <_Bfree>
 8004956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800495a:	9e07      	ldr	r6, [sp, #28]
 800495c:	ea43 0102 	orr.w	r1, r3, r2
 8004960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004962:	4319      	orrs	r1, r3
 8004964:	d110      	bne.n	8004988 <_dtoa_r+0xa20>
 8004966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800496a:	d029      	beq.n	80049c0 <_dtoa_r+0xa58>
 800496c:	9b08      	ldr	r3, [sp, #32]
 800496e:	2b00      	cmp	r3, #0
 8004970:	dd02      	ble.n	8004978 <_dtoa_r+0xa10>
 8004972:	9b02      	ldr	r3, [sp, #8]
 8004974:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004978:	9b00      	ldr	r3, [sp, #0]
 800497a:	f883 8000 	strb.w	r8, [r3]
 800497e:	e63f      	b.n	8004600 <_dtoa_r+0x698>
 8004980:	4628      	mov	r0, r5
 8004982:	e7bb      	b.n	80048fc <_dtoa_r+0x994>
 8004984:	2201      	movs	r2, #1
 8004986:	e7e1      	b.n	800494c <_dtoa_r+0x9e4>
 8004988:	9b08      	ldr	r3, [sp, #32]
 800498a:	2b00      	cmp	r3, #0
 800498c:	db04      	blt.n	8004998 <_dtoa_r+0xa30>
 800498e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004990:	430b      	orrs	r3, r1
 8004992:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004994:	430b      	orrs	r3, r1
 8004996:	d120      	bne.n	80049da <_dtoa_r+0xa72>
 8004998:	2a00      	cmp	r2, #0
 800499a:	dded      	ble.n	8004978 <_dtoa_r+0xa10>
 800499c:	4649      	mov	r1, r9
 800499e:	2201      	movs	r2, #1
 80049a0:	4658      	mov	r0, fp
 80049a2:	f000 fbb3 	bl	800510c <__lshift>
 80049a6:	4621      	mov	r1, r4
 80049a8:	4681      	mov	r9, r0
 80049aa:	f000 fc1b 	bl	80051e4 <__mcmp>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	dc03      	bgt.n	80049ba <_dtoa_r+0xa52>
 80049b2:	d1e1      	bne.n	8004978 <_dtoa_r+0xa10>
 80049b4:	f018 0f01 	tst.w	r8, #1
 80049b8:	d0de      	beq.n	8004978 <_dtoa_r+0xa10>
 80049ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049be:	d1d8      	bne.n	8004972 <_dtoa_r+0xa0a>
 80049c0:	9a00      	ldr	r2, [sp, #0]
 80049c2:	2339      	movs	r3, #57	@ 0x39
 80049c4:	7013      	strb	r3, [r2, #0]
 80049c6:	4633      	mov	r3, r6
 80049c8:	461e      	mov	r6, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80049d0:	2a39      	cmp	r2, #57	@ 0x39
 80049d2:	d052      	beq.n	8004a7a <_dtoa_r+0xb12>
 80049d4:	3201      	adds	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e612      	b.n	8004600 <_dtoa_r+0x698>
 80049da:	2a00      	cmp	r2, #0
 80049dc:	dd07      	ble.n	80049ee <_dtoa_r+0xa86>
 80049de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049e2:	d0ed      	beq.n	80049c0 <_dtoa_r+0xa58>
 80049e4:	9a00      	ldr	r2, [sp, #0]
 80049e6:	f108 0301 	add.w	r3, r8, #1
 80049ea:	7013      	strb	r3, [r2, #0]
 80049ec:	e608      	b.n	8004600 <_dtoa_r+0x698>
 80049ee:	9b07      	ldr	r3, [sp, #28]
 80049f0:	9a07      	ldr	r2, [sp, #28]
 80049f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80049f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d028      	beq.n	8004a4e <_dtoa_r+0xae6>
 80049fc:	4649      	mov	r1, r9
 80049fe:	2300      	movs	r3, #0
 8004a00:	220a      	movs	r2, #10
 8004a02:	4658      	mov	r0, fp
 8004a04:	f000 f9d6 	bl	8004db4 <__multadd>
 8004a08:	42af      	cmp	r7, r5
 8004a0a:	4681      	mov	r9, r0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	f04f 020a 	mov.w	r2, #10
 8004a14:	4639      	mov	r1, r7
 8004a16:	4658      	mov	r0, fp
 8004a18:	d107      	bne.n	8004a2a <_dtoa_r+0xac2>
 8004a1a:	f000 f9cb 	bl	8004db4 <__multadd>
 8004a1e:	4607      	mov	r7, r0
 8004a20:	4605      	mov	r5, r0
 8004a22:	9b07      	ldr	r3, [sp, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	9307      	str	r3, [sp, #28]
 8004a28:	e774      	b.n	8004914 <_dtoa_r+0x9ac>
 8004a2a:	f000 f9c3 	bl	8004db4 <__multadd>
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4607      	mov	r7, r0
 8004a32:	2300      	movs	r3, #0
 8004a34:	220a      	movs	r2, #10
 8004a36:	4658      	mov	r0, fp
 8004a38:	f000 f9bc 	bl	8004db4 <__multadd>
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	e7f0      	b.n	8004a22 <_dtoa_r+0xaba>
 8004a40:	9b00      	ldr	r3, [sp, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bfcc      	ite	gt
 8004a46:	461e      	movgt	r6, r3
 8004a48:	2601      	movle	r6, #1
 8004a4a:	4456      	add	r6, sl
 8004a4c:	2700      	movs	r7, #0
 8004a4e:	4649      	mov	r1, r9
 8004a50:	2201      	movs	r2, #1
 8004a52:	4658      	mov	r0, fp
 8004a54:	f000 fb5a 	bl	800510c <__lshift>
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4681      	mov	r9, r0
 8004a5c:	f000 fbc2 	bl	80051e4 <__mcmp>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	dcb0      	bgt.n	80049c6 <_dtoa_r+0xa5e>
 8004a64:	d102      	bne.n	8004a6c <_dtoa_r+0xb04>
 8004a66:	f018 0f01 	tst.w	r8, #1
 8004a6a:	d1ac      	bne.n	80049c6 <_dtoa_r+0xa5e>
 8004a6c:	4633      	mov	r3, r6
 8004a6e:	461e      	mov	r6, r3
 8004a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a74:	2a30      	cmp	r2, #48	@ 0x30
 8004a76:	d0fa      	beq.n	8004a6e <_dtoa_r+0xb06>
 8004a78:	e5c2      	b.n	8004600 <_dtoa_r+0x698>
 8004a7a:	459a      	cmp	sl, r3
 8004a7c:	d1a4      	bne.n	80049c8 <_dtoa_r+0xa60>
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	2331      	movs	r3, #49	@ 0x31
 8004a86:	f88a 3000 	strb.w	r3, [sl]
 8004a8a:	e5b9      	b.n	8004600 <_dtoa_r+0x698>
 8004a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004aec <_dtoa_r+0xb84>
 8004a92:	b11b      	cbz	r3, 8004a9c <_dtoa_r+0xb34>
 8004a94:	f10a 0308 	add.w	r3, sl, #8
 8004a98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4650      	mov	r0, sl
 8004a9e:	b019      	add	sp, #100	@ 0x64
 8004aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	f77f ae37 	ble.w	800471a <_dtoa_r+0x7b2>
 8004aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	e655      	b.n	8004760 <_dtoa_r+0x7f8>
 8004ab4:	9b00      	ldr	r3, [sp, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f77f aed6 	ble.w	8004868 <_dtoa_r+0x900>
 8004abc:	4656      	mov	r6, sl
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4648      	mov	r0, r9
 8004ac2:	f7ff f9c6 	bl	8003e52 <quorem>
 8004ac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004aca:	f806 8b01 	strb.w	r8, [r6], #1
 8004ace:	9b00      	ldr	r3, [sp, #0]
 8004ad0:	eba6 020a 	sub.w	r2, r6, sl
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	ddb3      	ble.n	8004a40 <_dtoa_r+0xad8>
 8004ad8:	4649      	mov	r1, r9
 8004ada:	2300      	movs	r3, #0
 8004adc:	220a      	movs	r2, #10
 8004ade:	4658      	mov	r0, fp
 8004ae0:	f000 f968 	bl	8004db4 <__multadd>
 8004ae4:	4681      	mov	r9, r0
 8004ae6:	e7ea      	b.n	8004abe <_dtoa_r+0xb56>
 8004ae8:	08006407 	.word	0x08006407
 8004aec:	0800638b 	.word	0x0800638b

08004af0 <_free_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4605      	mov	r5, r0
 8004af4:	2900      	cmp	r1, #0
 8004af6:	d041      	beq.n	8004b7c <_free_r+0x8c>
 8004af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afc:	1f0c      	subs	r4, r1, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfb8      	it	lt
 8004b02:	18e4      	addlt	r4, r4, r3
 8004b04:	f000 f8e8 	bl	8004cd8 <__malloc_lock>
 8004b08:	4a1d      	ldr	r2, [pc, #116]	@ (8004b80 <_free_r+0x90>)
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	b933      	cbnz	r3, 8004b1c <_free_r+0x2c>
 8004b0e:	6063      	str	r3, [r4, #4]
 8004b10:	6014      	str	r4, [r2, #0]
 8004b12:	4628      	mov	r0, r5
 8004b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b18:	f000 b8e4 	b.w	8004ce4 <__malloc_unlock>
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	d908      	bls.n	8004b32 <_free_r+0x42>
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	1821      	adds	r1, r4, r0
 8004b24:	428b      	cmp	r3, r1
 8004b26:	bf01      	itttt	eq
 8004b28:	6819      	ldreq	r1, [r3, #0]
 8004b2a:	685b      	ldreq	r3, [r3, #4]
 8004b2c:	1809      	addeq	r1, r1, r0
 8004b2e:	6021      	streq	r1, [r4, #0]
 8004b30:	e7ed      	b.n	8004b0e <_free_r+0x1e>
 8004b32:	461a      	mov	r2, r3
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	b10b      	cbz	r3, 8004b3c <_free_r+0x4c>
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	d9fa      	bls.n	8004b32 <_free_r+0x42>
 8004b3c:	6811      	ldr	r1, [r2, #0]
 8004b3e:	1850      	adds	r0, r2, r1
 8004b40:	42a0      	cmp	r0, r4
 8004b42:	d10b      	bne.n	8004b5c <_free_r+0x6c>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	4401      	add	r1, r0
 8004b48:	1850      	adds	r0, r2, r1
 8004b4a:	4283      	cmp	r3, r0
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	d1e0      	bne.n	8004b12 <_free_r+0x22>
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6053      	str	r3, [r2, #4]
 8004b56:	4408      	add	r0, r1
 8004b58:	6010      	str	r0, [r2, #0]
 8004b5a:	e7da      	b.n	8004b12 <_free_r+0x22>
 8004b5c:	d902      	bls.n	8004b64 <_free_r+0x74>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	e7d6      	b.n	8004b12 <_free_r+0x22>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	1821      	adds	r1, r4, r0
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	bf04      	itt	eq
 8004b6c:	6819      	ldreq	r1, [r3, #0]
 8004b6e:	685b      	ldreq	r3, [r3, #4]
 8004b70:	6063      	str	r3, [r4, #4]
 8004b72:	bf04      	itt	eq
 8004b74:	1809      	addeq	r1, r1, r0
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	6054      	str	r4, [r2, #4]
 8004b7a:	e7ca      	b.n	8004b12 <_free_r+0x22>
 8004b7c:	bd38      	pop	{r3, r4, r5, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000374 	.word	0x20000374

08004b84 <malloc>:
 8004b84:	4b02      	ldr	r3, [pc, #8]	@ (8004b90 <malloc+0xc>)
 8004b86:	4601      	mov	r1, r0
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	f000 b825 	b.w	8004bd8 <_malloc_r>
 8004b8e:	bf00      	nop
 8004b90:	2000001c 	.word	0x2000001c

08004b94 <sbrk_aligned>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	4e0f      	ldr	r6, [pc, #60]	@ (8004bd4 <sbrk_aligned+0x40>)
 8004b98:	460c      	mov	r4, r1
 8004b9a:	6831      	ldr	r1, [r6, #0]
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	b911      	cbnz	r1, 8004ba6 <sbrk_aligned+0x12>
 8004ba0:	f000 fe46 	bl	8005830 <_sbrk_r>
 8004ba4:	6030      	str	r0, [r6, #0]
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 fe41 	bl	8005830 <_sbrk_r>
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	d103      	bne.n	8004bba <sbrk_aligned+0x26>
 8004bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	1cc4      	adds	r4, r0, #3
 8004bbc:	f024 0403 	bic.w	r4, r4, #3
 8004bc0:	42a0      	cmp	r0, r4
 8004bc2:	d0f8      	beq.n	8004bb6 <sbrk_aligned+0x22>
 8004bc4:	1a21      	subs	r1, r4, r0
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 fe32 	bl	8005830 <_sbrk_r>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d1f2      	bne.n	8004bb6 <sbrk_aligned+0x22>
 8004bd0:	e7ef      	b.n	8004bb2 <sbrk_aligned+0x1e>
 8004bd2:	bf00      	nop
 8004bd4:	20000370 	.word	0x20000370

08004bd8 <_malloc_r>:
 8004bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bdc:	1ccd      	adds	r5, r1, #3
 8004bde:	f025 0503 	bic.w	r5, r5, #3
 8004be2:	3508      	adds	r5, #8
 8004be4:	2d0c      	cmp	r5, #12
 8004be6:	bf38      	it	cc
 8004be8:	250c      	movcc	r5, #12
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	4606      	mov	r6, r0
 8004bee:	db01      	blt.n	8004bf4 <_malloc_r+0x1c>
 8004bf0:	42a9      	cmp	r1, r5
 8004bf2:	d904      	bls.n	8004bfe <_malloc_r+0x26>
 8004bf4:	230c      	movs	r3, #12
 8004bf6:	6033      	str	r3, [r6, #0]
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cd4 <_malloc_r+0xfc>
 8004c02:	f000 f869 	bl	8004cd8 <__malloc_lock>
 8004c06:	f8d8 3000 	ldr.w	r3, [r8]
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	bb44      	cbnz	r4, 8004c60 <_malloc_r+0x88>
 8004c0e:	4629      	mov	r1, r5
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7ff ffbf 	bl	8004b94 <sbrk_aligned>
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	4604      	mov	r4, r0
 8004c1a:	d158      	bne.n	8004cce <_malloc_r+0xf6>
 8004c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c20:	4627      	mov	r7, r4
 8004c22:	2f00      	cmp	r7, #0
 8004c24:	d143      	bne.n	8004cae <_malloc_r+0xd6>
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	d04b      	beq.n	8004cc2 <_malloc_r+0xea>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	4630      	mov	r0, r6
 8004c30:	eb04 0903 	add.w	r9, r4, r3
 8004c34:	f000 fdfc 	bl	8005830 <_sbrk_r>
 8004c38:	4581      	cmp	r9, r0
 8004c3a:	d142      	bne.n	8004cc2 <_malloc_r+0xea>
 8004c3c:	6821      	ldr	r1, [r4, #0]
 8004c3e:	1a6d      	subs	r5, r5, r1
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7ff ffa6 	bl	8004b94 <sbrk_aligned>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d03a      	beq.n	8004cc2 <_malloc_r+0xea>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	442b      	add	r3, r5
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	f8d8 3000 	ldr.w	r3, [r8]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	bb62      	cbnz	r2, 8004cb4 <_malloc_r+0xdc>
 8004c5a:	f8c8 7000 	str.w	r7, [r8]
 8004c5e:	e00f      	b.n	8004c80 <_malloc_r+0xa8>
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	1b52      	subs	r2, r2, r5
 8004c64:	d420      	bmi.n	8004ca8 <_malloc_r+0xd0>
 8004c66:	2a0b      	cmp	r2, #11
 8004c68:	d917      	bls.n	8004c9a <_malloc_r+0xc2>
 8004c6a:	1961      	adds	r1, r4, r5
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	6025      	str	r5, [r4, #0]
 8004c70:	bf18      	it	ne
 8004c72:	6059      	strne	r1, [r3, #4]
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	bf08      	it	eq
 8004c78:	f8c8 1000 	streq.w	r1, [r8]
 8004c7c:	5162      	str	r2, [r4, r5]
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f82f 	bl	8004ce4 <__malloc_unlock>
 8004c86:	f104 000b 	add.w	r0, r4, #11
 8004c8a:	1d23      	adds	r3, r4, #4
 8004c8c:	f020 0007 	bic.w	r0, r0, #7
 8004c90:	1ac2      	subs	r2, r0, r3
 8004c92:	bf1c      	itt	ne
 8004c94:	1a1b      	subne	r3, r3, r0
 8004c96:	50a3      	strne	r3, [r4, r2]
 8004c98:	e7af      	b.n	8004bfa <_malloc_r+0x22>
 8004c9a:	6862      	ldr	r2, [r4, #4]
 8004c9c:	42a3      	cmp	r3, r4
 8004c9e:	bf0c      	ite	eq
 8004ca0:	f8c8 2000 	streq.w	r2, [r8]
 8004ca4:	605a      	strne	r2, [r3, #4]
 8004ca6:	e7eb      	b.n	8004c80 <_malloc_r+0xa8>
 8004ca8:	4623      	mov	r3, r4
 8004caa:	6864      	ldr	r4, [r4, #4]
 8004cac:	e7ae      	b.n	8004c0c <_malloc_r+0x34>
 8004cae:	463c      	mov	r4, r7
 8004cb0:	687f      	ldr	r7, [r7, #4]
 8004cb2:	e7b6      	b.n	8004c22 <_malloc_r+0x4a>
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	d1fb      	bne.n	8004cb4 <_malloc_r+0xdc>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	6053      	str	r3, [r2, #4]
 8004cc0:	e7de      	b.n	8004c80 <_malloc_r+0xa8>
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f000 f80c 	bl	8004ce4 <__malloc_unlock>
 8004ccc:	e794      	b.n	8004bf8 <_malloc_r+0x20>
 8004cce:	6005      	str	r5, [r0, #0]
 8004cd0:	e7d6      	b.n	8004c80 <_malloc_r+0xa8>
 8004cd2:	bf00      	nop
 8004cd4:	20000374 	.word	0x20000374

08004cd8 <__malloc_lock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	@ (8004ce0 <__malloc_lock+0x8>)
 8004cda:	f7ff b8b8 	b.w	8003e4e <__retarget_lock_acquire_recursive>
 8004cde:	bf00      	nop
 8004ce0:	2000036c 	.word	0x2000036c

08004ce4 <__malloc_unlock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	@ (8004cec <__malloc_unlock+0x8>)
 8004ce6:	f7ff b8b3 	b.w	8003e50 <__retarget_lock_release_recursive>
 8004cea:	bf00      	nop
 8004cec:	2000036c 	.word	0x2000036c

08004cf0 <_Balloc>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	69c6      	ldr	r6, [r0, #28]
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	b976      	cbnz	r6, 8004d18 <_Balloc+0x28>
 8004cfa:	2010      	movs	r0, #16
 8004cfc:	f7ff ff42 	bl	8004b84 <malloc>
 8004d00:	4602      	mov	r2, r0
 8004d02:	61e0      	str	r0, [r4, #28]
 8004d04:	b920      	cbnz	r0, 8004d10 <_Balloc+0x20>
 8004d06:	4b18      	ldr	r3, [pc, #96]	@ (8004d68 <_Balloc+0x78>)
 8004d08:	4818      	ldr	r0, [pc, #96]	@ (8004d6c <_Balloc+0x7c>)
 8004d0a:	216b      	movs	r1, #107	@ 0x6b
 8004d0c:	f000 fdae 	bl	800586c <__assert_func>
 8004d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d14:	6006      	str	r6, [r0, #0]
 8004d16:	60c6      	str	r6, [r0, #12]
 8004d18:	69e6      	ldr	r6, [r4, #28]
 8004d1a:	68f3      	ldr	r3, [r6, #12]
 8004d1c:	b183      	cbz	r3, 8004d40 <_Balloc+0x50>
 8004d1e:	69e3      	ldr	r3, [r4, #28]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d26:	b9b8      	cbnz	r0, 8004d58 <_Balloc+0x68>
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8004d2e:	1d72      	adds	r2, r6, #5
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	4620      	mov	r0, r4
 8004d34:	f000 fdb8 	bl	80058a8 <_calloc_r>
 8004d38:	b160      	cbz	r0, 8004d54 <_Balloc+0x64>
 8004d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d3e:	e00e      	b.n	8004d5e <_Balloc+0x6e>
 8004d40:	2221      	movs	r2, #33	@ 0x21
 8004d42:	2104      	movs	r1, #4
 8004d44:	4620      	mov	r0, r4
 8004d46:	f000 fdaf 	bl	80058a8 <_calloc_r>
 8004d4a:	69e3      	ldr	r3, [r4, #28]
 8004d4c:	60f0      	str	r0, [r6, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e4      	bne.n	8004d1e <_Balloc+0x2e>
 8004d54:	2000      	movs	r0, #0
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	6802      	ldr	r2, [r0, #0]
 8004d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d64:	e7f7      	b.n	8004d56 <_Balloc+0x66>
 8004d66:	bf00      	nop
 8004d68:	08006398 	.word	0x08006398
 8004d6c:	08006418 	.word	0x08006418

08004d70 <_Bfree>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	69c6      	ldr	r6, [r0, #28]
 8004d74:	4605      	mov	r5, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	b976      	cbnz	r6, 8004d98 <_Bfree+0x28>
 8004d7a:	2010      	movs	r0, #16
 8004d7c:	f7ff ff02 	bl	8004b84 <malloc>
 8004d80:	4602      	mov	r2, r0
 8004d82:	61e8      	str	r0, [r5, #28]
 8004d84:	b920      	cbnz	r0, 8004d90 <_Bfree+0x20>
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <_Bfree+0x3c>)
 8004d88:	4809      	ldr	r0, [pc, #36]	@ (8004db0 <_Bfree+0x40>)
 8004d8a:	218f      	movs	r1, #143	@ 0x8f
 8004d8c:	f000 fd6e 	bl	800586c <__assert_func>
 8004d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d94:	6006      	str	r6, [r0, #0]
 8004d96:	60c6      	str	r6, [r0, #12]
 8004d98:	b13c      	cbz	r4, 8004daa <_Bfree+0x3a>
 8004d9a:	69eb      	ldr	r3, [r5, #28]
 8004d9c:	6862      	ldr	r2, [r4, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004da4:	6021      	str	r1, [r4, #0]
 8004da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	08006398 	.word	0x08006398
 8004db0:	08006418 	.word	0x08006418

08004db4 <__multadd>:
 8004db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db8:	690d      	ldr	r5, [r1, #16]
 8004dba:	4607      	mov	r7, r0
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	461e      	mov	r6, r3
 8004dc0:	f101 0c14 	add.w	ip, r1, #20
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8004dca:	b299      	uxth	r1, r3
 8004dcc:	fb02 6101 	mla	r1, r2, r1, r6
 8004dd0:	0c1e      	lsrs	r6, r3, #16
 8004dd2:	0c0b      	lsrs	r3, r1, #16
 8004dd4:	fb02 3306 	mla	r3, r2, r6, r3
 8004dd8:	b289      	uxth	r1, r1
 8004dda:	3001      	adds	r0, #1
 8004ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004de0:	4285      	cmp	r5, r0
 8004de2:	f84c 1b04 	str.w	r1, [ip], #4
 8004de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004dea:	dcec      	bgt.n	8004dc6 <__multadd+0x12>
 8004dec:	b30e      	cbz	r6, 8004e32 <__multadd+0x7e>
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	42ab      	cmp	r3, r5
 8004df2:	dc19      	bgt.n	8004e28 <__multadd+0x74>
 8004df4:	6861      	ldr	r1, [r4, #4]
 8004df6:	4638      	mov	r0, r7
 8004df8:	3101      	adds	r1, #1
 8004dfa:	f7ff ff79 	bl	8004cf0 <_Balloc>
 8004dfe:	4680      	mov	r8, r0
 8004e00:	b928      	cbnz	r0, 8004e0e <__multadd+0x5a>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <__multadd+0x84>)
 8004e06:	480d      	ldr	r0, [pc, #52]	@ (8004e3c <__multadd+0x88>)
 8004e08:	21ba      	movs	r1, #186	@ 0xba
 8004e0a:	f000 fd2f 	bl	800586c <__assert_func>
 8004e0e:	6922      	ldr	r2, [r4, #16]
 8004e10:	3202      	adds	r2, #2
 8004e12:	f104 010c 	add.w	r1, r4, #12
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	300c      	adds	r0, #12
 8004e1a:	f000 fd19 	bl	8005850 <memcpy>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ffa5 	bl	8004d70 <_Bfree>
 8004e26:	4644      	mov	r4, r8
 8004e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	615e      	str	r6, [r3, #20]
 8004e30:	6125      	str	r5, [r4, #16]
 8004e32:	4620      	mov	r0, r4
 8004e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e38:	08006407 	.word	0x08006407
 8004e3c:	08006418 	.word	0x08006418

08004e40 <__hi0bits>:
 8004e40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004e44:	4603      	mov	r3, r0
 8004e46:	bf36      	itet	cc
 8004e48:	0403      	lslcc	r3, r0, #16
 8004e4a:	2000      	movcs	r0, #0
 8004e4c:	2010      	movcc	r0, #16
 8004e4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e52:	bf3c      	itt	cc
 8004e54:	021b      	lslcc	r3, r3, #8
 8004e56:	3008      	addcc	r0, #8
 8004e58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e5c:	bf3c      	itt	cc
 8004e5e:	011b      	lslcc	r3, r3, #4
 8004e60:	3004      	addcc	r0, #4
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e66:	bf3c      	itt	cc
 8004e68:	009b      	lslcc	r3, r3, #2
 8004e6a:	3002      	addcc	r0, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db05      	blt.n	8004e7c <__hi0bits+0x3c>
 8004e70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004e74:	f100 0001 	add.w	r0, r0, #1
 8004e78:	bf08      	it	eq
 8004e7a:	2020      	moveq	r0, #32
 8004e7c:	4770      	bx	lr

08004e7e <__lo0bits>:
 8004e7e:	6803      	ldr	r3, [r0, #0]
 8004e80:	4602      	mov	r2, r0
 8004e82:	f013 0007 	ands.w	r0, r3, #7
 8004e86:	d00b      	beq.n	8004ea0 <__lo0bits+0x22>
 8004e88:	07d9      	lsls	r1, r3, #31
 8004e8a:	d421      	bmi.n	8004ed0 <__lo0bits+0x52>
 8004e8c:	0798      	lsls	r0, r3, #30
 8004e8e:	bf49      	itett	mi
 8004e90:	085b      	lsrmi	r3, r3, #1
 8004e92:	089b      	lsrpl	r3, r3, #2
 8004e94:	2001      	movmi	r0, #1
 8004e96:	6013      	strmi	r3, [r2, #0]
 8004e98:	bf5c      	itt	pl
 8004e9a:	6013      	strpl	r3, [r2, #0]
 8004e9c:	2002      	movpl	r0, #2
 8004e9e:	4770      	bx	lr
 8004ea0:	b299      	uxth	r1, r3
 8004ea2:	b909      	cbnz	r1, 8004ea8 <__lo0bits+0x2a>
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	2010      	movs	r0, #16
 8004ea8:	b2d9      	uxtb	r1, r3
 8004eaa:	b909      	cbnz	r1, 8004eb0 <__lo0bits+0x32>
 8004eac:	3008      	adds	r0, #8
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	0719      	lsls	r1, r3, #28
 8004eb2:	bf04      	itt	eq
 8004eb4:	091b      	lsreq	r3, r3, #4
 8004eb6:	3004      	addeq	r0, #4
 8004eb8:	0799      	lsls	r1, r3, #30
 8004eba:	bf04      	itt	eq
 8004ebc:	089b      	lsreq	r3, r3, #2
 8004ebe:	3002      	addeq	r0, #2
 8004ec0:	07d9      	lsls	r1, r3, #31
 8004ec2:	d403      	bmi.n	8004ecc <__lo0bits+0x4e>
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	f100 0001 	add.w	r0, r0, #1
 8004eca:	d003      	beq.n	8004ed4 <__lo0bits+0x56>
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	4770      	bx	lr
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	4770      	bx	lr
 8004ed4:	2020      	movs	r0, #32
 8004ed6:	4770      	bx	lr

08004ed8 <__i2b>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	2101      	movs	r1, #1
 8004ede:	f7ff ff07 	bl	8004cf0 <_Balloc>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	b928      	cbnz	r0, 8004ef2 <__i2b+0x1a>
 8004ee6:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <__i2b+0x24>)
 8004ee8:	4805      	ldr	r0, [pc, #20]	@ (8004f00 <__i2b+0x28>)
 8004eea:	f240 1145 	movw	r1, #325	@ 0x145
 8004eee:	f000 fcbd 	bl	800586c <__assert_func>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	6144      	str	r4, [r0, #20]
 8004ef6:	6103      	str	r3, [r0, #16]
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	bf00      	nop
 8004efc:	08006407 	.word	0x08006407
 8004f00:	08006418 	.word	0x08006418

08004f04 <__multiply>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4614      	mov	r4, r2
 8004f0a:	690a      	ldr	r2, [r1, #16]
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	bfa8      	it	ge
 8004f12:	4623      	movge	r3, r4
 8004f14:	460f      	mov	r7, r1
 8004f16:	bfa4      	itt	ge
 8004f18:	460c      	movge	r4, r1
 8004f1a:	461f      	movge	r7, r3
 8004f1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004f20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004f24:	68a3      	ldr	r3, [r4, #8]
 8004f26:	6861      	ldr	r1, [r4, #4]
 8004f28:	eb0a 0609 	add.w	r6, sl, r9
 8004f2c:	42b3      	cmp	r3, r6
 8004f2e:	b085      	sub	sp, #20
 8004f30:	bfb8      	it	lt
 8004f32:	3101      	addlt	r1, #1
 8004f34:	f7ff fedc 	bl	8004cf0 <_Balloc>
 8004f38:	b930      	cbnz	r0, 8004f48 <__multiply+0x44>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <__multiply+0x14c>)
 8004f3e:	4845      	ldr	r0, [pc, #276]	@ (8005054 <__multiply+0x150>)
 8004f40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f44:	f000 fc92 	bl	800586c <__assert_func>
 8004f48:	f100 0514 	add.w	r5, r0, #20
 8004f4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f50:	462b      	mov	r3, r5
 8004f52:	2200      	movs	r2, #0
 8004f54:	4543      	cmp	r3, r8
 8004f56:	d321      	bcc.n	8004f9c <__multiply+0x98>
 8004f58:	f107 0114 	add.w	r1, r7, #20
 8004f5c:	f104 0214 	add.w	r2, r4, #20
 8004f60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004f64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004f68:	9302      	str	r3, [sp, #8]
 8004f6a:	1b13      	subs	r3, r2, r4
 8004f6c:	3b15      	subs	r3, #21
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	3304      	adds	r3, #4
 8004f74:	f104 0715 	add.w	r7, r4, #21
 8004f78:	42ba      	cmp	r2, r7
 8004f7a:	bf38      	it	cc
 8004f7c:	2304      	movcc	r3, #4
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	9103      	str	r1, [sp, #12]
 8004f84:	428b      	cmp	r3, r1
 8004f86:	d80c      	bhi.n	8004fa2 <__multiply+0x9e>
 8004f88:	2e00      	cmp	r6, #0
 8004f8a:	dd03      	ble.n	8004f94 <__multiply+0x90>
 8004f8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05b      	beq.n	800504c <__multiply+0x148>
 8004f94:	6106      	str	r6, [r0, #16]
 8004f96:	b005      	add	sp, #20
 8004f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	f843 2b04 	str.w	r2, [r3], #4
 8004fa0:	e7d8      	b.n	8004f54 <__multiply+0x50>
 8004fa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8004fa6:	f1ba 0f00 	cmp.w	sl, #0
 8004faa:	d024      	beq.n	8004ff6 <__multiply+0xf2>
 8004fac:	f104 0e14 	add.w	lr, r4, #20
 8004fb0:	46a9      	mov	r9, r5
 8004fb2:	f04f 0c00 	mov.w	ip, #0
 8004fb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004fba:	f8d9 3000 	ldr.w	r3, [r9]
 8004fbe:	fa1f fb87 	uxth.w	fp, r7
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8004fc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004fcc:	f8d9 7000 	ldr.w	r7, [r9]
 8004fd0:	4463      	add	r3, ip
 8004fd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004fd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8004fda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004fe4:	4572      	cmp	r2, lr
 8004fe6:	f849 3b04 	str.w	r3, [r9], #4
 8004fea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004fee:	d8e2      	bhi.n	8004fb6 <__multiply+0xb2>
 8004ff0:	9b01      	ldr	r3, [sp, #4]
 8004ff2:	f845 c003 	str.w	ip, [r5, r3]
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004ffc:	3104      	adds	r1, #4
 8004ffe:	f1b9 0f00 	cmp.w	r9, #0
 8005002:	d021      	beq.n	8005048 <__multiply+0x144>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	f104 0c14 	add.w	ip, r4, #20
 800500a:	46ae      	mov	lr, r5
 800500c:	f04f 0a00 	mov.w	sl, #0
 8005010:	f8bc b000 	ldrh.w	fp, [ip]
 8005014:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005018:	fb09 770b 	mla	r7, r9, fp, r7
 800501c:	4457      	add	r7, sl
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005024:	f84e 3b04 	str.w	r3, [lr], #4
 8005028:	f85c 3b04 	ldr.w	r3, [ip], #4
 800502c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005030:	f8be 3000 	ldrh.w	r3, [lr]
 8005034:	fb09 330a 	mla	r3, r9, sl, r3
 8005038:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800503c:	4562      	cmp	r2, ip
 800503e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005042:	d8e5      	bhi.n	8005010 <__multiply+0x10c>
 8005044:	9f01      	ldr	r7, [sp, #4]
 8005046:	51eb      	str	r3, [r5, r7]
 8005048:	3504      	adds	r5, #4
 800504a:	e799      	b.n	8004f80 <__multiply+0x7c>
 800504c:	3e01      	subs	r6, #1
 800504e:	e79b      	b.n	8004f88 <__multiply+0x84>
 8005050:	08006407 	.word	0x08006407
 8005054:	08006418 	.word	0x08006418

08005058 <__pow5mult>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4615      	mov	r5, r2
 800505e:	f012 0203 	ands.w	r2, r2, #3
 8005062:	4607      	mov	r7, r0
 8005064:	460e      	mov	r6, r1
 8005066:	d007      	beq.n	8005078 <__pow5mult+0x20>
 8005068:	4c25      	ldr	r4, [pc, #148]	@ (8005100 <__pow5mult+0xa8>)
 800506a:	3a01      	subs	r2, #1
 800506c:	2300      	movs	r3, #0
 800506e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005072:	f7ff fe9f 	bl	8004db4 <__multadd>
 8005076:	4606      	mov	r6, r0
 8005078:	10ad      	asrs	r5, r5, #2
 800507a:	d03d      	beq.n	80050f8 <__pow5mult+0xa0>
 800507c:	69fc      	ldr	r4, [r7, #28]
 800507e:	b97c      	cbnz	r4, 80050a0 <__pow5mult+0x48>
 8005080:	2010      	movs	r0, #16
 8005082:	f7ff fd7f 	bl	8004b84 <malloc>
 8005086:	4602      	mov	r2, r0
 8005088:	61f8      	str	r0, [r7, #28]
 800508a:	b928      	cbnz	r0, 8005098 <__pow5mult+0x40>
 800508c:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <__pow5mult+0xac>)
 800508e:	481e      	ldr	r0, [pc, #120]	@ (8005108 <__pow5mult+0xb0>)
 8005090:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005094:	f000 fbea 	bl	800586c <__assert_func>
 8005098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800509c:	6004      	str	r4, [r0, #0]
 800509e:	60c4      	str	r4, [r0, #12]
 80050a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80050a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050a8:	b94c      	cbnz	r4, 80050be <__pow5mult+0x66>
 80050aa:	f240 2171 	movw	r1, #625	@ 0x271
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7ff ff12 	bl	8004ed8 <__i2b>
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80050ba:	4604      	mov	r4, r0
 80050bc:	6003      	str	r3, [r0, #0]
 80050be:	f04f 0900 	mov.w	r9, #0
 80050c2:	07eb      	lsls	r3, r5, #31
 80050c4:	d50a      	bpl.n	80050dc <__pow5mult+0x84>
 80050c6:	4631      	mov	r1, r6
 80050c8:	4622      	mov	r2, r4
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff ff1a 	bl	8004f04 <__multiply>
 80050d0:	4631      	mov	r1, r6
 80050d2:	4680      	mov	r8, r0
 80050d4:	4638      	mov	r0, r7
 80050d6:	f7ff fe4b 	bl	8004d70 <_Bfree>
 80050da:	4646      	mov	r6, r8
 80050dc:	106d      	asrs	r5, r5, #1
 80050de:	d00b      	beq.n	80050f8 <__pow5mult+0xa0>
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	b938      	cbnz	r0, 80050f4 <__pow5mult+0x9c>
 80050e4:	4622      	mov	r2, r4
 80050e6:	4621      	mov	r1, r4
 80050e8:	4638      	mov	r0, r7
 80050ea:	f7ff ff0b 	bl	8004f04 <__multiply>
 80050ee:	6020      	str	r0, [r4, #0]
 80050f0:	f8c0 9000 	str.w	r9, [r0]
 80050f4:	4604      	mov	r4, r0
 80050f6:	e7e4      	b.n	80050c2 <__pow5mult+0x6a>
 80050f8:	4630      	mov	r0, r6
 80050fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050fe:	bf00      	nop
 8005100:	08006474 	.word	0x08006474
 8005104:	08006398 	.word	0x08006398
 8005108:	08006418 	.word	0x08006418

0800510c <__lshift>:
 800510c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	460c      	mov	r4, r1
 8005112:	6849      	ldr	r1, [r1, #4]
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800511a:	68a3      	ldr	r3, [r4, #8]
 800511c:	4607      	mov	r7, r0
 800511e:	4691      	mov	r9, r2
 8005120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005124:	f108 0601 	add.w	r6, r8, #1
 8005128:	42b3      	cmp	r3, r6
 800512a:	db0b      	blt.n	8005144 <__lshift+0x38>
 800512c:	4638      	mov	r0, r7
 800512e:	f7ff fddf 	bl	8004cf0 <_Balloc>
 8005132:	4605      	mov	r5, r0
 8005134:	b948      	cbnz	r0, 800514a <__lshift+0x3e>
 8005136:	4602      	mov	r2, r0
 8005138:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <__lshift+0xd0>)
 800513a:	4829      	ldr	r0, [pc, #164]	@ (80051e0 <__lshift+0xd4>)
 800513c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005140:	f000 fb94 	bl	800586c <__assert_func>
 8005144:	3101      	adds	r1, #1
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	e7ee      	b.n	8005128 <__lshift+0x1c>
 800514a:	2300      	movs	r3, #0
 800514c:	f100 0114 	add.w	r1, r0, #20
 8005150:	f100 0210 	add.w	r2, r0, #16
 8005154:	4618      	mov	r0, r3
 8005156:	4553      	cmp	r3, sl
 8005158:	db33      	blt.n	80051c2 <__lshift+0xb6>
 800515a:	6920      	ldr	r0, [r4, #16]
 800515c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005160:	f104 0314 	add.w	r3, r4, #20
 8005164:	f019 091f 	ands.w	r9, r9, #31
 8005168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800516c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005170:	d02b      	beq.n	80051ca <__lshift+0xbe>
 8005172:	f1c9 0e20 	rsb	lr, r9, #32
 8005176:	468a      	mov	sl, r1
 8005178:	2200      	movs	r2, #0
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	fa00 f009 	lsl.w	r0, r0, r9
 8005180:	4310      	orrs	r0, r2
 8005182:	f84a 0b04 	str.w	r0, [sl], #4
 8005186:	f853 2b04 	ldr.w	r2, [r3], #4
 800518a:	459c      	cmp	ip, r3
 800518c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005190:	d8f3      	bhi.n	800517a <__lshift+0x6e>
 8005192:	ebac 0304 	sub.w	r3, ip, r4
 8005196:	3b15      	subs	r3, #21
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	3304      	adds	r3, #4
 800519e:	f104 0015 	add.w	r0, r4, #21
 80051a2:	4584      	cmp	ip, r0
 80051a4:	bf38      	it	cc
 80051a6:	2304      	movcc	r3, #4
 80051a8:	50ca      	str	r2, [r1, r3]
 80051aa:	b10a      	cbz	r2, 80051b0 <__lshift+0xa4>
 80051ac:	f108 0602 	add.w	r6, r8, #2
 80051b0:	3e01      	subs	r6, #1
 80051b2:	4638      	mov	r0, r7
 80051b4:	612e      	str	r6, [r5, #16]
 80051b6:	4621      	mov	r1, r4
 80051b8:	f7ff fdda 	bl	8004d70 <_Bfree>
 80051bc:	4628      	mov	r0, r5
 80051be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80051c6:	3301      	adds	r3, #1
 80051c8:	e7c5      	b.n	8005156 <__lshift+0x4a>
 80051ca:	3904      	subs	r1, #4
 80051cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80051d4:	459c      	cmp	ip, r3
 80051d6:	d8f9      	bhi.n	80051cc <__lshift+0xc0>
 80051d8:	e7ea      	b.n	80051b0 <__lshift+0xa4>
 80051da:	bf00      	nop
 80051dc:	08006407 	.word	0x08006407
 80051e0:	08006418 	.word	0x08006418

080051e4 <__mcmp>:
 80051e4:	690a      	ldr	r2, [r1, #16]
 80051e6:	4603      	mov	r3, r0
 80051e8:	6900      	ldr	r0, [r0, #16]
 80051ea:	1a80      	subs	r0, r0, r2
 80051ec:	b530      	push	{r4, r5, lr}
 80051ee:	d10e      	bne.n	800520e <__mcmp+0x2a>
 80051f0:	3314      	adds	r3, #20
 80051f2:	3114      	adds	r1, #20
 80051f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80051f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80051fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005200:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005204:	4295      	cmp	r5, r2
 8005206:	d003      	beq.n	8005210 <__mcmp+0x2c>
 8005208:	d205      	bcs.n	8005216 <__mcmp+0x32>
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	bd30      	pop	{r4, r5, pc}
 8005210:	42a3      	cmp	r3, r4
 8005212:	d3f3      	bcc.n	80051fc <__mcmp+0x18>
 8005214:	e7fb      	b.n	800520e <__mcmp+0x2a>
 8005216:	2001      	movs	r0, #1
 8005218:	e7f9      	b.n	800520e <__mcmp+0x2a>
	...

0800521c <__mdiff>:
 800521c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	4689      	mov	r9, r1
 8005222:	4606      	mov	r6, r0
 8005224:	4611      	mov	r1, r2
 8005226:	4648      	mov	r0, r9
 8005228:	4614      	mov	r4, r2
 800522a:	f7ff ffdb 	bl	80051e4 <__mcmp>
 800522e:	1e05      	subs	r5, r0, #0
 8005230:	d112      	bne.n	8005258 <__mdiff+0x3c>
 8005232:	4629      	mov	r1, r5
 8005234:	4630      	mov	r0, r6
 8005236:	f7ff fd5b 	bl	8004cf0 <_Balloc>
 800523a:	4602      	mov	r2, r0
 800523c:	b928      	cbnz	r0, 800524a <__mdiff+0x2e>
 800523e:	4b3f      	ldr	r3, [pc, #252]	@ (800533c <__mdiff+0x120>)
 8005240:	f240 2137 	movw	r1, #567	@ 0x237
 8005244:	483e      	ldr	r0, [pc, #248]	@ (8005340 <__mdiff+0x124>)
 8005246:	f000 fb11 	bl	800586c <__assert_func>
 800524a:	2301      	movs	r3, #1
 800524c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005250:	4610      	mov	r0, r2
 8005252:	b003      	add	sp, #12
 8005254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005258:	bfbc      	itt	lt
 800525a:	464b      	movlt	r3, r9
 800525c:	46a1      	movlt	r9, r4
 800525e:	4630      	mov	r0, r6
 8005260:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005264:	bfba      	itte	lt
 8005266:	461c      	movlt	r4, r3
 8005268:	2501      	movlt	r5, #1
 800526a:	2500      	movge	r5, #0
 800526c:	f7ff fd40 	bl	8004cf0 <_Balloc>
 8005270:	4602      	mov	r2, r0
 8005272:	b918      	cbnz	r0, 800527c <__mdiff+0x60>
 8005274:	4b31      	ldr	r3, [pc, #196]	@ (800533c <__mdiff+0x120>)
 8005276:	f240 2145 	movw	r1, #581	@ 0x245
 800527a:	e7e3      	b.n	8005244 <__mdiff+0x28>
 800527c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005280:	6926      	ldr	r6, [r4, #16]
 8005282:	60c5      	str	r5, [r0, #12]
 8005284:	f109 0310 	add.w	r3, r9, #16
 8005288:	f109 0514 	add.w	r5, r9, #20
 800528c:	f104 0e14 	add.w	lr, r4, #20
 8005290:	f100 0b14 	add.w	fp, r0, #20
 8005294:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005298:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	46d9      	mov	r9, fp
 80052a0:	f04f 0c00 	mov.w	ip, #0
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80052aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	fa1f f38a 	uxth.w	r3, sl
 80052b4:	4619      	mov	r1, r3
 80052b6:	b283      	uxth	r3, r0
 80052b8:	1acb      	subs	r3, r1, r3
 80052ba:	0c00      	lsrs	r0, r0, #16
 80052bc:	4463      	add	r3, ip
 80052be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80052c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80052cc:	4576      	cmp	r6, lr
 80052ce:	f849 3b04 	str.w	r3, [r9], #4
 80052d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052d6:	d8e5      	bhi.n	80052a4 <__mdiff+0x88>
 80052d8:	1b33      	subs	r3, r6, r4
 80052da:	3b15      	subs	r3, #21
 80052dc:	f023 0303 	bic.w	r3, r3, #3
 80052e0:	3415      	adds	r4, #21
 80052e2:	3304      	adds	r3, #4
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	bf38      	it	cc
 80052e8:	2304      	movcc	r3, #4
 80052ea:	441d      	add	r5, r3
 80052ec:	445b      	add	r3, fp
 80052ee:	461e      	mov	r6, r3
 80052f0:	462c      	mov	r4, r5
 80052f2:	4544      	cmp	r4, r8
 80052f4:	d30e      	bcc.n	8005314 <__mdiff+0xf8>
 80052f6:	f108 0103 	add.w	r1, r8, #3
 80052fa:	1b49      	subs	r1, r1, r5
 80052fc:	f021 0103 	bic.w	r1, r1, #3
 8005300:	3d03      	subs	r5, #3
 8005302:	45a8      	cmp	r8, r5
 8005304:	bf38      	it	cc
 8005306:	2100      	movcc	r1, #0
 8005308:	440b      	add	r3, r1
 800530a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800530e:	b191      	cbz	r1, 8005336 <__mdiff+0x11a>
 8005310:	6117      	str	r7, [r2, #16]
 8005312:	e79d      	b.n	8005250 <__mdiff+0x34>
 8005314:	f854 1b04 	ldr.w	r1, [r4], #4
 8005318:	46e6      	mov	lr, ip
 800531a:	0c08      	lsrs	r0, r1, #16
 800531c:	fa1c fc81 	uxtah	ip, ip, r1
 8005320:	4471      	add	r1, lr
 8005322:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005326:	b289      	uxth	r1, r1
 8005328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800532c:	f846 1b04 	str.w	r1, [r6], #4
 8005330:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005334:	e7dd      	b.n	80052f2 <__mdiff+0xd6>
 8005336:	3f01      	subs	r7, #1
 8005338:	e7e7      	b.n	800530a <__mdiff+0xee>
 800533a:	bf00      	nop
 800533c:	08006407 	.word	0x08006407
 8005340:	08006418 	.word	0x08006418

08005344 <__d2b>:
 8005344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005348:	460f      	mov	r7, r1
 800534a:	2101      	movs	r1, #1
 800534c:	ec59 8b10 	vmov	r8, r9, d0
 8005350:	4616      	mov	r6, r2
 8005352:	f7ff fccd 	bl	8004cf0 <_Balloc>
 8005356:	4604      	mov	r4, r0
 8005358:	b930      	cbnz	r0, 8005368 <__d2b+0x24>
 800535a:	4602      	mov	r2, r0
 800535c:	4b23      	ldr	r3, [pc, #140]	@ (80053ec <__d2b+0xa8>)
 800535e:	4824      	ldr	r0, [pc, #144]	@ (80053f0 <__d2b+0xac>)
 8005360:	f240 310f 	movw	r1, #783	@ 0x30f
 8005364:	f000 fa82 	bl	800586c <__assert_func>
 8005368:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800536c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005370:	b10d      	cbz	r5, 8005376 <__d2b+0x32>
 8005372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f1b8 0300 	subs.w	r3, r8, #0
 800537c:	d023      	beq.n	80053c6 <__d2b+0x82>
 800537e:	4668      	mov	r0, sp
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	f7ff fd7c 	bl	8004e7e <__lo0bits>
 8005386:	e9dd 1200 	ldrd	r1, r2, [sp]
 800538a:	b1d0      	cbz	r0, 80053c2 <__d2b+0x7e>
 800538c:	f1c0 0320 	rsb	r3, r0, #32
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	430b      	orrs	r3, r1
 8005396:	40c2      	lsrs	r2, r0
 8005398:	6163      	str	r3, [r4, #20]
 800539a:	9201      	str	r2, [sp, #4]
 800539c:	9b01      	ldr	r3, [sp, #4]
 800539e:	61a3      	str	r3, [r4, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf0c      	ite	eq
 80053a4:	2201      	moveq	r2, #1
 80053a6:	2202      	movne	r2, #2
 80053a8:	6122      	str	r2, [r4, #16]
 80053aa:	b1a5      	cbz	r5, 80053d6 <__d2b+0x92>
 80053ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80053b0:	4405      	add	r5, r0
 80053b2:	603d      	str	r5, [r7, #0]
 80053b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80053b8:	6030      	str	r0, [r6, #0]
 80053ba:	4620      	mov	r0, r4
 80053bc:	b003      	add	sp, #12
 80053be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053c2:	6161      	str	r1, [r4, #20]
 80053c4:	e7ea      	b.n	800539c <__d2b+0x58>
 80053c6:	a801      	add	r0, sp, #4
 80053c8:	f7ff fd59 	bl	8004e7e <__lo0bits>
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	6163      	str	r3, [r4, #20]
 80053d0:	3020      	adds	r0, #32
 80053d2:	2201      	movs	r2, #1
 80053d4:	e7e8      	b.n	80053a8 <__d2b+0x64>
 80053d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80053de:	6038      	str	r0, [r7, #0]
 80053e0:	6918      	ldr	r0, [r3, #16]
 80053e2:	f7ff fd2d 	bl	8004e40 <__hi0bits>
 80053e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053ea:	e7e5      	b.n	80053b8 <__d2b+0x74>
 80053ec:	08006407 	.word	0x08006407
 80053f0:	08006418 	.word	0x08006418

080053f4 <__ssputs_r>:
 80053f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	688e      	ldr	r6, [r1, #8]
 80053fa:	461f      	mov	r7, r3
 80053fc:	42be      	cmp	r6, r7
 80053fe:	680b      	ldr	r3, [r1, #0]
 8005400:	4682      	mov	sl, r0
 8005402:	460c      	mov	r4, r1
 8005404:	4690      	mov	r8, r2
 8005406:	d82d      	bhi.n	8005464 <__ssputs_r+0x70>
 8005408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800540c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005410:	d026      	beq.n	8005460 <__ssputs_r+0x6c>
 8005412:	6965      	ldr	r5, [r4, #20]
 8005414:	6909      	ldr	r1, [r1, #16]
 8005416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800541a:	eba3 0901 	sub.w	r9, r3, r1
 800541e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005422:	1c7b      	adds	r3, r7, #1
 8005424:	444b      	add	r3, r9
 8005426:	106d      	asrs	r5, r5, #1
 8005428:	429d      	cmp	r5, r3
 800542a:	bf38      	it	cc
 800542c:	461d      	movcc	r5, r3
 800542e:	0553      	lsls	r3, r2, #21
 8005430:	d527      	bpl.n	8005482 <__ssputs_r+0x8e>
 8005432:	4629      	mov	r1, r5
 8005434:	f7ff fbd0 	bl	8004bd8 <_malloc_r>
 8005438:	4606      	mov	r6, r0
 800543a:	b360      	cbz	r0, 8005496 <__ssputs_r+0xa2>
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	464a      	mov	r2, r9
 8005440:	f000 fa06 	bl	8005850 <memcpy>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800544a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	6126      	str	r6, [r4, #16]
 8005452:	6165      	str	r5, [r4, #20]
 8005454:	444e      	add	r6, r9
 8005456:	eba5 0509 	sub.w	r5, r5, r9
 800545a:	6026      	str	r6, [r4, #0]
 800545c:	60a5      	str	r5, [r4, #8]
 800545e:	463e      	mov	r6, r7
 8005460:	42be      	cmp	r6, r7
 8005462:	d900      	bls.n	8005466 <__ssputs_r+0x72>
 8005464:	463e      	mov	r6, r7
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	4632      	mov	r2, r6
 800546a:	4641      	mov	r1, r8
 800546c:	f000 f9c6 	bl	80057fc <memmove>
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	1b9b      	subs	r3, r3, r6
 8005474:	60a3      	str	r3, [r4, #8]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	4433      	add	r3, r6
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	2000      	movs	r0, #0
 800547e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005482:	462a      	mov	r2, r5
 8005484:	f000 fa36 	bl	80058f4 <_realloc_r>
 8005488:	4606      	mov	r6, r0
 800548a:	2800      	cmp	r0, #0
 800548c:	d1e0      	bne.n	8005450 <__ssputs_r+0x5c>
 800548e:	6921      	ldr	r1, [r4, #16]
 8005490:	4650      	mov	r0, sl
 8005492:	f7ff fb2d 	bl	8004af0 <_free_r>
 8005496:	230c      	movs	r3, #12
 8005498:	f8ca 3000 	str.w	r3, [sl]
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e7e9      	b.n	800547e <__ssputs_r+0x8a>
	...

080054ac <_svfiprintf_r>:
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	4698      	mov	r8, r3
 80054b2:	898b      	ldrh	r3, [r1, #12]
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	b09d      	sub	sp, #116	@ 0x74
 80054b8:	4607      	mov	r7, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	d510      	bpl.n	80054e2 <_svfiprintf_r+0x36>
 80054c0:	690b      	ldr	r3, [r1, #16]
 80054c2:	b973      	cbnz	r3, 80054e2 <_svfiprintf_r+0x36>
 80054c4:	2140      	movs	r1, #64	@ 0x40
 80054c6:	f7ff fb87 	bl	8004bd8 <_malloc_r>
 80054ca:	6028      	str	r0, [r5, #0]
 80054cc:	6128      	str	r0, [r5, #16]
 80054ce:	b930      	cbnz	r0, 80054de <_svfiprintf_r+0x32>
 80054d0:	230c      	movs	r3, #12
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	b01d      	add	sp, #116	@ 0x74
 80054da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054de:	2340      	movs	r3, #64	@ 0x40
 80054e0:	616b      	str	r3, [r5, #20]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054e6:	2320      	movs	r3, #32
 80054e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f0:	2330      	movs	r3, #48	@ 0x30
 80054f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005690 <_svfiprintf_r+0x1e4>
 80054f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054fa:	f04f 0901 	mov.w	r9, #1
 80054fe:	4623      	mov	r3, r4
 8005500:	469a      	mov	sl, r3
 8005502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005506:	b10a      	cbz	r2, 800550c <_svfiprintf_r+0x60>
 8005508:	2a25      	cmp	r2, #37	@ 0x25
 800550a:	d1f9      	bne.n	8005500 <_svfiprintf_r+0x54>
 800550c:	ebba 0b04 	subs.w	fp, sl, r4
 8005510:	d00b      	beq.n	800552a <_svfiprintf_r+0x7e>
 8005512:	465b      	mov	r3, fp
 8005514:	4622      	mov	r2, r4
 8005516:	4629      	mov	r1, r5
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ff6b 	bl	80053f4 <__ssputs_r>
 800551e:	3001      	adds	r0, #1
 8005520:	f000 80a7 	beq.w	8005672 <_svfiprintf_r+0x1c6>
 8005524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005526:	445a      	add	r2, fp
 8005528:	9209      	str	r2, [sp, #36]	@ 0x24
 800552a:	f89a 3000 	ldrb.w	r3, [sl]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 809f 	beq.w	8005672 <_svfiprintf_r+0x1c6>
 8005534:	2300      	movs	r3, #0
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553e:	f10a 0a01 	add.w	sl, sl, #1
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	9307      	str	r3, [sp, #28]
 8005546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800554a:	931a      	str	r3, [sp, #104]	@ 0x68
 800554c:	4654      	mov	r4, sl
 800554e:	2205      	movs	r2, #5
 8005550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005554:	484e      	ldr	r0, [pc, #312]	@ (8005690 <_svfiprintf_r+0x1e4>)
 8005556:	f7fa fe3b 	bl	80001d0 <memchr>
 800555a:	9a04      	ldr	r2, [sp, #16]
 800555c:	b9d8      	cbnz	r0, 8005596 <_svfiprintf_r+0xea>
 800555e:	06d0      	lsls	r0, r2, #27
 8005560:	bf44      	itt	mi
 8005562:	2320      	movmi	r3, #32
 8005564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005568:	0711      	lsls	r1, r2, #28
 800556a:	bf44      	itt	mi
 800556c:	232b      	movmi	r3, #43	@ 0x2b
 800556e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005572:	f89a 3000 	ldrb.w	r3, [sl]
 8005576:	2b2a      	cmp	r3, #42	@ 0x2a
 8005578:	d015      	beq.n	80055a6 <_svfiprintf_r+0xfa>
 800557a:	9a07      	ldr	r2, [sp, #28]
 800557c:	4654      	mov	r4, sl
 800557e:	2000      	movs	r0, #0
 8005580:	f04f 0c0a 	mov.w	ip, #10
 8005584:	4621      	mov	r1, r4
 8005586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558a:	3b30      	subs	r3, #48	@ 0x30
 800558c:	2b09      	cmp	r3, #9
 800558e:	d94b      	bls.n	8005628 <_svfiprintf_r+0x17c>
 8005590:	b1b0      	cbz	r0, 80055c0 <_svfiprintf_r+0x114>
 8005592:	9207      	str	r2, [sp, #28]
 8005594:	e014      	b.n	80055c0 <_svfiprintf_r+0x114>
 8005596:	eba0 0308 	sub.w	r3, r0, r8
 800559a:	fa09 f303 	lsl.w	r3, r9, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	46a2      	mov	sl, r4
 80055a4:	e7d2      	b.n	800554c <_svfiprintf_r+0xa0>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	1d19      	adds	r1, r3, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	9103      	str	r1, [sp, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bfbb      	ittet	lt
 80055b2:	425b      	neglt	r3, r3
 80055b4:	f042 0202 	orrlt.w	r2, r2, #2
 80055b8:	9307      	strge	r3, [sp, #28]
 80055ba:	9307      	strlt	r3, [sp, #28]
 80055bc:	bfb8      	it	lt
 80055be:	9204      	strlt	r2, [sp, #16]
 80055c0:	7823      	ldrb	r3, [r4, #0]
 80055c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80055c4:	d10a      	bne.n	80055dc <_svfiprintf_r+0x130>
 80055c6:	7863      	ldrb	r3, [r4, #1]
 80055c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ca:	d132      	bne.n	8005632 <_svfiprintf_r+0x186>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	9203      	str	r2, [sp, #12]
 80055d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055d8:	3402      	adds	r4, #2
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056a0 <_svfiprintf_r+0x1f4>
 80055e0:	7821      	ldrb	r1, [r4, #0]
 80055e2:	2203      	movs	r2, #3
 80055e4:	4650      	mov	r0, sl
 80055e6:	f7fa fdf3 	bl	80001d0 <memchr>
 80055ea:	b138      	cbz	r0, 80055fc <_svfiprintf_r+0x150>
 80055ec:	9b04      	ldr	r3, [sp, #16]
 80055ee:	eba0 000a 	sub.w	r0, r0, sl
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	4082      	lsls	r2, r0
 80055f6:	4313      	orrs	r3, r2
 80055f8:	3401      	adds	r4, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	4824      	ldr	r0, [pc, #144]	@ (8005694 <_svfiprintf_r+0x1e8>)
 8005602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005606:	2206      	movs	r2, #6
 8005608:	f7fa fde2 	bl	80001d0 <memchr>
 800560c:	2800      	cmp	r0, #0
 800560e:	d036      	beq.n	800567e <_svfiprintf_r+0x1d2>
 8005610:	4b21      	ldr	r3, [pc, #132]	@ (8005698 <_svfiprintf_r+0x1ec>)
 8005612:	bb1b      	cbnz	r3, 800565c <_svfiprintf_r+0x1b0>
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	3307      	adds	r3, #7
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	3308      	adds	r3, #8
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005622:	4433      	add	r3, r6
 8005624:	9309      	str	r3, [sp, #36]	@ 0x24
 8005626:	e76a      	b.n	80054fe <_svfiprintf_r+0x52>
 8005628:	fb0c 3202 	mla	r2, ip, r2, r3
 800562c:	460c      	mov	r4, r1
 800562e:	2001      	movs	r0, #1
 8005630:	e7a8      	b.n	8005584 <_svfiprintf_r+0xd8>
 8005632:	2300      	movs	r3, #0
 8005634:	3401      	adds	r4, #1
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 0c0a 	mov.w	ip, #10
 800563e:	4620      	mov	r0, r4
 8005640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005644:	3a30      	subs	r2, #48	@ 0x30
 8005646:	2a09      	cmp	r2, #9
 8005648:	d903      	bls.n	8005652 <_svfiprintf_r+0x1a6>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0c6      	beq.n	80055dc <_svfiprintf_r+0x130>
 800564e:	9105      	str	r1, [sp, #20]
 8005650:	e7c4      	b.n	80055dc <_svfiprintf_r+0x130>
 8005652:	fb0c 2101 	mla	r1, ip, r1, r2
 8005656:	4604      	mov	r4, r0
 8005658:	2301      	movs	r3, #1
 800565a:	e7f0      	b.n	800563e <_svfiprintf_r+0x192>
 800565c:	ab03      	add	r3, sp, #12
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	462a      	mov	r2, r5
 8005662:	4b0e      	ldr	r3, [pc, #56]	@ (800569c <_svfiprintf_r+0x1f0>)
 8005664:	a904      	add	r1, sp, #16
 8005666:	4638      	mov	r0, r7
 8005668:	f7fd fe96 	bl	8003398 <_printf_float>
 800566c:	1c42      	adds	r2, r0, #1
 800566e:	4606      	mov	r6, r0
 8005670:	d1d6      	bne.n	8005620 <_svfiprintf_r+0x174>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	065b      	lsls	r3, r3, #25
 8005676:	f53f af2d 	bmi.w	80054d4 <_svfiprintf_r+0x28>
 800567a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800567c:	e72c      	b.n	80054d8 <_svfiprintf_r+0x2c>
 800567e:	ab03      	add	r3, sp, #12
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	462a      	mov	r2, r5
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <_svfiprintf_r+0x1f0>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	4638      	mov	r0, r7
 800568a:	f7fe f91d 	bl	80038c8 <_printf_i>
 800568e:	e7ed      	b.n	800566c <_svfiprintf_r+0x1c0>
 8005690:	08006570 	.word	0x08006570
 8005694:	0800657a 	.word	0x0800657a
 8005698:	08003399 	.word	0x08003399
 800569c:	080053f5 	.word	0x080053f5
 80056a0:	08006576 	.word	0x08006576

080056a4 <__sflush_r>:
 80056a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ac:	0716      	lsls	r6, r2, #28
 80056ae:	4605      	mov	r5, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	d454      	bmi.n	800575e <__sflush_r+0xba>
 80056b4:	684b      	ldr	r3, [r1, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dc02      	bgt.n	80056c0 <__sflush_r+0x1c>
 80056ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	dd48      	ble.n	8005752 <__sflush_r+0xae>
 80056c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	d045      	beq.n	8005752 <__sflush_r+0xae>
 80056c6:	2300      	movs	r3, #0
 80056c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056cc:	682f      	ldr	r7, [r5, #0]
 80056ce:	6a21      	ldr	r1, [r4, #32]
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	d030      	beq.n	8005736 <__sflush_r+0x92>
 80056d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	0759      	lsls	r1, r3, #29
 80056da:	d505      	bpl.n	80056e8 <__sflush_r+0x44>
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056e2:	b10b      	cbz	r3, 80056e8 <__sflush_r+0x44>
 80056e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056ec:	6a21      	ldr	r1, [r4, #32]
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b0      	blx	r6
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	d106      	bne.n	8005706 <__sflush_r+0x62>
 80056f8:	6829      	ldr	r1, [r5, #0]
 80056fa:	291d      	cmp	r1, #29
 80056fc:	d82b      	bhi.n	8005756 <__sflush_r+0xb2>
 80056fe:	4a2a      	ldr	r2, [pc, #168]	@ (80057a8 <__sflush_r+0x104>)
 8005700:	410a      	asrs	r2, r1
 8005702:	07d6      	lsls	r6, r2, #31
 8005704:	d427      	bmi.n	8005756 <__sflush_r+0xb2>
 8005706:	2200      	movs	r2, #0
 8005708:	6062      	str	r2, [r4, #4]
 800570a:	04d9      	lsls	r1, r3, #19
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	6022      	str	r2, [r4, #0]
 8005710:	d504      	bpl.n	800571c <__sflush_r+0x78>
 8005712:	1c42      	adds	r2, r0, #1
 8005714:	d101      	bne.n	800571a <__sflush_r+0x76>
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	b903      	cbnz	r3, 800571c <__sflush_r+0x78>
 800571a:	6560      	str	r0, [r4, #84]	@ 0x54
 800571c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800571e:	602f      	str	r7, [r5, #0]
 8005720:	b1b9      	cbz	r1, 8005752 <__sflush_r+0xae>
 8005722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005726:	4299      	cmp	r1, r3
 8005728:	d002      	beq.n	8005730 <__sflush_r+0x8c>
 800572a:	4628      	mov	r0, r5
 800572c:	f7ff f9e0 	bl	8004af0 <_free_r>
 8005730:	2300      	movs	r3, #0
 8005732:	6363      	str	r3, [r4, #52]	@ 0x34
 8005734:	e00d      	b.n	8005752 <__sflush_r+0xae>
 8005736:	2301      	movs	r3, #1
 8005738:	4628      	mov	r0, r5
 800573a:	47b0      	blx	r6
 800573c:	4602      	mov	r2, r0
 800573e:	1c50      	adds	r0, r2, #1
 8005740:	d1c9      	bne.n	80056d6 <__sflush_r+0x32>
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0c6      	beq.n	80056d6 <__sflush_r+0x32>
 8005748:	2b1d      	cmp	r3, #29
 800574a:	d001      	beq.n	8005750 <__sflush_r+0xac>
 800574c:	2b16      	cmp	r3, #22
 800574e:	d11e      	bne.n	800578e <__sflush_r+0xea>
 8005750:	602f      	str	r7, [r5, #0]
 8005752:	2000      	movs	r0, #0
 8005754:	e022      	b.n	800579c <__sflush_r+0xf8>
 8005756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800575a:	b21b      	sxth	r3, r3
 800575c:	e01b      	b.n	8005796 <__sflush_r+0xf2>
 800575e:	690f      	ldr	r7, [r1, #16]
 8005760:	2f00      	cmp	r7, #0
 8005762:	d0f6      	beq.n	8005752 <__sflush_r+0xae>
 8005764:	0793      	lsls	r3, r2, #30
 8005766:	680e      	ldr	r6, [r1, #0]
 8005768:	bf08      	it	eq
 800576a:	694b      	ldreq	r3, [r1, #20]
 800576c:	600f      	str	r7, [r1, #0]
 800576e:	bf18      	it	ne
 8005770:	2300      	movne	r3, #0
 8005772:	eba6 0807 	sub.w	r8, r6, r7
 8005776:	608b      	str	r3, [r1, #8]
 8005778:	f1b8 0f00 	cmp.w	r8, #0
 800577c:	dde9      	ble.n	8005752 <__sflush_r+0xae>
 800577e:	6a21      	ldr	r1, [r4, #32]
 8005780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005782:	4643      	mov	r3, r8
 8005784:	463a      	mov	r2, r7
 8005786:	4628      	mov	r0, r5
 8005788:	47b0      	blx	r6
 800578a:	2800      	cmp	r0, #0
 800578c:	dc08      	bgt.n	80057a0 <__sflush_r+0xfc>
 800578e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a0:	4407      	add	r7, r0
 80057a2:	eba8 0800 	sub.w	r8, r8, r0
 80057a6:	e7e7      	b.n	8005778 <__sflush_r+0xd4>
 80057a8:	dfbffffe 	.word	0xdfbffffe

080057ac <_fflush_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	690b      	ldr	r3, [r1, #16]
 80057b0:	4605      	mov	r5, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	b913      	cbnz	r3, 80057bc <_fflush_r+0x10>
 80057b6:	2500      	movs	r5, #0
 80057b8:	4628      	mov	r0, r5
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	b118      	cbz	r0, 80057c6 <_fflush_r+0x1a>
 80057be:	6a03      	ldr	r3, [r0, #32]
 80057c0:	b90b      	cbnz	r3, 80057c6 <_fflush_r+0x1a>
 80057c2:	f7fe fa2d 	bl	8003c20 <__sinit>
 80057c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f3      	beq.n	80057b6 <_fflush_r+0xa>
 80057ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057d0:	07d0      	lsls	r0, r2, #31
 80057d2:	d404      	bmi.n	80057de <_fflush_r+0x32>
 80057d4:	0599      	lsls	r1, r3, #22
 80057d6:	d402      	bmi.n	80057de <_fflush_r+0x32>
 80057d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057da:	f7fe fb38 	bl	8003e4e <__retarget_lock_acquire_recursive>
 80057de:	4628      	mov	r0, r5
 80057e0:	4621      	mov	r1, r4
 80057e2:	f7ff ff5f 	bl	80056a4 <__sflush_r>
 80057e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057e8:	07da      	lsls	r2, r3, #31
 80057ea:	4605      	mov	r5, r0
 80057ec:	d4e4      	bmi.n	80057b8 <_fflush_r+0xc>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	059b      	lsls	r3, r3, #22
 80057f2:	d4e1      	bmi.n	80057b8 <_fflush_r+0xc>
 80057f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057f6:	f7fe fb2b 	bl	8003e50 <__retarget_lock_release_recursive>
 80057fa:	e7dd      	b.n	80057b8 <_fflush_r+0xc>

080057fc <memmove>:
 80057fc:	4288      	cmp	r0, r1
 80057fe:	b510      	push	{r4, lr}
 8005800:	eb01 0402 	add.w	r4, r1, r2
 8005804:	d902      	bls.n	800580c <memmove+0x10>
 8005806:	4284      	cmp	r4, r0
 8005808:	4623      	mov	r3, r4
 800580a:	d807      	bhi.n	800581c <memmove+0x20>
 800580c:	1e43      	subs	r3, r0, #1
 800580e:	42a1      	cmp	r1, r4
 8005810:	d008      	beq.n	8005824 <memmove+0x28>
 8005812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800581a:	e7f8      	b.n	800580e <memmove+0x12>
 800581c:	4402      	add	r2, r0
 800581e:	4601      	mov	r1, r0
 8005820:	428a      	cmp	r2, r1
 8005822:	d100      	bne.n	8005826 <memmove+0x2a>
 8005824:	bd10      	pop	{r4, pc}
 8005826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800582a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582e:	e7f7      	b.n	8005820 <memmove+0x24>

08005830 <_sbrk_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	@ (800584c <_sbrk_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fc f956 	bl	8001aec <_sbrk>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_sbrk_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_sbrk_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000368 	.word	0x20000368

08005850 <memcpy>:
 8005850:	440a      	add	r2, r1
 8005852:	4291      	cmp	r1, r2
 8005854:	f100 33ff 	add.w	r3, r0, #4294967295
 8005858:	d100      	bne.n	800585c <memcpy+0xc>
 800585a:	4770      	bx	lr
 800585c:	b510      	push	{r4, lr}
 800585e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005866:	4291      	cmp	r1, r2
 8005868:	d1f9      	bne.n	800585e <memcpy+0xe>
 800586a:	bd10      	pop	{r4, pc}

0800586c <__assert_func>:
 800586c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800586e:	4614      	mov	r4, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <__assert_func+0x2c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4605      	mov	r5, r0
 8005878:	68d8      	ldr	r0, [r3, #12]
 800587a:	b954      	cbnz	r4, 8005892 <__assert_func+0x26>
 800587c:	4b07      	ldr	r3, [pc, #28]	@ (800589c <__assert_func+0x30>)
 800587e:	461c      	mov	r4, r3
 8005880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005884:	9100      	str	r1, [sp, #0]
 8005886:	462b      	mov	r3, r5
 8005888:	4905      	ldr	r1, [pc, #20]	@ (80058a0 <__assert_func+0x34>)
 800588a:	f000 f86f 	bl	800596c <fiprintf>
 800588e:	f000 f87f 	bl	8005990 <abort>
 8005892:	4b04      	ldr	r3, [pc, #16]	@ (80058a4 <__assert_func+0x38>)
 8005894:	e7f4      	b.n	8005880 <__assert_func+0x14>
 8005896:	bf00      	nop
 8005898:	2000001c 	.word	0x2000001c
 800589c:	080065c6 	.word	0x080065c6
 80058a0:	08006598 	.word	0x08006598
 80058a4:	0800658b 	.word	0x0800658b

080058a8 <_calloc_r>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	fba1 5402 	umull	r5, r4, r1, r2
 80058ae:	b93c      	cbnz	r4, 80058c0 <_calloc_r+0x18>
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7ff f991 	bl	8004bd8 <_malloc_r>
 80058b6:	4606      	mov	r6, r0
 80058b8:	b928      	cbnz	r0, 80058c6 <_calloc_r+0x1e>
 80058ba:	2600      	movs	r6, #0
 80058bc:	4630      	mov	r0, r6
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	220c      	movs	r2, #12
 80058c2:	6002      	str	r2, [r0, #0]
 80058c4:	e7f9      	b.n	80058ba <_calloc_r+0x12>
 80058c6:	462a      	mov	r2, r5
 80058c8:	4621      	mov	r1, r4
 80058ca:	f7fe fa42 	bl	8003d52 <memset>
 80058ce:	e7f5      	b.n	80058bc <_calloc_r+0x14>

080058d0 <__ascii_mbtowc>:
 80058d0:	b082      	sub	sp, #8
 80058d2:	b901      	cbnz	r1, 80058d6 <__ascii_mbtowc+0x6>
 80058d4:	a901      	add	r1, sp, #4
 80058d6:	b142      	cbz	r2, 80058ea <__ascii_mbtowc+0x1a>
 80058d8:	b14b      	cbz	r3, 80058ee <__ascii_mbtowc+0x1e>
 80058da:	7813      	ldrb	r3, [r2, #0]
 80058dc:	600b      	str	r3, [r1, #0]
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	1e10      	subs	r0, r2, #0
 80058e2:	bf18      	it	ne
 80058e4:	2001      	movne	r0, #1
 80058e6:	b002      	add	sp, #8
 80058e8:	4770      	bx	lr
 80058ea:	4610      	mov	r0, r2
 80058ec:	e7fb      	b.n	80058e6 <__ascii_mbtowc+0x16>
 80058ee:	f06f 0001 	mvn.w	r0, #1
 80058f2:	e7f8      	b.n	80058e6 <__ascii_mbtowc+0x16>

080058f4 <_realloc_r>:
 80058f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f8:	4680      	mov	r8, r0
 80058fa:	4615      	mov	r5, r2
 80058fc:	460c      	mov	r4, r1
 80058fe:	b921      	cbnz	r1, 800590a <_realloc_r+0x16>
 8005900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005904:	4611      	mov	r1, r2
 8005906:	f7ff b967 	b.w	8004bd8 <_malloc_r>
 800590a:	b92a      	cbnz	r2, 8005918 <_realloc_r+0x24>
 800590c:	f7ff f8f0 	bl	8004af0 <_free_r>
 8005910:	2400      	movs	r4, #0
 8005912:	4620      	mov	r0, r4
 8005914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005918:	f000 f841 	bl	800599e <_malloc_usable_size_r>
 800591c:	4285      	cmp	r5, r0
 800591e:	4606      	mov	r6, r0
 8005920:	d802      	bhi.n	8005928 <_realloc_r+0x34>
 8005922:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005926:	d8f4      	bhi.n	8005912 <_realloc_r+0x1e>
 8005928:	4629      	mov	r1, r5
 800592a:	4640      	mov	r0, r8
 800592c:	f7ff f954 	bl	8004bd8 <_malloc_r>
 8005930:	4607      	mov	r7, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d0ec      	beq.n	8005910 <_realloc_r+0x1c>
 8005936:	42b5      	cmp	r5, r6
 8005938:	462a      	mov	r2, r5
 800593a:	4621      	mov	r1, r4
 800593c:	bf28      	it	cs
 800593e:	4632      	movcs	r2, r6
 8005940:	f7ff ff86 	bl	8005850 <memcpy>
 8005944:	4621      	mov	r1, r4
 8005946:	4640      	mov	r0, r8
 8005948:	f7ff f8d2 	bl	8004af0 <_free_r>
 800594c:	463c      	mov	r4, r7
 800594e:	e7e0      	b.n	8005912 <_realloc_r+0x1e>

08005950 <__ascii_wctomb>:
 8005950:	4603      	mov	r3, r0
 8005952:	4608      	mov	r0, r1
 8005954:	b141      	cbz	r1, 8005968 <__ascii_wctomb+0x18>
 8005956:	2aff      	cmp	r2, #255	@ 0xff
 8005958:	d904      	bls.n	8005964 <__ascii_wctomb+0x14>
 800595a:	228a      	movs	r2, #138	@ 0x8a
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	4770      	bx	lr
 8005964:	700a      	strb	r2, [r1, #0]
 8005966:	2001      	movs	r0, #1
 8005968:	4770      	bx	lr
	...

0800596c <fiprintf>:
 800596c:	b40e      	push	{r1, r2, r3}
 800596e:	b503      	push	{r0, r1, lr}
 8005970:	4601      	mov	r1, r0
 8005972:	ab03      	add	r3, sp, #12
 8005974:	4805      	ldr	r0, [pc, #20]	@ (800598c <fiprintf+0x20>)
 8005976:	f853 2b04 	ldr.w	r2, [r3], #4
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	f000 f83f 	bl	8005a00 <_vfiprintf_r>
 8005982:	b002      	add	sp, #8
 8005984:	f85d eb04 	ldr.w	lr, [sp], #4
 8005988:	b003      	add	sp, #12
 800598a:	4770      	bx	lr
 800598c:	2000001c 	.word	0x2000001c

08005990 <abort>:
 8005990:	b508      	push	{r3, lr}
 8005992:	2006      	movs	r0, #6
 8005994:	f000 fa08 	bl	8005da8 <raise>
 8005998:	2001      	movs	r0, #1
 800599a:	f7fc f82f 	bl	80019fc <_exit>

0800599e <_malloc_usable_size_r>:
 800599e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a2:	1f18      	subs	r0, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfbc      	itt	lt
 80059a8:	580b      	ldrlt	r3, [r1, r0]
 80059aa:	18c0      	addlt	r0, r0, r3
 80059ac:	4770      	bx	lr

080059ae <__sfputc_r>:
 80059ae:	6893      	ldr	r3, [r2, #8]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	b410      	push	{r4}
 80059b6:	6093      	str	r3, [r2, #8]
 80059b8:	da08      	bge.n	80059cc <__sfputc_r+0x1e>
 80059ba:	6994      	ldr	r4, [r2, #24]
 80059bc:	42a3      	cmp	r3, r4
 80059be:	db01      	blt.n	80059c4 <__sfputc_r+0x16>
 80059c0:	290a      	cmp	r1, #10
 80059c2:	d103      	bne.n	80059cc <__sfputc_r+0x1e>
 80059c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059c8:	f000 b932 	b.w	8005c30 <__swbuf_r>
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	1c58      	adds	r0, r3, #1
 80059d0:	6010      	str	r0, [r2, #0]
 80059d2:	7019      	strb	r1, [r3, #0]
 80059d4:	4608      	mov	r0, r1
 80059d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059da:	4770      	bx	lr

080059dc <__sfputs_r>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	4606      	mov	r6, r0
 80059e0:	460f      	mov	r7, r1
 80059e2:	4614      	mov	r4, r2
 80059e4:	18d5      	adds	r5, r2, r3
 80059e6:	42ac      	cmp	r4, r5
 80059e8:	d101      	bne.n	80059ee <__sfputs_r+0x12>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e007      	b.n	80059fe <__sfputs_r+0x22>
 80059ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f2:	463a      	mov	r2, r7
 80059f4:	4630      	mov	r0, r6
 80059f6:	f7ff ffda 	bl	80059ae <__sfputc_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d1f3      	bne.n	80059e6 <__sfputs_r+0xa>
 80059fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a00 <_vfiprintf_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	460d      	mov	r5, r1
 8005a06:	b09d      	sub	sp, #116	@ 0x74
 8005a08:	4614      	mov	r4, r2
 8005a0a:	4698      	mov	r8, r3
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	b118      	cbz	r0, 8005a18 <_vfiprintf_r+0x18>
 8005a10:	6a03      	ldr	r3, [r0, #32]
 8005a12:	b90b      	cbnz	r3, 8005a18 <_vfiprintf_r+0x18>
 8005a14:	f7fe f904 	bl	8003c20 <__sinit>
 8005a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	d405      	bmi.n	8005a2a <_vfiprintf_r+0x2a>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	059a      	lsls	r2, r3, #22
 8005a22:	d402      	bmi.n	8005a2a <_vfiprintf_r+0x2a>
 8005a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a26:	f7fe fa12 	bl	8003e4e <__retarget_lock_acquire_recursive>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	071b      	lsls	r3, r3, #28
 8005a2e:	d501      	bpl.n	8005a34 <_vfiprintf_r+0x34>
 8005a30:	692b      	ldr	r3, [r5, #16]
 8005a32:	b99b      	cbnz	r3, 8005a5c <_vfiprintf_r+0x5c>
 8005a34:	4629      	mov	r1, r5
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 f938 	bl	8005cac <__swsetup_r>
 8005a3c:	b170      	cbz	r0, 8005a5c <_vfiprintf_r+0x5c>
 8005a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a40:	07dc      	lsls	r4, r3, #31
 8005a42:	d504      	bpl.n	8005a4e <_vfiprintf_r+0x4e>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b01d      	add	sp, #116	@ 0x74
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	0598      	lsls	r0, r3, #22
 8005a52:	d4f7      	bmi.n	8005a44 <_vfiprintf_r+0x44>
 8005a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a56:	f7fe f9fb 	bl	8003e50 <__retarget_lock_release_recursive>
 8005a5a:	e7f3      	b.n	8005a44 <_vfiprintf_r+0x44>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a60:	2320      	movs	r3, #32
 8005a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a6a:	2330      	movs	r3, #48	@ 0x30
 8005a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c1c <_vfiprintf_r+0x21c>
 8005a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a74:	f04f 0901 	mov.w	r9, #1
 8005a78:	4623      	mov	r3, r4
 8005a7a:	469a      	mov	sl, r3
 8005a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a80:	b10a      	cbz	r2, 8005a86 <_vfiprintf_r+0x86>
 8005a82:	2a25      	cmp	r2, #37	@ 0x25
 8005a84:	d1f9      	bne.n	8005a7a <_vfiprintf_r+0x7a>
 8005a86:	ebba 0b04 	subs.w	fp, sl, r4
 8005a8a:	d00b      	beq.n	8005aa4 <_vfiprintf_r+0xa4>
 8005a8c:	465b      	mov	r3, fp
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ffa2 	bl	80059dc <__sfputs_r>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f000 80a7 	beq.w	8005bec <_vfiprintf_r+0x1ec>
 8005a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa0:	445a      	add	r2, fp
 8005aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 809f 	beq.w	8005bec <_vfiprintf_r+0x1ec>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab8:	f10a 0a01 	add.w	sl, sl, #1
 8005abc:	9304      	str	r3, [sp, #16]
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ac6:	4654      	mov	r4, sl
 8005ac8:	2205      	movs	r2, #5
 8005aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ace:	4853      	ldr	r0, [pc, #332]	@ (8005c1c <_vfiprintf_r+0x21c>)
 8005ad0:	f7fa fb7e 	bl	80001d0 <memchr>
 8005ad4:	9a04      	ldr	r2, [sp, #16]
 8005ad6:	b9d8      	cbnz	r0, 8005b10 <_vfiprintf_r+0x110>
 8005ad8:	06d1      	lsls	r1, r2, #27
 8005ada:	bf44      	itt	mi
 8005adc:	2320      	movmi	r3, #32
 8005ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ae2:	0713      	lsls	r3, r2, #28
 8005ae4:	bf44      	itt	mi
 8005ae6:	232b      	movmi	r3, #43	@ 0x2b
 8005ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af2:	d015      	beq.n	8005b20 <_vfiprintf_r+0x120>
 8005af4:	9a07      	ldr	r2, [sp, #28]
 8005af6:	4654      	mov	r4, sl
 8005af8:	2000      	movs	r0, #0
 8005afa:	f04f 0c0a 	mov.w	ip, #10
 8005afe:	4621      	mov	r1, r4
 8005b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b04:	3b30      	subs	r3, #48	@ 0x30
 8005b06:	2b09      	cmp	r3, #9
 8005b08:	d94b      	bls.n	8005ba2 <_vfiprintf_r+0x1a2>
 8005b0a:	b1b0      	cbz	r0, 8005b3a <_vfiprintf_r+0x13a>
 8005b0c:	9207      	str	r2, [sp, #28]
 8005b0e:	e014      	b.n	8005b3a <_vfiprintf_r+0x13a>
 8005b10:	eba0 0308 	sub.w	r3, r0, r8
 8005b14:	fa09 f303 	lsl.w	r3, r9, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	46a2      	mov	sl, r4
 8005b1e:	e7d2      	b.n	8005ac6 <_vfiprintf_r+0xc6>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	1d19      	adds	r1, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9103      	str	r1, [sp, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bfbb      	ittet	lt
 8005b2c:	425b      	neglt	r3, r3
 8005b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b32:	9307      	strge	r3, [sp, #28]
 8005b34:	9307      	strlt	r3, [sp, #28]
 8005b36:	bfb8      	it	lt
 8005b38:	9204      	strlt	r2, [sp, #16]
 8005b3a:	7823      	ldrb	r3, [r4, #0]
 8005b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b3e:	d10a      	bne.n	8005b56 <_vfiprintf_r+0x156>
 8005b40:	7863      	ldrb	r3, [r4, #1]
 8005b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b44:	d132      	bne.n	8005bac <_vfiprintf_r+0x1ac>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	9203      	str	r2, [sp, #12]
 8005b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b52:	3402      	adds	r4, #2
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c2c <_vfiprintf_r+0x22c>
 8005b5a:	7821      	ldrb	r1, [r4, #0]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	4650      	mov	r0, sl
 8005b60:	f7fa fb36 	bl	80001d0 <memchr>
 8005b64:	b138      	cbz	r0, 8005b76 <_vfiprintf_r+0x176>
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	eba0 000a 	sub.w	r0, r0, sl
 8005b6c:	2240      	movs	r2, #64	@ 0x40
 8005b6e:	4082      	lsls	r2, r0
 8005b70:	4313      	orrs	r3, r2
 8005b72:	3401      	adds	r4, #1
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7a:	4829      	ldr	r0, [pc, #164]	@ (8005c20 <_vfiprintf_r+0x220>)
 8005b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b80:	2206      	movs	r2, #6
 8005b82:	f7fa fb25 	bl	80001d0 <memchr>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d03f      	beq.n	8005c0a <_vfiprintf_r+0x20a>
 8005b8a:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <_vfiprintf_r+0x224>)
 8005b8c:	bb1b      	cbnz	r3, 8005bd6 <_vfiprintf_r+0x1d6>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	3307      	adds	r3, #7
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	3308      	adds	r3, #8
 8005b98:	9303      	str	r3, [sp, #12]
 8005b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9c:	443b      	add	r3, r7
 8005b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba0:	e76a      	b.n	8005a78 <_vfiprintf_r+0x78>
 8005ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	2001      	movs	r0, #1
 8005baa:	e7a8      	b.n	8005afe <_vfiprintf_r+0xfe>
 8005bac:	2300      	movs	r3, #0
 8005bae:	3401      	adds	r4, #1
 8005bb0:	9305      	str	r3, [sp, #20]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f04f 0c0a 	mov.w	ip, #10
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bbe:	3a30      	subs	r2, #48	@ 0x30
 8005bc0:	2a09      	cmp	r2, #9
 8005bc2:	d903      	bls.n	8005bcc <_vfiprintf_r+0x1cc>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0c6      	beq.n	8005b56 <_vfiprintf_r+0x156>
 8005bc8:	9105      	str	r1, [sp, #20]
 8005bca:	e7c4      	b.n	8005b56 <_vfiprintf_r+0x156>
 8005bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e7f0      	b.n	8005bb8 <_vfiprintf_r+0x1b8>
 8005bd6:	ab03      	add	r3, sp, #12
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	462a      	mov	r2, r5
 8005bdc:	4b12      	ldr	r3, [pc, #72]	@ (8005c28 <_vfiprintf_r+0x228>)
 8005bde:	a904      	add	r1, sp, #16
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7fd fbd9 	bl	8003398 <_printf_float>
 8005be6:	4607      	mov	r7, r0
 8005be8:	1c78      	adds	r0, r7, #1
 8005bea:	d1d6      	bne.n	8005b9a <_vfiprintf_r+0x19a>
 8005bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bee:	07d9      	lsls	r1, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_vfiprintf_r+0x1fe>
 8005bf2:	89ab      	ldrh	r3, [r5, #12]
 8005bf4:	059a      	lsls	r2, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_vfiprintf_r+0x1fe>
 8005bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bfa:	f7fe f929 	bl	8003e50 <__retarget_lock_release_recursive>
 8005bfe:	89ab      	ldrh	r3, [r5, #12]
 8005c00:	065b      	lsls	r3, r3, #25
 8005c02:	f53f af1f 	bmi.w	8005a44 <_vfiprintf_r+0x44>
 8005c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c08:	e71e      	b.n	8005a48 <_vfiprintf_r+0x48>
 8005c0a:	ab03      	add	r3, sp, #12
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	462a      	mov	r2, r5
 8005c10:	4b05      	ldr	r3, [pc, #20]	@ (8005c28 <_vfiprintf_r+0x228>)
 8005c12:	a904      	add	r1, sp, #16
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7fd fe57 	bl	80038c8 <_printf_i>
 8005c1a:	e7e4      	b.n	8005be6 <_vfiprintf_r+0x1e6>
 8005c1c:	08006570 	.word	0x08006570
 8005c20:	0800657a 	.word	0x0800657a
 8005c24:	08003399 	.word	0x08003399
 8005c28:	080059dd 	.word	0x080059dd
 8005c2c:	08006576 	.word	0x08006576

08005c30 <__swbuf_r>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	460e      	mov	r6, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	4605      	mov	r5, r0
 8005c38:	b118      	cbz	r0, 8005c42 <__swbuf_r+0x12>
 8005c3a:	6a03      	ldr	r3, [r0, #32]
 8005c3c:	b90b      	cbnz	r3, 8005c42 <__swbuf_r+0x12>
 8005c3e:	f7fd ffef 	bl	8003c20 <__sinit>
 8005c42:	69a3      	ldr	r3, [r4, #24]
 8005c44:	60a3      	str	r3, [r4, #8]
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	071a      	lsls	r2, r3, #28
 8005c4a:	d501      	bpl.n	8005c50 <__swbuf_r+0x20>
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	b943      	cbnz	r3, 8005c62 <__swbuf_r+0x32>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 f82a 	bl	8005cac <__swsetup_r>
 8005c58:	b118      	cbz	r0, 8005c62 <__swbuf_r+0x32>
 8005c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8005c5e:	4638      	mov	r0, r7
 8005c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	6922      	ldr	r2, [r4, #16]
 8005c66:	1a98      	subs	r0, r3, r2
 8005c68:	6963      	ldr	r3, [r4, #20]
 8005c6a:	b2f6      	uxtb	r6, r6
 8005c6c:	4283      	cmp	r3, r0
 8005c6e:	4637      	mov	r7, r6
 8005c70:	dc05      	bgt.n	8005c7e <__swbuf_r+0x4e>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f7ff fd99 	bl	80057ac <_fflush_r>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d1ed      	bne.n	8005c5a <__swbuf_r+0x2a>
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	60a3      	str	r3, [r4, #8]
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	6022      	str	r2, [r4, #0]
 8005c8a:	701e      	strb	r6, [r3, #0]
 8005c8c:	6962      	ldr	r2, [r4, #20]
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d004      	beq.n	8005c9e <__swbuf_r+0x6e>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	07db      	lsls	r3, r3, #31
 8005c98:	d5e1      	bpl.n	8005c5e <__swbuf_r+0x2e>
 8005c9a:	2e0a      	cmp	r6, #10
 8005c9c:	d1df      	bne.n	8005c5e <__swbuf_r+0x2e>
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7ff fd83 	bl	80057ac <_fflush_r>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0d9      	beq.n	8005c5e <__swbuf_r+0x2e>
 8005caa:	e7d6      	b.n	8005c5a <__swbuf_r+0x2a>

08005cac <__swsetup_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4b29      	ldr	r3, [pc, #164]	@ (8005d54 <__swsetup_r+0xa8>)
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	b118      	cbz	r0, 8005cc0 <__swsetup_r+0x14>
 8005cb8:	6a03      	ldr	r3, [r0, #32]
 8005cba:	b90b      	cbnz	r3, 8005cc0 <__swsetup_r+0x14>
 8005cbc:	f7fd ffb0 	bl	8003c20 <__sinit>
 8005cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc4:	0719      	lsls	r1, r3, #28
 8005cc6:	d422      	bmi.n	8005d0e <__swsetup_r+0x62>
 8005cc8:	06da      	lsls	r2, r3, #27
 8005cca:	d407      	bmi.n	8005cdc <__swsetup_r+0x30>
 8005ccc:	2209      	movs	r2, #9
 8005cce:	602a      	str	r2, [r5, #0]
 8005cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	e033      	b.n	8005d44 <__swsetup_r+0x98>
 8005cdc:	0758      	lsls	r0, r3, #29
 8005cde:	d512      	bpl.n	8005d06 <__swsetup_r+0x5a>
 8005ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ce2:	b141      	cbz	r1, 8005cf6 <__swsetup_r+0x4a>
 8005ce4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	d002      	beq.n	8005cf2 <__swsetup_r+0x46>
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7fe feff 	bl	8004af0 <_free_r>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6063      	str	r3, [r4, #4]
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f043 0308 	orr.w	r3, r3, #8
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	b94b      	cbnz	r3, 8005d26 <__swsetup_r+0x7a>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d1c:	d003      	beq.n	8005d26 <__swsetup_r+0x7a>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f883 	bl	8005e2c <__smakebuf_r>
 8005d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2a:	f013 0201 	ands.w	r2, r3, #1
 8005d2e:	d00a      	beq.n	8005d46 <__swsetup_r+0x9a>
 8005d30:	2200      	movs	r2, #0
 8005d32:	60a2      	str	r2, [r4, #8]
 8005d34:	6962      	ldr	r2, [r4, #20]
 8005d36:	4252      	negs	r2, r2
 8005d38:	61a2      	str	r2, [r4, #24]
 8005d3a:	6922      	ldr	r2, [r4, #16]
 8005d3c:	b942      	cbnz	r2, 8005d50 <__swsetup_r+0xa4>
 8005d3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d42:	d1c5      	bne.n	8005cd0 <__swsetup_r+0x24>
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	0799      	lsls	r1, r3, #30
 8005d48:	bf58      	it	pl
 8005d4a:	6962      	ldrpl	r2, [r4, #20]
 8005d4c:	60a2      	str	r2, [r4, #8]
 8005d4e:	e7f4      	b.n	8005d3a <__swsetup_r+0x8e>
 8005d50:	2000      	movs	r0, #0
 8005d52:	e7f7      	b.n	8005d44 <__swsetup_r+0x98>
 8005d54:	2000001c 	.word	0x2000001c

08005d58 <_raise_r>:
 8005d58:	291f      	cmp	r1, #31
 8005d5a:	b538      	push	{r3, r4, r5, lr}
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	d904      	bls.n	8005d6c <_raise_r+0x14>
 8005d62:	2316      	movs	r3, #22
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005d6e:	b112      	cbz	r2, 8005d76 <_raise_r+0x1e>
 8005d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d74:	b94b      	cbnz	r3, 8005d8a <_raise_r+0x32>
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f830 	bl	8005ddc <_getpid_r>
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4601      	mov	r1, r0
 8005d80:	4628      	mov	r0, r5
 8005d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d86:	f000 b817 	b.w	8005db8 <_kill_r>
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d00a      	beq.n	8005da4 <_raise_r+0x4c>
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	d103      	bne.n	8005d9a <_raise_r+0x42>
 8005d92:	2316      	movs	r3, #22
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7e7      	b.n	8005d6a <_raise_r+0x12>
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005da0:	4620      	mov	r0, r4
 8005da2:	4798      	blx	r3
 8005da4:	2000      	movs	r0, #0
 8005da6:	e7e0      	b.n	8005d6a <_raise_r+0x12>

08005da8 <raise>:
 8005da8:	4b02      	ldr	r3, [pc, #8]	@ (8005db4 <raise+0xc>)
 8005daa:	4601      	mov	r1, r0
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	f7ff bfd3 	b.w	8005d58 <_raise_r>
 8005db2:	bf00      	nop
 8005db4:	2000001c 	.word	0x2000001c

08005db8 <_kill_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	@ (8005dd8 <_kill_r+0x20>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f7fb fe09 	bl	80019dc <_kill>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d102      	bne.n	8005dd4 <_kill_r+0x1c>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	b103      	cbz	r3, 8005dd4 <_kill_r+0x1c>
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000368 	.word	0x20000368

08005ddc <_getpid_r>:
 8005ddc:	f7fb bdf6 	b.w	80019cc <_getpid>

08005de0 <__swhatbuf_r>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	460c      	mov	r4, r1
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	2900      	cmp	r1, #0
 8005dea:	b096      	sub	sp, #88	@ 0x58
 8005dec:	4615      	mov	r5, r2
 8005dee:	461e      	mov	r6, r3
 8005df0:	da0d      	bge.n	8005e0e <__swhatbuf_r+0x2e>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	bf14      	ite	ne
 8005dfe:	2340      	movne	r3, #64	@ 0x40
 8005e00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e04:	2000      	movs	r0, #0
 8005e06:	6031      	str	r1, [r6, #0]
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	b016      	add	sp, #88	@ 0x58
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
 8005e0e:	466a      	mov	r2, sp
 8005e10:	f000 f848 	bl	8005ea4 <_fstat_r>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	dbec      	blt.n	8005df2 <__swhatbuf_r+0x12>
 8005e18:	9901      	ldr	r1, [sp, #4]
 8005e1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e22:	4259      	negs	r1, r3
 8005e24:	4159      	adcs	r1, r3
 8005e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e2a:	e7eb      	b.n	8005e04 <__swhatbuf_r+0x24>

08005e2c <__smakebuf_r>:
 8005e2c:	898b      	ldrh	r3, [r1, #12]
 8005e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e30:	079d      	lsls	r5, r3, #30
 8005e32:	4606      	mov	r6, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	d507      	bpl.n	8005e48 <__smakebuf_r+0x1c>
 8005e38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	2301      	movs	r3, #1
 8005e42:	6163      	str	r3, [r4, #20]
 8005e44:	b003      	add	sp, #12
 8005e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e48:	ab01      	add	r3, sp, #4
 8005e4a:	466a      	mov	r2, sp
 8005e4c:	f7ff ffc8 	bl	8005de0 <__swhatbuf_r>
 8005e50:	9f00      	ldr	r7, [sp, #0]
 8005e52:	4605      	mov	r5, r0
 8005e54:	4639      	mov	r1, r7
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7fe febe 	bl	8004bd8 <_malloc_r>
 8005e5c:	b948      	cbnz	r0, 8005e72 <__smakebuf_r+0x46>
 8005e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e62:	059a      	lsls	r2, r3, #22
 8005e64:	d4ee      	bmi.n	8005e44 <__smakebuf_r+0x18>
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	e7e2      	b.n	8005e38 <__smakebuf_r+0xc>
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	6020      	str	r0, [r4, #0]
 8005e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e82:	b15b      	cbz	r3, 8005e9c <__smakebuf_r+0x70>
 8005e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f81d 	bl	8005ec8 <_isatty_r>
 8005e8e:	b128      	cbz	r0, 8005e9c <__smakebuf_r+0x70>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	431d      	orrs	r5, r3
 8005ea0:	81a5      	strh	r5, [r4, #12]
 8005ea2:	e7cf      	b.n	8005e44 <__smakebuf_r+0x18>

08005ea4 <_fstat_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4d07      	ldr	r5, [pc, #28]	@ (8005ec4 <_fstat_r+0x20>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	f7fb fdf3 	bl	8001a9c <_fstat>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d102      	bne.n	8005ec0 <_fstat_r+0x1c>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	b103      	cbz	r3, 8005ec0 <_fstat_r+0x1c>
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000368 	.word	0x20000368

08005ec8 <_isatty_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d06      	ldr	r5, [pc, #24]	@ (8005ee4 <_isatty_r+0x1c>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7fb fdf2 	bl	8001abc <_isatty>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_isatty_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_isatty_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20000368 	.word	0x20000368

08005ee8 <log>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	ed2d 8b02 	vpush	{d8}
 8005eee:	ec55 4b10 	vmov	r4, r5, d0
 8005ef2:	f000 f841 	bl	8005f78 <__ieee754_log>
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	4620      	mov	r0, r4
 8005efc:	4629      	mov	r1, r5
 8005efe:	eeb0 8a40 	vmov.f32	s16, s0
 8005f02:	eef0 8a60 	vmov.f32	s17, s1
 8005f06:	f7fa fe11 	bl	8000b2c <__aeabi_dcmpun>
 8005f0a:	b998      	cbnz	r0, 8005f34 <log+0x4c>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa fe00 	bl	8000b18 <__aeabi_dcmpgt>
 8005f18:	b960      	cbnz	r0, 8005f34 <log+0x4c>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f26:	b160      	cbz	r0, 8005f42 <log+0x5a>
 8005f28:	f7fd ff66 	bl	8003df8 <__errno>
 8005f2c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8005f58 <log+0x70>
 8005f30:	2322      	movs	r3, #34	@ 0x22
 8005f32:	6003      	str	r3, [r0, #0]
 8005f34:	eeb0 0a48 	vmov.f32	s0, s16
 8005f38:	eef0 0a68 	vmov.f32	s1, s17
 8005f3c:	ecbd 8b02 	vpop	{d8}
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	f7fd ff59 	bl	8003df8 <__errno>
 8005f46:	ecbd 8b02 	vpop	{d8}
 8005f4a:	2321      	movs	r3, #33	@ 0x21
 8005f4c:	6003      	str	r3, [r0, #0]
 8005f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f52:	4803      	ldr	r0, [pc, #12]	@ (8005f60 <log+0x78>)
 8005f54:	f000 b808 	b.w	8005f68 <nan>
 8005f58:	00000000 	.word	0x00000000
 8005f5c:	fff00000 	.word	0xfff00000
 8005f60:	080065c6 	.word	0x080065c6
 8005f64:	00000000 	.word	0x00000000

08005f68 <nan>:
 8005f68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005f70 <nan+0x8>
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	00000000 	.word	0x00000000
 8005f74:	7ff80000 	.word	0x7ff80000

08005f78 <__ieee754_log>:
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	ec51 0b10 	vmov	r0, r1, d0
 8005f80:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005f84:	b087      	sub	sp, #28
 8005f86:	460d      	mov	r5, r1
 8005f88:	da26      	bge.n	8005fd8 <__ieee754_log+0x60>
 8005f8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f8e:	4303      	orrs	r3, r0
 8005f90:	4602      	mov	r2, r0
 8005f92:	d10a      	bne.n	8005faa <__ieee754_log+0x32>
 8005f94:	49ce      	ldr	r1, [pc, #824]	@ (80062d0 <__ieee754_log+0x358>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7fa fc56 	bl	800084c <__aeabi_ddiv>
 8005fa0:	ec41 0b10 	vmov	d0, r0, r1
 8005fa4:	b007      	add	sp, #28
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	2900      	cmp	r1, #0
 8005fac:	da05      	bge.n	8005fba <__ieee754_log+0x42>
 8005fae:	460b      	mov	r3, r1
 8005fb0:	f7fa f96a 	bl	8000288 <__aeabi_dsub>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e7f0      	b.n	8005f9c <__ieee754_log+0x24>
 8005fba:	4bc6      	ldr	r3, [pc, #792]	@ (80062d4 <__ieee754_log+0x35c>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	4ac3      	ldr	r2, [pc, #780]	@ (80062d8 <__ieee754_log+0x360>)
 8005fca:	4295      	cmp	r5, r2
 8005fcc:	dd06      	ble.n	8005fdc <__ieee754_log+0x64>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	f7fa f95b 	bl	800028c <__adddf3>
 8005fd6:	e7e3      	b.n	8005fa0 <__ieee754_log+0x28>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e7f5      	b.n	8005fc8 <__ieee754_log+0x50>
 8005fdc:	152c      	asrs	r4, r5, #20
 8005fde:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8005fe2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005fe6:	441c      	add	r4, r3
 8005fe8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8005fec:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8005ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8005ff8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8005ffc:	ea42 0105 	orr.w	r1, r2, r5
 8006000:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006004:	2200      	movs	r2, #0
 8006006:	4bb5      	ldr	r3, [pc, #724]	@ (80062dc <__ieee754_log+0x364>)
 8006008:	f7fa f93e 	bl	8000288 <__aeabi_dsub>
 800600c:	1cab      	adds	r3, r5, #2
 800600e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006012:	2b02      	cmp	r3, #2
 8006014:	4682      	mov	sl, r0
 8006016:	468b      	mov	fp, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	dc53      	bgt.n	80060c6 <__ieee754_log+0x14e>
 800601e:	2300      	movs	r3, #0
 8006020:	f7fa fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006024:	b1d0      	cbz	r0, 800605c <__ieee754_log+0xe4>
 8006026:	2c00      	cmp	r4, #0
 8006028:	f000 8120 	beq.w	800626c <__ieee754_log+0x2f4>
 800602c:	4620      	mov	r0, r4
 800602e:	f7fa fa79 	bl	8000524 <__aeabi_i2d>
 8006032:	a391      	add	r3, pc, #580	@ (adr r3, 8006278 <__ieee754_log+0x300>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	f7fa fadc 	bl	80005f8 <__aeabi_dmul>
 8006040:	a38f      	add	r3, pc, #572	@ (adr r3, 8006280 <__ieee754_log+0x308>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	4604      	mov	r4, r0
 8006048:	460d      	mov	r5, r1
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa fad3 	bl	80005f8 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	e7ba      	b.n	8005fd2 <__ieee754_log+0x5a>
 800605c:	a38a      	add	r3, pc, #552	@ (adr r3, 8006288 <__ieee754_log+0x310>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	4650      	mov	r0, sl
 8006064:	4659      	mov	r1, fp
 8006066:	f7fa fac7 	bl	80005f8 <__aeabi_dmul>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	2000      	movs	r0, #0
 8006070:	499b      	ldr	r1, [pc, #620]	@ (80062e0 <__ieee754_log+0x368>)
 8006072:	f7fa f909 	bl	8000288 <__aeabi_dsub>
 8006076:	4652      	mov	r2, sl
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	465b      	mov	r3, fp
 800607e:	4650      	mov	r0, sl
 8006080:	4659      	mov	r1, fp
 8006082:	f7fa fab9 	bl	80005f8 <__aeabi_dmul>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4630      	mov	r0, r6
 800608c:	4639      	mov	r1, r7
 800608e:	f7fa fab3 	bl	80005f8 <__aeabi_dmul>
 8006092:	4606      	mov	r6, r0
 8006094:	460f      	mov	r7, r1
 8006096:	b914      	cbnz	r4, 800609e <__ieee754_log+0x126>
 8006098:	4632      	mov	r2, r6
 800609a:	463b      	mov	r3, r7
 800609c:	e0a0      	b.n	80061e0 <__ieee754_log+0x268>
 800609e:	4620      	mov	r0, r4
 80060a0:	f7fa fa40 	bl	8000524 <__aeabi_i2d>
 80060a4:	a374      	add	r3, pc, #464	@ (adr r3, 8006278 <__ieee754_log+0x300>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	4680      	mov	r8, r0
 80060ac:	4689      	mov	r9, r1
 80060ae:	f7fa faa3 	bl	80005f8 <__aeabi_dmul>
 80060b2:	a373      	add	r3, pc, #460	@ (adr r3, 8006280 <__ieee754_log+0x308>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	4640      	mov	r0, r8
 80060be:	4649      	mov	r1, r9
 80060c0:	f7fa fa9a 	bl	80005f8 <__aeabi_dmul>
 80060c4:	e0a5      	b.n	8006212 <__ieee754_log+0x29a>
 80060c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060ca:	f7fa f8df 	bl	800028c <__adddf3>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4650      	mov	r0, sl
 80060d4:	4659      	mov	r1, fp
 80060d6:	f7fa fbb9 	bl	800084c <__aeabi_ddiv>
 80060da:	e9cd 0100 	strd	r0, r1, [sp]
 80060de:	4620      	mov	r0, r4
 80060e0:	f7fa fa20 	bl	8000524 <__aeabi_i2d>
 80060e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	f7fa fa82 	bl	80005f8 <__aeabi_dmul>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060fc:	f7fa fa7c 	bl	80005f8 <__aeabi_dmul>
 8006100:	a363      	add	r3, pc, #396	@ (adr r3, 8006290 <__ieee754_log+0x318>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	4680      	mov	r8, r0
 8006108:	4689      	mov	r9, r1
 800610a:	f7fa fa75 	bl	80005f8 <__aeabi_dmul>
 800610e:	a362      	add	r3, pc, #392	@ (adr r3, 8006298 <__ieee754_log+0x320>)
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa f8ba 	bl	800028c <__adddf3>
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	a35f      	add	r3, pc, #380	@ (adr r3, 80062a0 <__ieee754_log+0x328>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa f8b1 	bl	800028c <__adddf3>
 800612a:	4642      	mov	r2, r8
 800612c:	464b      	mov	r3, r9
 800612e:	f7fa fa63 	bl	80005f8 <__aeabi_dmul>
 8006132:	a35d      	add	r3, pc, #372	@ (adr r3, 80062a8 <__ieee754_log+0x330>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa f8a8 	bl	800028c <__adddf3>
 800613c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006140:	f7fa fa5a 	bl	80005f8 <__aeabi_dmul>
 8006144:	a35a      	add	r3, pc, #360	@ (adr r3, 80062b0 <__ieee754_log+0x338>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fa51 	bl	80005f8 <__aeabi_dmul>
 8006156:	a358      	add	r3, pc, #352	@ (adr r3, 80062b8 <__ieee754_log+0x340>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa f896 	bl	800028c <__adddf3>
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	f7fa fa48 	bl	80005f8 <__aeabi_dmul>
 8006168:	a355      	add	r3, pc, #340	@ (adr r3, 80062c0 <__ieee754_log+0x348>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa f88d 	bl	800028c <__adddf3>
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	f7fa fa3f 	bl	80005f8 <__aeabi_dmul>
 800617a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8006186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800618a:	f7fa f87f 	bl	800028c <__adddf3>
 800618e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8006192:	3551      	adds	r5, #81	@ 0x51
 8006194:	4335      	orrs	r5, r6
 8006196:	2d00      	cmp	r5, #0
 8006198:	4680      	mov	r8, r0
 800619a:	4689      	mov	r9, r1
 800619c:	dd48      	ble.n	8006230 <__ieee754_log+0x2b8>
 800619e:	4b50      	ldr	r3, [pc, #320]	@ (80062e0 <__ieee754_log+0x368>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	4650      	mov	r0, sl
 80061a4:	4659      	mov	r1, fp
 80061a6:	f7fa fa27 	bl	80005f8 <__aeabi_dmul>
 80061aa:	4652      	mov	r2, sl
 80061ac:	465b      	mov	r3, fp
 80061ae:	f7fa fa23 	bl	80005f8 <__aeabi_dmul>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4606      	mov	r6, r0
 80061b8:	460f      	mov	r7, r1
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa f865 	bl	800028c <__adddf3>
 80061c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061c6:	f7fa fa17 	bl	80005f8 <__aeabi_dmul>
 80061ca:	4680      	mov	r8, r0
 80061cc:	4689      	mov	r9, r1
 80061ce:	b964      	cbnz	r4, 80061ea <__ieee754_log+0x272>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa f856 	bl	8000288 <__aeabi_dsub>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4650      	mov	r0, sl
 80061e2:	4659      	mov	r1, fp
 80061e4:	f7fa f850 	bl	8000288 <__aeabi_dsub>
 80061e8:	e6da      	b.n	8005fa0 <__ieee754_log+0x28>
 80061ea:	a323      	add	r3, pc, #140	@ (adr r3, 8006278 <__ieee754_log+0x300>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f4:	f7fa fa00 	bl	80005f8 <__aeabi_dmul>
 80061f8:	a321      	add	r3, pc, #132	@ (adr r3, 8006280 <__ieee754_log+0x308>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	4604      	mov	r4, r0
 8006200:	460d      	mov	r5, r1
 8006202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006206:	f7fa f9f7 	bl	80005f8 <__aeabi_dmul>
 800620a:	4642      	mov	r2, r8
 800620c:	464b      	mov	r3, r9
 800620e:	f7fa f83d 	bl	800028c <__adddf3>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa f835 	bl	8000288 <__aeabi_dsub>
 800621e:	4652      	mov	r2, sl
 8006220:	465b      	mov	r3, fp
 8006222:	f7fa f831 	bl	8000288 <__aeabi_dsub>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	e7d9      	b.n	80061e4 <__ieee754_log+0x26c>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4650      	mov	r0, sl
 8006236:	4659      	mov	r1, fp
 8006238:	f7fa f826 	bl	8000288 <__aeabi_dsub>
 800623c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006240:	f7fa f9da 	bl	80005f8 <__aeabi_dmul>
 8006244:	4606      	mov	r6, r0
 8006246:	460f      	mov	r7, r1
 8006248:	2c00      	cmp	r4, #0
 800624a:	f43f af25 	beq.w	8006098 <__ieee754_log+0x120>
 800624e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006278 <__ieee754_log+0x300>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006258:	f7fa f9ce 	bl	80005f8 <__aeabi_dmul>
 800625c:	a308      	add	r3, pc, #32	@ (adr r3, 8006280 <__ieee754_log+0x308>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	4604      	mov	r4, r0
 8006264:	460d      	mov	r5, r1
 8006266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626a:	e729      	b.n	80060c0 <__ieee754_log+0x148>
 800626c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80062c8 <__ieee754_log+0x350>
 8006270:	e698      	b.n	8005fa4 <__ieee754_log+0x2c>
 8006272:	bf00      	nop
 8006274:	f3af 8000 	nop.w
 8006278:	fee00000 	.word	0xfee00000
 800627c:	3fe62e42 	.word	0x3fe62e42
 8006280:	35793c76 	.word	0x35793c76
 8006284:	3dea39ef 	.word	0x3dea39ef
 8006288:	55555555 	.word	0x55555555
 800628c:	3fd55555 	.word	0x3fd55555
 8006290:	df3e5244 	.word	0xdf3e5244
 8006294:	3fc2f112 	.word	0x3fc2f112
 8006298:	96cb03de 	.word	0x96cb03de
 800629c:	3fc74664 	.word	0x3fc74664
 80062a0:	94229359 	.word	0x94229359
 80062a4:	3fd24924 	.word	0x3fd24924
 80062a8:	55555593 	.word	0x55555593
 80062ac:	3fe55555 	.word	0x3fe55555
 80062b0:	d078c69f 	.word	0xd078c69f
 80062b4:	3fc39a09 	.word	0x3fc39a09
 80062b8:	1d8e78af 	.word	0x1d8e78af
 80062bc:	3fcc71c5 	.word	0x3fcc71c5
 80062c0:	9997fa04 	.word	0x9997fa04
 80062c4:	3fd99999 	.word	0x3fd99999
	...
 80062d0:	c3500000 	.word	0xc3500000
 80062d4:	43500000 	.word	0x43500000
 80062d8:	7fefffff 	.word	0x7fefffff
 80062dc:	3ff00000 	.word	0x3ff00000
 80062e0:	3fe00000 	.word	0x3fe00000

080062e4 <_init>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr

080062f0 <_fini>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr
