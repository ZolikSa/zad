
zad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006d30  08006d30  00007d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007110  08007110  000091e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007110  08007110  00008110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007118  08007118  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007118  08007118  00008118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800711c  0800711c  0000811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08007120  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091e0  2**0
                  CONTENTS
 10 .bss          000001a0  200001e0  200001e0  000091e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  000091e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006bf0  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c41  00000000  00000000  0000fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00011a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000627  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b05  00000000  00000000  000128ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000080b8  00000000  00000000  0002a404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077a00  00000000  00000000  000324bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a9ebc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003588  00000000  00000000  000a9f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000ad488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d14 	.word	0x08006d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006d14 	.word	0x08006d14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	@ (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	4907      	ldr	r1, [pc, #28]	@ (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff ffe3 	bl	8000d5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d96:	f7ff ff57 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffa7 	bl	8000cf4 <NVIC_EncodePriority>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	2010      	movs	r0, #16
 8000dac:	f7ff ff78 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000db0:	2010      	movs	r0, #16
 8000db2:	f7ff ff57 	bl	8000c64 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000db6:	f7ff ff47 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff97 	bl	8000cf4 <NVIC_EncodePriority>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2011      	movs	r0, #17
 8000dcc:	f7ff ff68 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_EnableIRQ>

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <LL_AHB1_GRP1_EnableClock>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000de6:	695a      	ldr	r2, [r3, #20]
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4013      	ands	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e10:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e14:	f7ff ffe2 	bl	8000ddc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e18:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000e1c:	f7ff ffde 	bl	8000ddc <LL_AHB1_GRP1_EnableClock>

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <__NVIC_GetPriorityGrouping>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	@ (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	@ 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000faa:	f023 0306 	bic.w	r3, r3, #6
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	60da      	str	r2, [r3, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60da      	str	r2, [r3, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d101      	bne.n	8000ffe <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b04      	cmp	r3, #4
 800101e:	d101      	bne.n	8001024 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	2b20      	cmp	r3, #32
 8001044:	d101      	bne.n	800104a <LL_I2C_IsActiveFlag_STOP+0x18>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001068:	2b40      	cmp	r3, #64	@ 0x40
 800106a:	d101      	bne.n	8001070 <LL_I2C_IsActiveFlag_TC+0x18>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <LL_I2C_IsActiveFlag_TC+0x1a>
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f043 0220 	orr.w	r2, r3, #32
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	61da      	str	r2, [r3, #28]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010da:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010e4:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	4313      	orrs	r3, r2
 80010ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	0d5b      	lsrs	r3, r3, #21
 80010fc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <LL_I2C_HandleTransfer+0x5c>)
 8001102:	430b      	orrs	r3, r1
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	431a      	orrs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	03ff7bff 	.word	0x03ff7bff

08001120 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001146:	78fa      	ldrb	r2, [r7, #3]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_AHB1_GRP1_EnableClock>:
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	4907      	ldr	r1, [pc, #28]	@ (8001184 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4313      	orrs	r3, r2
 800116a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4013      	ands	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000

08001188 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4013      	ands	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_I2C1_Init>:
//I2C_Read_Callback I2C_Read = I2C_ReadData;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	@ 0x38
 80011bc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011e2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80011e6:	f7ff ffb7 	bl	8001158 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011ea:	23c0      	movs	r3, #192	@ 0xc0
 80011ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011ee:	2302      	movs	r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80011f6:	2301      	movs	r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80011fe:	2304      	movs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <MX_I2C1_Init+0xd4>)
 8001208:	f001 fa0e 	bl	8002628 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800120c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001210:	f7ff ffba 	bl	8001188 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001214:	f7ff fe06 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8001218:	4603      	mov	r3, r0
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fe56 	bl	8000ed0 <NVIC_EncodePriority>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	201f      	movs	r0, #31
 800122a:	f7ff fe27 	bl	8000e7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800122e:	201f      	movs	r0, #31
 8001230:	f7ff fe06 	bl	8000e40 <__NVIC_EnableIRQ>

  /** I2C Initialization*/
  LL_I2C_EnableAutoEndMode(I2C1);
 8001234:	4816      	ldr	r0, [pc, #88]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001236:	f7ff ff32 	bl	800109e <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800123a:	4815      	ldr	r0, [pc, #84]	@ (8001290 <MX_I2C1_Init+0xd8>)
 800123c:	f7ff fec3 	bl	8000fc6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001240:	4813      	ldr	r0, [pc, #76]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001242:	f7ff fe98 	bl	8000f76 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001248:	f7ff fe85 	bl	8000f56 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D2B;
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_I2C1_Init+0xdc>)
 8001252:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001270:	f001 faed 	bl	800284e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_I2C1_Init+0xd8>)
 800127a:	f7ff fe8c 	bl	8000f96 <LL_I2C_SetOwnAddress2>
  LL_I2C_Enable(I2C1);
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_I2C1_Init+0xd8>)
 8001280:	f7ff fe59 	bl	8000f36 <LL_I2C_Enable>
}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	@ 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	48000400 	.word	0x48000400
 8001290:	40005400 	.word	0x40005400
 8001294:	00101d2b 	.word	0x00101d2b

08001298 <I2C_WriteData>:

void I2C_WriteData(uint8_t slave_addr, uint8_t register_addr, uint8_t *data, uint8_t length)
  {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	603a      	str	r2, [r7, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	460b      	mov	r3, r1
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	4613      	mov	r3, r2
 80012ac:	717b      	strb	r3, [r7, #5]
	if(length > 1)
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d903      	bls.n	80012bc <I2C_WriteData+0x24>
			register_addr |= (1 << 7);
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ba:	71bb      	strb	r3, [r7, #6]
	if (length == 0) return;
 80012bc:	797b      	ldrb	r3, [r7, #5]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d036      	beq.n	8001330 <I2C_WriteData+0x98>
    /* Start the I2C write transfer with register address */
    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80012c2:	79f9      	ldrb	r1, [r7, #7]
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	3301      	adds	r3, #1
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <I2C_WriteData+0xa0>)
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	2200      	movs	r2, #0
 80012d8:	4818      	ldr	r0, [pc, #96]	@ (800133c <I2C_WriteData+0xa4>)
 80012da:	f7ff fef1 	bl	80010c0 <LL_I2C_HandleTransfer>
    /* Transmit the register address */
    LL_I2C_TransmitData8(I2C1, register_addr);
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4816      	ldr	r0, [pc, #88]	@ (800133c <I2C_WriteData+0xa4>)
 80012e4:	f7ff ff29 	bl	800113a <LL_I2C_TransmitData8>

    for (uint8_t i = 0; i < length; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e011      	b.n	8001312 <I2C_WriteData+0x7a>
     	 {
          while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80012ee:	bf00      	nop
 80012f0:	4812      	ldr	r0, [pc, #72]	@ (800133c <I2C_WriteData+0xa4>)
 80012f2:	f7ff fe78 	bl	8000fe6 <LL_I2C_IsActiveFlag_TXIS>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f9      	beq.n	80012f0 <I2C_WriteData+0x58>
          LL_I2C_TransmitData8(I2C1, data[i]);
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <I2C_WriteData+0xa4>)
 8001308:	f7ff ff17 	bl	800113a <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < length; i++)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3e9      	bcc.n	80012ee <I2C_WriteData+0x56>
     	 }
    while (!LL_I2C_IsActiveFlag_STOP(I2C1));
 800131a:	bf00      	nop
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <I2C_WriteData+0xa4>)
 800131e:	f7ff fe88 	bl	8001032 <LL_I2C_IsActiveFlag_STOP>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f9      	beq.n	800131c <I2C_WriteData+0x84>
    LL_I2C_ClearFlag_STOP(I2C1);
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <I2C_WriteData+0xa4>)
 800132a:	f7ff fea8 	bl	800107e <LL_I2C_ClearFlag_STOP>
 800132e:	e000      	b.n	8001332 <I2C_WriteData+0x9a>
	if (length == 0) return;
 8001330:	bf00      	nop
  }
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	80002000 	.word	0x80002000
 800133c:	40005400 	.word	0x40005400

08001340 <I2C_ReadData>:

void I2C_ReadData(uint8_t slave_addr, uint8_t register_addr, uint8_t *data, uint8_t length)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af02      	add	r7, sp, #8
 8001346:	603a      	str	r2, [r7, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
	if(length > 1)
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d903      	bls.n	8001364 <I2C_ReadData+0x24>
		register_addr |= (1 << 7);
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001362:	71bb      	strb	r3, [r7, #6]

    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8001364:	79f9      	ldrb	r1, [r7, #7]
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <I2C_ReadData+0xb4>)
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2200      	movs	r2, #0
 8001372:	4821      	ldr	r0, [pc, #132]	@ (80013f8 <I2C_ReadData+0xb8>)
 8001374:	f7ff fea4 	bl	80010c0 <LL_I2C_HandleTransfer>
    LL_I2C_TransmitData8(I2C1, register_addr);
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	4619      	mov	r1, r3
 800137c:	481e      	ldr	r0, [pc, #120]	@ (80013f8 <I2C_ReadData+0xb8>)
 800137e:	f7ff fedc 	bl	800113a <LL_I2C_TransmitData8>
    while (!LL_I2C_IsActiveFlag_TC(I2C1)); // Wait for transfer complete
 8001382:	bf00      	nop
 8001384:	481c      	ldr	r0, [pc, #112]	@ (80013f8 <I2C_ReadData+0xb8>)
 8001386:	f7ff fe67 	bl	8001058 <LL_I2C_IsActiveFlag_TC>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f9      	beq.n	8001384 <I2C_ReadData+0x44>

    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001390:	79f9      	ldrb	r1, [r7, #7]
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <I2C_ReadData+0xbc>)
 8001396:	9201      	str	r2, [sp, #4]
 8001398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <I2C_ReadData+0xb8>)
 80013a2:	f7ff fe8d 	bl	80010c0 <LL_I2C_HandleTransfer>

    for (uint8_t i = 0; i < length; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e011      	b.n	80013d0 <I2C_ReadData+0x90>
    	{
        while (!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80013ac:	bf00      	nop
 80013ae:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <I2C_ReadData+0xb8>)
 80013b0:	f7ff fe2c 	bl	800100c <LL_I2C_IsActiveFlag_RXNE>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f9      	beq.n	80013ae <I2C_ReadData+0x6e>
        data[i] = LL_I2C_ReceiveData8(I2C1);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	18d4      	adds	r4, r2, r3
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <I2C_ReadData+0xb8>)
 80013c2:	f7ff fead 	bl	8001120 <LL_I2C_ReceiveData8>
 80013c6:	4603      	mov	r3, r0
 80013c8:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < length; i++)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3e9      	bcc.n	80013ac <I2C_ReadData+0x6c>
    	}
    while (!LL_I2C_IsActiveFlag_STOP(I2C1));
 80013d8:	bf00      	nop
 80013da:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <I2C_ReadData+0xb8>)
 80013dc:	f7ff fe29 	bl	8001032 <LL_I2C_IsActiveFlag_STOP>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f9      	beq.n	80013da <I2C_ReadData+0x9a>
    LL_I2C_ClearFlag_STOP(I2C1);
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <I2C_ReadData+0xb8>)
 80013e8:	f7ff fe49 	bl	800107e <LL_I2C_ClearFlag_STOP>
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	80002000 	.word	0x80002000
 80013f8:	40005400 	.word	0x40005400
 80013fc:	80002400 	.word	0x80002400

08001400 <__NVIC_SetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_SetPriority>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	@ (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <LL_RCC_HSI_Enable+0x1c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <LL_RCC_HSI_Enable+0x1c>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <LL_RCC_HSI_IsReady+0x20>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b02      	cmp	r3, #2
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4904      	ldr	r1, [pc, #16]	@ (800158c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <LL_RCC_SetSysClkSource+0x24>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 0203 	bic.w	r2, r3, #3
 80015a0:	4904      	ldr	r1, [pc, #16]	@ (80015b4 <LL_RCC_SetSysClkSource+0x24>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <LL_RCC_GetSysClkSource+0x18>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e4:	4904      	ldr	r1, [pc, #16]	@ (80015f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000

080015fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800160c:	4904      	ldr	r1, [pc, #16]	@ (8001620 <LL_RCC_SetAPB1Prescaler+0x24>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000

08001624 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <LL_RCC_SetAPB2Prescaler+0x24>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001634:	4904      	ldr	r1, [pc, #16]	@ (8001648 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000

0800164c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <LL_RCC_SetI2CClockSource+0x2c>)
 8001656:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0e1b      	lsrs	r3, r3, #24
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001666:	4904      	ldr	r1, [pc, #16]	@ (8001678 <LL_RCC_SetI2CClockSource+0x2c>)
 8001668:	4313      	orrs	r3, r2
 800166a:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000

0800167c <LL_APB1_GRP1_EnableClock>:
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	4907      	ldr	r1, [pc, #28]	@ (80016a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000

080016dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <LL_FLASH_SetLatency+0x24>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 0207 	bic.w	r2, r3, #7
 80016ec:	4904      	ldr	r1, [pc, #16]	@ (8001700 <LL_FLASH_SetLatency+0x24>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40022000 	.word	0x40022000

08001704 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <LL_FLASH_GetLatency+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	b087      	sub	sp, #28
 8001726:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff ffbf 	bl	80016ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800172e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001732:	f7ff ffa3 	bl	800167c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f7ff fe62 	bl	8001400 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800173c:	f7ff fe84 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001740:	4603      	mov	r3, r0
 8001742:	2200      	movs	r2, #0
 8001744:	210f      	movs	r1, #15
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff feb6 	bl	80014b8 <NVIC_EncodePriority>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff fe86 	bl	8001464 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f8a6 	bl	80018a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f7ff fb56 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001760:	f7ff fb14 	bl	8000d8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001764:	f000 fd52 	bl	800220c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001768:	f7ff fd26 	bl	80011b8 <MX_I2C1_Init>
  hts221_init();
 800176c:	f001 fbb8 	bl	8002ee0 <hts221_init>
  lps25hb_init();
 8001770:	f001 fc9a 	bl	80030a8 <lps25hb_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  refference = lps25hb_get_pressure();
 8001774:	f001 fcd6 	bl	8003124 <lps25hb_get_pressure>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	4b42      	ldr	r3, [pc, #264]	@ (8001888 <main+0x168>)
 800177e:	edc3 7a00 	vstr	s15, [r3]

  while (1)
  {
	  pressure = lps25hb_get_pressure();
 8001782:	f001 fccf 	bl	8003124 <lps25hb_get_pressure>
 8001786:	eef0 7a40 	vmov.f32	s15, s0
 800178a:	4b40      	ldr	r3, [pc, #256]	@ (800188c <main+0x16c>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
	  height = (float)44330.00 * (1-pow(pressure/refference,1/5.255));
 8001790:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <main+0x16c>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	4b3c      	ldr	r3, [pc, #240]	@ (8001888 <main+0x168>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017a0:	ee16 0a90 	vmov	r0, s13
 80017a4:	f7fe fed0 	bl	8000548 <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8001878 <main+0x158>
 80017b0:	ec43 2b10 	vmov	d0, r2, r3
 80017b4:	f004 fb50 	bl	8005e58 <pow>
 80017b8:	ec53 2b10 	vmov	r2, r3, d0
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	4933      	ldr	r1, [pc, #204]	@ (8001890 <main+0x170>)
 80017c2:	f7fe fd61 	bl	8000288 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	a32c      	add	r3, pc, #176	@ (adr r3, 8001880 <main+0x160>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9e2 	bl	8000ba8 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <main+0x174>)
 80017e8:	6013      	str	r3, [r2, #0]
	  temperature=lps25hb_get_temperature();
 80017ea:	f001 fcc1 	bl	8003170 <lps25hb_get_temperature>
 80017ee:	eef0 7a40 	vmov.f32	s15, s0
 80017f2:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <main+0x178>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
	  humidity=hts221_get_humidity();
 80017f8:	f001 fba4 	bl	8002f44 <hts221_get_humidity>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b26      	ldr	r3, [pc, #152]	@ (800189c <main+0x17c>)
 8001802:	701a      	strb	r2, [r3, #0]
	  memset(formated_text, '\0', sizeof(formated_text));
 8001804:	221e      	movs	r2, #30
 8001806:	2100      	movs	r1, #0
 8001808:	4825      	ldr	r0, [pc, #148]	@ (80018a0 <main+0x180>)
 800180a:	f002 fa5a 	bl	8003cc2 <memset>
	  sprintf(formated_text, "%.1f,%d%,%.2f,%.2f\n\r", temperature,humidity,pressure, height);
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <main+0x178>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe98 	bl	8000548 <__aeabi_f2d>
 8001818:	4680      	mov	r8, r0
 800181a:	4689      	mov	r9, r1
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <main+0x17c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461e      	mov	r6, r3
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <main+0x16c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <main+0x174>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe87 	bl	8000548 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001842:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001846:	9600      	str	r6, [sp, #0]
 8001848:	4642      	mov	r2, r8
 800184a:	464b      	mov	r3, r9
 800184c:	4915      	ldr	r1, [pc, #84]	@ (80018a4 <main+0x184>)
 800184e:	4814      	ldr	r0, [pc, #80]	@ (80018a0 <main+0x180>)
 8001850:	f002 f9d4 	bl	8003bfc <siprintf>
	  USART2_PutBuffer((uint8_t*)formated_text, strlen(formated_text));
 8001854:	4812      	ldr	r0, [pc, #72]	@ (80018a0 <main+0x180>)
 8001856:	f7fe fd0b 	bl	8000270 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <main+0x180>)
 8001862:	f000 fd93 	bl	800238c <USART2_PutBuffer>
	  LL_mDelay(2000);
 8001866:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800186a:	f001 fad7 	bl	8002e1c <LL_mDelay>
	  pressure = lps25hb_get_pressure();
 800186e:	bf00      	nop
 8001870:	e787      	b.n	8001782 <main+0x62>
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	ccd9456c 	.word	0xccd9456c
 800187c:	3fc85b95 	.word	0x3fc85b95
 8001880:	00000000 	.word	0x00000000
 8001884:	40e5a540 	.word	0x40e5a540
 8001888:	20000208 	.word	0x20000208
 800188c:	20000204 	.word	0x20000204
 8001890:	3ff00000 	.word	0x3ff00000
 8001894:	2000020c 	.word	0x2000020c
 8001898:	20000200 	.word	0x20000200
 800189c:	200001fc 	.word	0x200001fc
 80018a0:	20000210 	.word	0x20000210
 80018a4:	08006d30 	.word	0x08006d30

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff ff15 	bl	80016dc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80018b2:	bf00      	nop
 80018b4:	f7ff ff26 	bl	8001704 <LL_FLASH_GetLatency>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1fa      	bne.n	80018b4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80018be:	f7ff fe2f 	bl	8001520 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80018c2:	bf00      	nop
 80018c4:	f7ff fe3c 	bl	8001540 <LL_RCC_HSI_IsReady>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d1fa      	bne.n	80018c4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80018ce:	2010      	movs	r0, #16
 80018d0:	f7ff fe48 	bl	8001564 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fe7d 	bl	80015d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fe8e 	bl	80015fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fe9f 	bl	8001624 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fe52 	bl	8001590 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80018ec:	bf00      	nop
 80018ee:	f7ff fe63 	bl	80015b8 <LL_RCC_GetSysClkSource>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1fa      	bne.n	80018ee <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <SystemClock_Config+0x68>)
 80018fa:	f001 fa81 	bl	8002e00 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80018fe:	4804      	ldr	r0, [pc, #16]	@ (8001910 <SystemClock_Config+0x68>)
 8001900:	f001 fab2 	bl	8002e68 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001904:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001908:	f7ff fea0 	bl	800164c <LL_RCC_SetI2CClockSource>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	007a1200 	.word	0x007a1200

08001914 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <LL_DMA_DisableChannel+0x3c>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	3a01      	subs	r2, #1
 8001932:	4907      	ldr	r1, [pc, #28]	@ (8001950 <LL_DMA_DisableChannel+0x3c>)
 8001934:	5c8a      	ldrb	r2, [r1, r2]
 8001936:	4611      	mov	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	440a      	add	r2, r1
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	08006d48 	.word	0x08006d48

08001954 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198a:	605a      	str	r2, [r3, #4]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a8:	2b40      	cmp	r3, #64	@ 0x40
 80019aa:	d101      	bne.n	80019b0 <LL_USART_IsActiveFlag_TC+0x18>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_USART_IsActiveFlag_TC+0x1a>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c2:	bf00      	nop
 80019c4:	e7fd      	b.n	80019c2 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <HardFault_Handler+0x4>

080019ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d2:	bf00      	nop
 80019d4:	e7fd      	b.n	80019d2 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	bf00      	nop
 80019dc:	e7fd      	b.n	80019da <BusFault_Handler+0x4>

080019de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
    if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001a30:	480a      	ldr	r0, [pc, #40]	@ (8001a5c <DMA1_Channel7_IRQHandler+0x30>)
 8001a32:	f7ff ff8f 	bl	8001954 <LL_DMA_IsActiveFlag_TC7>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10d      	bne.n	8001a58 <DMA1_Channel7_IRQHandler+0x2c>
    {
        LL_DMA_ClearFlag_TC7(DMA1);
 8001a3c:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <DMA1_Channel7_IRQHandler+0x30>)
 8001a3e:	f7ff ff9d 	bl	800197c <LL_DMA_ClearFlag_TC7>

        while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001a42:	bf00      	nop
 8001a44:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <DMA1_Channel7_IRQHandler+0x34>)
 8001a46:	f7ff ffa7 	bl	8001998 <LL_USART_IsActiveFlag_TC>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f9      	beq.n	8001a44 <DMA1_Channel7_IRQHandler+0x18>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001a50:	2107      	movs	r1, #7
 8001a52:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <DMA1_Channel7_IRQHandler+0x30>)
 8001a54:	f7ff ff5e 	bl	8001914 <LL_DMA_DisableChannel>
    }
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40004400 	.word	0x40004400

08001a64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_kill>:

int _kill(int pid, int sig)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a9a:	f002 f965 	bl	8003d68 <__errno>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2216      	movs	r2, #22
 8001aa2:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_exit>:

void _exit (int status)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ffe7 	bl	8001a90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac2:	bf00      	nop
 8001ac4:	e7fd      	b.n	8001ac2 <_exit+0x12>

08001ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e00a      	b.n	8001aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad8:	f3af 8000 	nop.w
 8001adc:	4601      	mov	r1, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dbf0      	blt.n	8001ad8 <_read+0x12>
  }

  return len;
 8001af6:	687b      	ldr	r3, [r7, #4]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e009      	b.n	8001b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	60ba      	str	r2, [r7, #8]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf1      	blt.n	8001b12 <_write+0x12>
  }
  return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_close>:

int _close(int file)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b60:	605a      	str	r2, [r3, #4]
  return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_isatty>:

int _isatty(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f002 f8ca 	bl	8003d68 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20003000 	.word	0x20003000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000230 	.word	0x20000230
 8001c08:	20000380 	.word	0x20000380

08001c0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	@ (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	@ (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <LL_DMA_EnableChannel>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <LL_DMA_EnableChannel+0x3c>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	3a01      	subs	r2, #1
 8001d62:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <LL_DMA_EnableChannel+0x3c>)
 8001d64:	5c8a      	ldrb	r2, [r1, r2]
 8001d66:	4611      	mov	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	440a      	add	r2, r1
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	08006d68 	.word	0x08006d68

08001d84 <LL_DMA_SetDataTransferDirection>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LL_DMA_SetDataTransferDirection+0x48>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001da4:	f023 0310 	bic.w	r3, r3, #16
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	3a01      	subs	r2, #1
 8001dac:	4907      	ldr	r1, [pc, #28]	@ (8001dcc <LL_DMA_SetDataTransferDirection+0x48>)
 8001dae:	5c8a      	ldrb	r2, [r1, r2]
 8001db0:	4611      	mov	r1, r2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	440a      	add	r2, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	08006d68 	.word	0x08006d68

08001dd0 <LL_DMA_SetMode>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <LL_DMA_SetMode+0x44>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	461a      	mov	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4413      	add	r3, r2
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0220 	bic.w	r2, r3, #32
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	4907      	ldr	r1, [pc, #28]	@ (8001e14 <LL_DMA_SetMode+0x44>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	4619      	mov	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	08006d68 	.word	0x08006d68

08001e18 <LL_DMA_SetPeriphIncMode>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <LL_DMA_SetPeriphIncMode+0x44>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <LL_DMA_SetPeriphIncMode+0x44>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	4619      	mov	r1, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	440b      	add	r3, r1
 8001e46:	4619      	mov	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	08006d68 	.word	0x08006d68

08001e60 <LL_DMA_SetMemoryIncMode>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4413      	add	r3, r2
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4907      	ldr	r1, [pc, #28]	@ (8001ea4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	440b      	add	r3, r1
 8001e8e:	4619      	mov	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	08006d68 	.word	0x08006d68

08001ea8 <LL_DMA_SetPeriphSize>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <LL_DMA_SetPeriphSize+0x44>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	4907      	ldr	r1, [pc, #28]	@ (8001eec <LL_DMA_SetPeriphSize+0x44>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	08006d68 	.word	0x08006d68

08001ef0 <LL_DMA_SetMemorySize>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	4a0c      	ldr	r2, [pc, #48]	@ (8001f34 <LL_DMA_SetMemorySize+0x44>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	4907      	ldr	r1, [pc, #28]	@ (8001f34 <LL_DMA_SetMemorySize+0x44>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	4619      	mov	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	08006d68 	.word	0x08006d68

08001f38 <LL_DMA_SetChannelPriorityLevel>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	4907      	ldr	r1, [pc, #28]	@ (8001f7c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	4619      	mov	r1, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	440b      	add	r3, r1
 8001f66:	4619      	mov	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	08006d68 	.word	0x08006d68

08001f80 <LL_DMA_SetDataLength>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <LL_DMA_SetDataLength+0x44>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	461a      	mov	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	3a01      	subs	r2, #1
 8001fa4:	4907      	ldr	r1, [pc, #28]	@ (8001fc4 <LL_DMA_SetDataLength+0x44>)
 8001fa6:	5c8a      	ldrb	r2, [r1, r2]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	440a      	add	r2, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	08006d68 	.word	0x08006d68

08001fc8 <LL_DMA_SetMemoryAddress>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a06      	ldr	r2, [pc, #24]	@ (8001ff4 <LL_DMA_SetMemoryAddress+0x2c>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	08006d68 	.word	0x08006d68

08001ff8 <LL_DMA_SetPeriphAddress>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3b01      	subs	r3, #1
 8002008:	4a06      	ldr	r2, [pc, #24]	@ (8002024 <LL_DMA_SetPeriphAddress+0x2c>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	461a      	mov	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	461a      	mov	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6093      	str	r3, [r2, #8]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	08006d68 	.word	0x08006d68

08002028 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <LL_DMA_EnableIT_TC+0x3c>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	3a01      	subs	r2, #1
 8002046:	4907      	ldr	r1, [pc, #28]	@ (8002064 <LL_DMA_EnableIT_TC+0x3c>)
 8002048:	5c8a      	ldrb	r2, [r1, r2]
 800204a:	4611      	mov	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	440a      	add	r2, r1
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6013      	str	r3, [r2, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	08006d68 	.word	0x08006d68

08002068 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <LL_DMA_EnableIT_TE+0x3c>)
 8002078:	5cd3      	ldrb	r3, [r2, r3]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	3a01      	subs	r2, #1
 8002086:	4907      	ldr	r1, [pc, #28]	@ (80020a4 <LL_DMA_EnableIT_TE+0x3c>)
 8002088:	5c8a      	ldrb	r2, [r1, r2]
 800208a:	4611      	mov	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	440a      	add	r2, r1
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6013      	str	r3, [r2, #0]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	08006d68 	.word	0x08006d68

080020a8 <LL_AHB1_GRP1_EnableClock>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	4907      	ldr	r1, [pc, #28]	@ (80020d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000

080020d8 <LL_APB1_GRP1_EnableClock>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000

08002108 <LL_USART_Enable>:
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_USART_ConfigAsyncMode>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3308      	adds	r3, #8
 8002160:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	60bb      	str	r3, [r7, #8]
   return(result);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3308      	adds	r3, #8
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	61ba      	str	r2, [r7, #24]
 800217a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	6979      	ldr	r1, [r7, #20]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	613b      	str	r3, [r7, #16]
   return(result);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e7      	bne.n	800215c <LL_USART_DisableIT_CTS+0x8>
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800219a:	b480      	push	{r7}
 800219c:	b089      	sub	sp, #36	@ 0x24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3308      	adds	r3, #8
 80021a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3308      	adds	r3, #8
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	61ba      	str	r2, [r7, #24]
 80021c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6979      	ldr	r1, [r7, #20]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	613b      	str	r3, [r7, #16]
   return(result);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e7      	bne.n	80021a2 <LL_USART_EnableDMAReq_TX+0x8>
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3724      	adds	r7, #36	@ 0x24
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3328      	adds	r3, #40	@ 0x28
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e002      	b.n	80021fe <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3324      	adds	r3, #36	@ 0x24
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <MX_USART2_UART_Init>:
	}
}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	@ 0x38
 8002210:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	615a      	str	r2, [r3, #20]
 8002224:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	615a      	str	r2, [r3, #20]

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002236:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800223a:	f7ff ff4d 	bl	80020d8 <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800223e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002242:	f7ff ff31 	bl	80020a8 <LL_AHB1_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002246:	f248 0304 	movw	r3, #32772	@ 0x8004
 800224a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800224c:	2302      	movs	r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800225c:	2307      	movs	r3, #7
 800225e:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002268:	f000 f9de 	bl	8002628 <LL_GPIO_Init>


	/* USART2_RX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800226c:	2200      	movs	r2, #0
 800226e:	2106      	movs	r1, #6
 8002270:	4844      	ldr	r0, [pc, #272]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 8002272:	f7ff fd87 	bl	8001d84 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002276:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800227a:	2106      	movs	r1, #6
 800227c:	4841      	ldr	r0, [pc, #260]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 800227e:	f7ff fe5b 	bl	8001f38 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8002282:	2220      	movs	r2, #32
 8002284:	2106      	movs	r1, #6
 8002286:	483f      	ldr	r0, [pc, #252]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 8002288:	f7ff fda2 	bl	8001dd0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800228c:	2200      	movs	r2, #0
 800228e:	2106      	movs	r1, #6
 8002290:	483c      	ldr	r0, [pc, #240]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 8002292:	f7ff fdc1 	bl	8001e18 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002296:	2280      	movs	r2, #128	@ 0x80
 8002298:	2106      	movs	r1, #6
 800229a:	483a      	ldr	r0, [pc, #232]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 800229c:	f7ff fde0 	bl	8001e60 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2106      	movs	r1, #6
 80022a4:	4837      	ldr	r0, [pc, #220]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022a6:	f7ff fdff 	bl	8001ea8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2106      	movs	r1, #6
 80022ae:	4835      	ldr	r0, [pc, #212]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022b0:	f7ff fe1e 	bl	8001ef0 <LL_DMA_SetMemorySize>

	/* USART2_TX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80022b4:	2210      	movs	r2, #16
 80022b6:	2107      	movs	r1, #7
 80022b8:	4832      	ldr	r0, [pc, #200]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022ba:	f7ff fd63 	bl	8001d84 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80022be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c2:	2107      	movs	r1, #7
 80022c4:	482f      	ldr	r0, [pc, #188]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022c6:	f7ff fe37 	bl	8001f38 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2107      	movs	r1, #7
 80022ce:	482d      	ldr	r0, [pc, #180]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022d0:	f7ff fd7e 	bl	8001dd0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2107      	movs	r1, #7
 80022d8:	482a      	ldr	r0, [pc, #168]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022da:	f7ff fd9d 	bl	8001e18 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	2107      	movs	r1, #7
 80022e2:	4828      	ldr	r0, [pc, #160]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022e4:	f7ff fdbc 	bl	8001e60 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2107      	movs	r1, #7
 80022ec:	4825      	ldr	r0, [pc, #148]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022ee:	f7ff fddb 	bl	8001ea8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2107      	movs	r1, #7
 80022f6:	4823      	ldr	r0, [pc, #140]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 80022f8:	f7ff fdfa 	bl	8001ef0 <LL_DMA_SetMemorySize>

	/*data transfer to USART2 via DMA*/
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80022fc:	2100      	movs	r1, #0
 80022fe:	4822      	ldr	r0, [pc, #136]	@ (8002388 <MX_USART2_UART_Init+0x17c>)
 8002300:	f7ff ff6e 	bl	80021e0 <LL_USART_DMA_GetRegAddr>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	2107      	movs	r1, #7
 800230a:	481e      	ldr	r0, [pc, #120]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 800230c:	f7ff fe74 	bl	8001ff8 <LL_DMA_SetPeriphAddress>
	LL_USART_EnableDMAReq_TX(USART2);
 8002310:	481d      	ldr	r0, [pc, #116]	@ (8002388 <MX_USART2_UART_Init+0x17c>)
 8002312:	f7ff ff42 	bl	800219a <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002316:	2107      	movs	r1, #7
 8002318:	481a      	ldr	r0, [pc, #104]	@ (8002384 <MX_USART2_UART_Init+0x178>)
 800231a:	f7ff fea5 	bl	8002068 <LL_DMA_EnableIT_TE>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800231e:	f7ff fc87 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8002322:	4603      	mov	r3, r0
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fcd7 	bl	8001cdc <NVIC_EncodePriority>
 800232e:	4603      	mov	r3, r0
 8002330:	4619      	mov	r1, r3
 8002332:	2026      	movs	r0, #38	@ 0x26
 8002334:	f7ff fca8 	bl	8001c88 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8002338:	2026      	movs	r0, #38	@ 0x26
 800233a:	f7ff fc87 	bl	8001c4c <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 800233e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002342:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002350:	230c      	movs	r3, #12
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002354:	2300      	movs	r3, #0
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4809      	ldr	r0, [pc, #36]	@ (8002388 <MX_USART2_UART_Init+0x17c>)
 8002364:	f000 fcc6 	bl	8002cf4 <LL_USART_Init>
	LL_USART_DisableIT_CTS(USART2);
 8002368:	4807      	ldr	r0, [pc, #28]	@ (8002388 <MX_USART2_UART_Init+0x17c>)
 800236a:	f7ff fef3 	bl	8002154 <LL_USART_DisableIT_CTS>
	LL_USART_ConfigAsyncMode(USART2);
 800236e:	4806      	ldr	r0, [pc, #24]	@ (8002388 <MX_USART2_UART_Init+0x17c>)
 8002370:	f7ff feda 	bl	8002128 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8002374:	4804      	ldr	r0, [pc, #16]	@ (8002388 <MX_USART2_UART_Init+0x17c>)
 8002376:	f7ff fec7 	bl	8002108 <LL_USART_Enable>
  }
 800237a:	bf00      	nop
 800237c:	3738      	adds	r7, #56	@ 0x38
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40020000 	.word	0x40020000
 8002388:	40004400 	.word	0x40004400

0800238c <USART2_PutBuffer>:

void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	2107      	movs	r1, #7
 800239e:	480a      	ldr	r0, [pc, #40]	@ (80023c8 <USART2_PutBuffer+0x3c>)
 80023a0:	f7ff fe12 	bl	8001fc8 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	461a      	mov	r2, r3
 80023a8:	2107      	movs	r1, #7
 80023aa:	4807      	ldr	r0, [pc, #28]	@ (80023c8 <USART2_PutBuffer+0x3c>)
 80023ac:	f7ff fde8 	bl	8001f80 <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80023b0:	2107      	movs	r1, #7
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <USART2_PutBuffer+0x3c>)
 80023b4:	f7ff fe38 	bl	8002028 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80023b8:	2107      	movs	r1, #7
 80023ba:	4803      	ldr	r0, [pc, #12]	@ (80023c8 <USART2_PutBuffer+0x3c>)
 80023bc:	f7ff fcc2 	bl	8001d44 <LL_DMA_EnableChannel>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40020000 	.word	0x40020000

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d0:	f7ff fc1c 	bl	8001c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	@ (8002408 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002418 <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fa:	f001 fcbb 	bl	8003d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7ff f98f 	bl	8001720 <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002404:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002410:	08007120 	.word	0x08007120
  ldr r2, =_sbss
 8002414:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002418:	20000380 	.word	0x20000380

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>

0800241e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800241e:	b480      	push	{r7}
 8002420:	b089      	sub	sp, #36	@ 0x24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	613b      	str	r3, [r7, #16]
  return result;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2103      	movs	r1, #3
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	401a      	ands	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	61bb      	str	r3, [r7, #24]
  return result;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]
}
 8002470:	bf00      	nop
 8002472:	3724      	adds	r7, #36	@ 0x24
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	43db      	mvns	r3, r3
 8002490:	401a      	ands	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	431a      	orrs	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	613b      	str	r3, [r7, #16]
  return result;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2103      	movs	r1, #3
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	61bb      	str	r3, [r7, #24]
  return result;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800250a:	b480      	push	{r7}
 800250c:	b089      	sub	sp, #36	@ 0x24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	613b      	str	r3, [r7, #16]
  return result;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2103      	movs	r1, #3
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	401a      	ands	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	61bb      	str	r3, [r7, #24]
  return result;
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	431a      	orrs	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	60da      	str	r2, [r3, #12]
}
 800255c:	bf00      	nop
 800255e:	3724      	adds	r7, #36	@ 0x24
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	613b      	str	r3, [r7, #16]
  return result;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	210f      	movs	r1, #15
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	401a      	ands	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	61bb      	str	r3, [r7, #24]
  return result;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b089      	sub	sp, #36	@ 0x24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	613b      	str	r3, [r7, #16]
  return result;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	210f      	movs	r1, #15
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	61bb      	str	r3, [r7, #24]
  return result;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800261c:	bf00      	nop
 800261e:	3724      	adds	r7, #36	@ 0x24
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	613b      	str	r3, [r7, #16]
  return result;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800264a:	e051      	b.n	80026f0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d043      	beq.n	80026ea <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d003      	beq.n	8002672 <LL_GPIO_Init+0x4a>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d10e      	bne.n	8002690 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	461a      	mov	r2, r3
 8002678:	69b9      	ldr	r1, [r7, #24]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ff16 	bl	80024ac <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	461a      	mov	r2, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fef6 	bl	800247c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	461a      	mov	r2, r3
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff36 	bl	800250a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d11a      	bne.n	80026dc <LL_GPIO_Init+0xb4>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	60bb      	str	r3, [r7, #8]
  return result;
 80026b2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	d807      	bhi.n	80026ce <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	461a      	mov	r2, r3
 80026c4:	69b9      	ldr	r1, [r7, #24]
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff4e 	bl	8002568 <LL_GPIO_SetAFPin_0_7>
 80026cc:	e006      	b.n	80026dc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	461a      	mov	r2, r3
 80026d4:	69b9      	ldr	r1, [r7, #24]
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff75 	bl	80025c6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	461a      	mov	r2, r3
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fe9a 	bl	800241e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1a6      	bne.n	800264c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <LL_I2C_Enable>:
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	601a      	str	r2, [r3, #0]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_I2C_Disable>:
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 0201 	bic.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_I2C_ConfigFilters>:
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0219      	lsls	r1, r3, #8
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	430b      	orrs	r3, r1
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_I2C_SetOwnAddress1>:
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800278a:	f023 0307 	bic.w	r3, r3, #7
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	430a      	orrs	r2, r1
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_I2C_EnableOwnAddress1>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_I2C_DisableOwnAddress1>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	609a      	str	r2, [r3, #8]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_I2C_SetTiming>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_I2C_SetMode>:
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_I2C_AcknowledgeNextData>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff65 	bl	8002728 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff6d 	bl	8002748 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ffb6 	bl	80027e6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ff44 	bl	8002708 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ffa0 	bl	80027c6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6919      	ldr	r1, [r3, #16]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	461a      	mov	r2, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff70 	bl	8002776 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff81 	bl	80027a6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffa9 	bl	8002802 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffb6 	bl	8002828 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <LL_RCC_HSI_IsReady>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <LL_RCC_HSI_IsReady+0x20>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40021000 	.word	0x40021000

080028ec <LL_RCC_LSE_IsReady>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <LL_RCC_LSE_IsReady+0x20>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40021000 	.word	0x40021000

08002910 <LL_RCC_GetSysClkSource>:
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <LL_RCC_GetSysClkSource+0x18>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000

0800292c <LL_RCC_GetAHBPrescaler>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <LL_RCC_GetAHBPrescaler+0x18>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <LL_RCC_GetAPB1Prescaler>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <LL_RCC_GetAPB1Prescaler+0x18>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <LL_RCC_GetAPB2Prescaler>:
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <LL_RCC_GetAPB2Prescaler+0x18>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002988:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <LL_RCC_GetUSARTClockSource+0x28>)
 800298a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298c:	2103      	movs	r1, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	401a      	ands	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	4313      	orrs	r3, r2
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40021000 	.word	0x40021000

080029ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000

080029c8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <LL_RCC_PLL_GetPrediv+0x18>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f003 030f 	and.w	r3, r3, #15
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a08:	f000 f862 	bl	8002ad0 <RCC_GetSystemClockFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f880 	bl	8002b1c <RCC_GetHCLKClockFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f88e 	bl	8002b48 <RCC_GetPCLK1ClockFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f89a 	bl	8002b70 <RCC_GetPCLK2ClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d130      	bne.n	8002ac0 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ff8e 	bl	8002980 <LL_RCC_GetUSARTClockSource>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d00a      	beq.n	8002a80 <LL_RCC_GetUSARTClockFreq+0x34>
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d819      	bhi.n	8002aa2 <LL_RCC_GetUSARTClockFreq+0x56>
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d002      	beq.n	8002a78 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d00c      	beq.n	8002a90 <LL_RCC_GetUSARTClockFreq+0x44>
 8002a76:	e014      	b.n	8002aa2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002a78:	f000 f82a 	bl	8002ad0 <RCC_GetSystemClockFreq>
 8002a7c:	60f8      	str	r0, [r7, #12]
        break;
 8002a7e:	e01f      	b.n	8002ac0 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002a80:	f7ff ff22 	bl	80028c8 <LL_RCC_HSI_IsReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <LL_RCC_GetUSARTClockFreq+0x80>)
 8002a8c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a8e:	e014      	b.n	8002aba <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002a90:	f7ff ff2c 	bl	80028ec <LL_RCC_LSE_IsReady>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d011      	beq.n	8002abe <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a9e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002aa0:	e00d      	b.n	8002abe <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002aa2:	f000 f815 	bl	8002ad0 <RCC_GetSystemClockFreq>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f837 	bl	8002b1c <RCC_GetHCLKClockFreq>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f849 	bl	8002b48 <RCC_GetPCLK1ClockFreq>
 8002ab6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002ab8:	e002      	b.n	8002ac0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002abe:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	007a1200 	.word	0x007a1200

08002ad0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002ada:	f7ff ff19 	bl	8002910 <LL_RCC_GetSysClkSource>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d00c      	beq.n	8002afe <RCC_GetSystemClockFreq+0x2e>
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d80e      	bhi.n	8002b06 <RCC_GetSystemClockFreq+0x36>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <RCC_GetSystemClockFreq+0x22>
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d003      	beq.n	8002af8 <RCC_GetSystemClockFreq+0x28>
 8002af0:	e009      	b.n	8002b06 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <RCC_GetSystemClockFreq+0x48>)
 8002af4:	607b      	str	r3, [r7, #4]
      break;
 8002af6:	e009      	b.n	8002b0c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002af8:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <RCC_GetSystemClockFreq+0x48>)
 8002afa:	607b      	str	r3, [r7, #4]
      break;
 8002afc:	e006      	b.n	8002b0c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002afe:	f000 f84b 	bl	8002b98 <RCC_PLL_GetFreqDomain_SYS>
 8002b02:	6078      	str	r0, [r7, #4]
      break;
 8002b04:	e002      	b.n	8002b0c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <RCC_GetSystemClockFreq+0x48>)
 8002b08:	607b      	str	r3, [r7, #4]
      break;
 8002b0a:	bf00      	nop
  }

  return frequency;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002b24:	f7ff ff02 	bl	800292c <LL_RCC_GetAHBPrescaler>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <RCC_GetHCLKClockFreq+0x28>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	461a      	mov	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	40d3      	lsrs	r3, r2
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	08006d50 	.word	0x08006d50

08002b48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b50:	f7ff fefa 	bl	8002948 <LL_RCC_GetAPB1Prescaler>
 8002b54:	4603      	mov	r3, r0
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <RCC_GetPCLK1ClockFreq+0x24>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	40d3      	lsrs	r3, r2
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08006d60 	.word	0x08006d60

08002b70 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b78:	f7ff fef4 	bl	8002964 <LL_RCC_GetAPB2Prescaler>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	0adb      	lsrs	r3, r3, #11
 8002b80:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <RCC_GetPCLK2ClockFreq+0x24>)
 8002b82:	5cd3      	ldrb	r3, [r2, r3]
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	40d3      	lsrs	r3, r2
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	08006d60 	.word	0x08006d60

08002b98 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002ba6:	f7ff ff01 	bl	80029ac <LL_RCC_PLL_GetMainSource>
 8002baa:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb8:	d003      	beq.n	8002bc2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002bba:	e005      	b.n	8002bc8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002bbe:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002bc0:	e005      	b.n	8002bce <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002bc4:	60fb      	str	r3, [r7, #12]
      break;
 8002bc6:	e002      	b.n	8002bce <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002bc8:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002bca:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002bcc:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002bce:	f7ff ff09 	bl	80029e4 <LL_RCC_PLL_GetPrediv>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	fbb2 f4f3 	udiv	r4, r2, r3
 8002bdc:	f7ff fef4 	bl	80029c8 <LL_RCC_PLL_GetMultiplicator>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002be6:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002bea:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	603a      	str	r2, [r7, #0]
  return result;
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	40d3      	lsrs	r3, r2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	003d0900 	.word	0x003d0900
 8002c10:	007a1200 	.word	0x007a1200

08002c14 <LL_USART_IsEnabled>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <LL_USART_IsEnabled+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_USART_IsEnabled+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_USART_SetStopBitsLength>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	605a      	str	r2, [r3, #4]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_USART_SetHWFlowCtrl>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_USART_SetBaudRate>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c9a:	d11a      	bne.n	8002cd2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	005a      	lsls	r2, r3, #1
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	441a      	add	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	60da      	str	r2, [r3, #12]
}
 8002cd0:	e00a      	b.n	8002ce8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	085a      	lsrs	r2, r3, #1
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	441a      	add	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	60da      	str	r2, [r3, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff84 	bl	8002c14 <LL_USART_IsEnabled>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d14e      	bne.n	8002db0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <LL_USART_Init+0xc8>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	6851      	ldr	r1, [r2, #4]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	68d2      	ldr	r2, [r2, #12]
 8002d22:	4311      	orrs	r1, r2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	6912      	ldr	r2, [r2, #16]
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	6992      	ldr	r2, [r2, #24]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff7c 	bl	8002c3a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff89 	bl	8002c60 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <LL_USART_Init+0xcc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d104      	bne.n	8002d60 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7ff fe78 	bl	8002a4c <LL_RCC_GetUSARTClockFreq>
 8002d5c:	61b8      	str	r0, [r7, #24]
 8002d5e:	e016      	b.n	8002d8e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <LL_USART_Init+0xd0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d107      	bne.n	8002d78 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fe47 	bl	8002a00 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e00a      	b.n	8002d8e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a13      	ldr	r2, [pc, #76]	@ (8002dc8 <LL_USART_Init+0xd4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d106      	bne.n	8002d8e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fe3b 	bl	8002a00 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ff6b 	bl	8002c86 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	efff69f3 	.word	0xefff69f3
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40004800 	.word	0x40004800

08002dcc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4a07      	ldr	r2, [pc, #28]	@ (8002dfc <LL_InitTick+0x30>)
 8002de0:	3b01      	subs	r3, #1
 8002de2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <LL_InitTick+0x30>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <LL_InitTick+0x30>)
 8002dec:	2205      	movs	r2, #5
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002e08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ffdd 	bl	8002dcc <LL_InitTick>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <LL_mDelay+0x48>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e2a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d00c      	beq.n	8002e4e <LL_mDelay+0x32>
  {
    Delay++;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3301      	adds	r3, #1
 8002e38:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e3a:	e008      	b.n	8002e4e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e3c:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <LL_mDelay+0x48>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <LL_mDelay+0x32>
    {
      Delay--;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f3      	bne.n	8002e3c <LL_mDelay+0x20>
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <LL_SetSystemCoreClock+0x1c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6013      	str	r3, [r2, #0]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <hts221_readArray>:
// Device address for the HTS221 sensor
uint8_t addressh = HTS221_DEVICE_ADDRESS;

// Function to read an array of bytes from the HTS221 sensor
void hts221_readArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
 8002e94:	4613      	mov	r3, r2
 8002e96:	71bb      	strb	r3, [r7, #6]
    I2C_ReadData(addressh, reg, data, length);
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <hts221_readArray+0x28>)
 8002e9a:	7818      	ldrb	r0, [r3, #0]
 8002e9c:	79bb      	ldrb	r3, [r7, #6]
 8002e9e:	79f9      	ldrb	r1, [r7, #7]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	f7fe fa4d 	bl	8001340 <I2C_ReadData>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <hts221_writeArray>:

// Function to write an array of bytes to the HTS221 sensor
void hts221_writeArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	71bb      	strb	r3, [r7, #6]
    I2C_WriteData(addressh, reg, data, length);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <hts221_writeArray+0x28>)
 8002ec6:	7818      	ldrb	r0, [r3, #0]
 8002ec8:	79bb      	ldrb	r3, [r7, #6]
 8002eca:	79f9      	ldrb	r1, [r7, #7]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	f7fe f9e3 	bl	8001298 <I2C_WriteData>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004

08002ee0 <hts221_init>:

// Function to initialize the HTS221 sensor
uint8_t hts221_init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
    uint8_t status = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	71fb      	strb	r3, [r7, #7]
    LL_mDelay(100);
 8002eea:	2064      	movs	r0, #100	@ 0x64
 8002eec:	f7ff ff96 	bl	8002e1c <LL_mDelay>

    uint8_t who_am_i = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	71bb      	strb	r3, [r7, #6]
    hts221_readArray(HTS221_WHO_AM_I_ADDRESS, &who_am_i, 1);
 8002ef4:	1dbb      	adds	r3, r7, #6
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4619      	mov	r1, r3
 8002efa:	200f      	movs	r0, #15
 8002efc:	f7ff ffc4 	bl	8002e88 <hts221_readArray>

    if (who_am_i != HTS221_WHO_AM_I_VALUE)
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	2bbc      	cmp	r3, #188	@ 0xbc
 8002f04:	d001      	beq.n	8002f0a <hts221_init+0x2a>
    {
        status = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	71fb      	strb	r3, [r7, #7]
    }

    uint8_t control_r = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	717b      	strb	r3, [r7, #5]
    hts221_readArray(HTS221_ADDRESS_CONTROL_R, &control_r, 1);
 8002f0e:	1d7b      	adds	r3, r7, #5
 8002f10:	2201      	movs	r2, #1
 8002f12:	4619      	mov	r1, r3
 8002f14:	2020      	movs	r0, #32
 8002f16:	f7ff ffb7 	bl	8002e88 <hts221_readArray>
    control_r &= 0x78;
 8002f1a:	797b      	ldrb	r3, [r7, #5]
 8002f1c:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	717b      	strb	r3, [r7, #5]
    control_r |= 0x81;
 8002f24:	797b      	ldrb	r3, [r7, #5]
 8002f26:	f063 037e 	orn	r3, r3, #126	@ 0x7e
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	717b      	strb	r3, [r7, #5]
    hts221_writeArray(HTS221_ADDRESS_CONTROL_R, &control_r, 1);
 8002f2e:	1d7b      	adds	r3, r7, #5
 8002f30:	2201      	movs	r2, #1
 8002f32:	4619      	mov	r1, r3
 8002f34:	2020      	movs	r0, #32
 8002f36:	f7ff ffbd 	bl	8002eb4 <hts221_writeArray>

    return status;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <hts221_get_humidity>:

// Function to get the humidity value
int8_t hts221_get_humidity(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
    uint8_t humidity_array[2];
    hts221_readArray(HTS221_ADDRESS_HUMIDITY_L, humidity_array, 2);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4619      	mov	r1, r3
 8002f52:	2028      	movs	r0, #40	@ 0x28
 8002f54:	f7ff ff98 	bl	8002e88 <hts221_readArray>
    int16_t humidity = (humidity_array[1] << 8) | humidity_array[0];
 8002f58:	7d7b      	ldrb	r3, [r7, #21]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	b21a      	sxth	r2, r3
 8002f5e:	7d3b      	ldrb	r3, [r7, #20]
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4313      	orrs	r3, r2
 8002f64:	84fb      	strh	r3, [r7, #38]	@ 0x26

    uint8_t calibration_val_x0_array[2];
    hts221_readArray(HTS221_ADDRESS_H0_T0_OUT_L, calibration_val_x0_array, 2);
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	2036      	movs	r0, #54	@ 0x36
 8002f70:	f7ff ff8a 	bl	8002e88 <hts221_readArray>
    int16_t calibration_x0 = (calibration_val_x0_array[1] << 8) | calibration_val_x0_array[0];
 8002f74:	7c7b      	ldrb	r3, [r7, #17]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	7c3b      	ldrb	r3, [r7, #16]
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	84bb      	strh	r3, [r7, #36]	@ 0x24

    uint8_t calibration_val_x1_array[2];
    hts221_readArray(HTS221_ADDRESS_H1_T0_OUT_L, calibration_val_x1_array, 2);
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	2202      	movs	r2, #2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	203a      	movs	r0, #58	@ 0x3a
 8002f8c:	f7ff ff7c 	bl	8002e88 <hts221_readArray>
    int16_t calibration_x1 = (calibration_val_x1_array[1] << 8) | calibration_val_x1_array[0];
 8002f90:	7b7b      	ldrb	r3, [r7, #13]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	847b      	strh	r3, [r7, #34]	@ 0x22

    uint8_t calibration_y0 = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	72fb      	strb	r3, [r7, #11]
    uint8_t calibration_y1 = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72bb      	strb	r3, [r7, #10]
    hts221_readArray(HTS221_ADDRESS_H0_rH_x2, &calibration_y0, 1);
 8002fa6:	f107 030b 	add.w	r3, r7, #11
 8002faa:	2201      	movs	r2, #1
 8002fac:	4619      	mov	r1, r3
 8002fae:	2030      	movs	r0, #48	@ 0x30
 8002fb0:	f7ff ff6a 	bl	8002e88 <hts221_readArray>
    hts221_readArray(HTS221_ADDRESS_H1_rH_x2, &calibration_y1, 1);
 8002fb4:	f107 030a 	add.w	r3, r7, #10
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4619      	mov	r1, r3
 8002fbc:	2031      	movs	r0, #49	@ 0x31
 8002fbe:	f7ff ff63 	bl	8002e88 <hts221_readArray>

    float k = (float)(calibration_y1 - calibration_y0) / (calibration_x1 - calibration_x0);
 8002fc2:	7abb      	ldrb	r3, [r7, #10]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fd2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002fd6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe8:	edc7 7a07 	vstr	s15, [r7, #28]
    float q = (float)(calibration_y1 - k * calibration_x1);
 8002fec:	7abb      	ldrb	r3, [r7, #10]
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003002:	edd7 7a07 	vldr	s15, [r7, #28]
 8003006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	edc7 7a06 	vstr	s15, [r7, #24]
    int8_t total = (int8_t)((k * humidity + q) / 2);
 8003012:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003026:	edd7 7a06 	vldr	s15, [r7, #24]
 800302a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303a:	edc7 7a01 	vstr	s15, [r7, #4]
 800303e:	793b      	ldrb	r3, [r7, #4]
 8003040:	75fb      	strb	r3, [r7, #23]

    return total;
 8003042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3728      	adds	r7, #40	@ 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <lps25hb_readArray>:
// Device address for the LPS22HB sensor
uint8_t address = LPS25HB_DEVICE_ADDRESS_0;

// Function to read an array of bytes from the LPS22HB sensor
void lps25hb_readArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	4613      	mov	r3, r2
 800305e:	71bb      	strb	r3, [r7, #6]
    I2C_ReadData(address, reg, data, length);
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <lps25hb_readArray+0x28>)
 8003062:	7818      	ldrb	r0, [r3, #0]
 8003064:	79bb      	ldrb	r3, [r7, #6]
 8003066:	79f9      	ldrb	r1, [r7, #7]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	f7fe f969 	bl	8001340 <I2C_ReadData>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000005 	.word	0x20000005

0800307c <lps25hb_writeArray>:

// Function to write an array of bytes to the LPS22HB sensor
void lps25hb_writeArray(uint8_t reg, uint8_t *data, uint8_t length)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	4613      	mov	r3, r2
 800308a:	71bb      	strb	r3, [r7, #6]
    I2C_WriteData(address, reg, data, length);
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <lps25hb_writeArray+0x28>)
 800308e:	7818      	ldrb	r0, [r3, #0]
 8003090:	79bb      	ldrb	r3, [r7, #6]
 8003092:	79f9      	ldrb	r1, [r7, #7]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	f7fe f8ff 	bl	8001298 <I2C_WriteData>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000005 	.word	0x20000005

080030a8 <lps25hb_init>:

// Function to initialize the LPS22HB sensor
uint8_t lps25hb_init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
    uint8_t status = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	71fb      	strb	r3, [r7, #7]

    LL_mDelay(100);
 80030b2:	2064      	movs	r0, #100	@ 0x64
 80030b4:	f7ff feb2 	bl	8002e1c <LL_mDelay>

    uint8_t who_am_i = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	71bb      	strb	r3, [r7, #6]
    lps25hb_readArray(LPS25HB_WHO_AM_I_ADDRESS, &who_am_i, 1);
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	2201      	movs	r2, #1
 80030c0:	4619      	mov	r1, r3
 80030c2:	200f      	movs	r0, #15
 80030c4:	f7ff ffc4 	bl	8003050 <lps25hb_readArray>

    if (who_am_i != LPS25HB_WHO_AM_I_VALUE)
 80030c8:	79bb      	ldrb	r3, [r7, #6]
 80030ca:	2bbd      	cmp	r3, #189	@ 0xbd
 80030cc:	d00d      	beq.n	80030ea <lps25hb_init+0x42>
    {
        address = LPS25HB_DEVICE_ADDRESS_1;
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <lps25hb_init+0x78>)
 80030d0:	22bb      	movs	r2, #187	@ 0xbb
 80030d2:	701a      	strb	r2, [r3, #0]
        lps25hb_readArray(LPS25HB_WHO_AM_I_ADDRESS, &who_am_i, 1);
 80030d4:	1dbb      	adds	r3, r7, #6
 80030d6:	2201      	movs	r2, #1
 80030d8:	4619      	mov	r1, r3
 80030da:	200f      	movs	r0, #15
 80030dc:	f7ff ffb8 	bl	8003050 <lps25hb_readArray>

        if (who_am_i != LPS25HB_WHO_AM_I_VALUE)
 80030e0:	79bb      	ldrb	r3, [r7, #6]
 80030e2:	2bbd      	cmp	r3, #189	@ 0xbd
 80030e4:	d001      	beq.n	80030ea <lps25hb_init+0x42>
        {
            status = 0;  // Sensor identification failed
 80030e6:	2300      	movs	r3, #0
 80030e8:	71fb      	strb	r3, [r7, #7]
        }
    }

    uint8_t control;
    lps25hb_readArray(LPS25HB_ADDRESS_CONTROL_R, &control, 1);
 80030ea:	1d7b      	adds	r3, r7, #5
 80030ec:	2201      	movs	r2, #1
 80030ee:	4619      	mov	r1, r3
 80030f0:	2020      	movs	r0, #32
 80030f2:	f7ff ffad 	bl	8003050 <lps25hb_readArray>
    control &= 0x0F;
 80030f6:	797b      	ldrb	r3, [r7, #5]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	717b      	strb	r3, [r7, #5]
    control |= 0x90;
 8003100:	797b      	ldrb	r3, [r7, #5]
 8003102:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8003106:	b2db      	uxtb	r3, r3
 8003108:	717b      	strb	r3, [r7, #5]
    lps25hb_writeArray(LPS25HB_ADDRESS_CONTROL_R, &control, 1);
 800310a:	1d7b      	adds	r3, r7, #5
 800310c:	2201      	movs	r2, #1
 800310e:	4619      	mov	r1, r3
 8003110:	2020      	movs	r0, #32
 8003112:	f7ff ffb3 	bl	800307c <lps25hb_writeArray>

    return status;
 8003116:	79fb      	ldrb	r3, [r7, #7]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000005 	.word	0x20000005

08003124 <lps25hb_get_pressure>:

// Function to get the pressure value
float lps25hb_get_pressure(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
    uint8_t pressure[3];
    lps25hb_readArray(LPS25HB_ADDRESS_PRESS_OUT_XL, pressure, 3);
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2203      	movs	r2, #3
 800312e:	4619      	mov	r1, r3
 8003130:	2028      	movs	r0, #40	@ 0x28
 8003132:	f7ff ff8d 	bl	8003050 <lps25hb_readArray>

    int32_t temp = pressure[2] << 16 | pressure[1] << 8 | pressure[0];
 8003136:	79bb      	ldrb	r3, [r7, #6]
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	797b      	ldrb	r3, [r7, #5]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	4313      	orrs	r3, r2
 8003140:	793a      	ldrb	r2, [r7, #4]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
    float total_pressure = (float)temp / 4096.0;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003150:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800316c <lps25hb_get_pressure+0x48>
 8003154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003158:	edc7 7a02 	vstr	s15, [r7, #8]

    return total_pressure;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	ee07 3a90 	vmov	s15, r3
}
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	45800000 	.word	0x45800000

08003170 <lps25hb_get_temperature>:

// Function to get the temperature value
float lps25hb_get_temperature(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
    uint8_t temperature[2];
    lps25hb_readArray(LPS25HB_ADDRESS_TEMP_OUT_L, temperature, 2);
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2202      	movs	r2, #2
 800317a:	4619      	mov	r1, r3
 800317c:	202b      	movs	r0, #43	@ 0x2b
 800317e:	f7ff ff67 	bl	8003050 <lps25hb_readArray>

    int16_t total_t = temperature[1] << 8 | temperature[0];
 8003182:	797b      	ldrb	r3, [r7, #5]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b21a      	sxth	r2, r3
 8003188:	793b      	ldrb	r3, [r7, #4]
 800318a:	b21b      	sxth	r3, r3
 800318c:	4313      	orrs	r3, r2
 800318e:	81fb      	strh	r3, [r7, #14]
    float temp = 42.5+((float)total_t / 480);
 8003190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800319c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80031c0 <lps25hb_get_temperature+0x50>
 80031a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031a4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80031c4 <lps25hb_get_temperature+0x54>
 80031a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ac:	edc7 7a02 	vstr	s15, [r7, #8]

    return temp;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	ee07 3a90 	vmov	s15, r3
}
 80031b6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	43f00000 	.word	0x43f00000
 80031c4:	422a0000 	.word	0x422a0000

080031c8 <__cvt>:
 80031c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	ec57 6b10 	vmov	r6, r7, d0
 80031d0:	2f00      	cmp	r7, #0
 80031d2:	460c      	mov	r4, r1
 80031d4:	4619      	mov	r1, r3
 80031d6:	463b      	mov	r3, r7
 80031d8:	bfbb      	ittet	lt
 80031da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80031de:	461f      	movlt	r7, r3
 80031e0:	2300      	movge	r3, #0
 80031e2:	232d      	movlt	r3, #45	@ 0x2d
 80031e4:	700b      	strb	r3, [r1, #0]
 80031e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80031ec:	4691      	mov	r9, r2
 80031ee:	f023 0820 	bic.w	r8, r3, #32
 80031f2:	bfbc      	itt	lt
 80031f4:	4632      	movlt	r2, r6
 80031f6:	4616      	movlt	r6, r2
 80031f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031fc:	d005      	beq.n	800320a <__cvt+0x42>
 80031fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003202:	d100      	bne.n	8003206 <__cvt+0x3e>
 8003204:	3401      	adds	r4, #1
 8003206:	2102      	movs	r1, #2
 8003208:	e000      	b.n	800320c <__cvt+0x44>
 800320a:	2103      	movs	r1, #3
 800320c:	ab03      	add	r3, sp, #12
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	ab02      	add	r3, sp, #8
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	ec47 6b10 	vmov	d0, r6, r7
 8003218:	4653      	mov	r3, sl
 800321a:	4622      	mov	r2, r4
 800321c:	f000 fe5c 	bl	8003ed8 <_dtoa_r>
 8003220:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003224:	4605      	mov	r5, r0
 8003226:	d119      	bne.n	800325c <__cvt+0x94>
 8003228:	f019 0f01 	tst.w	r9, #1
 800322c:	d00e      	beq.n	800324c <__cvt+0x84>
 800322e:	eb00 0904 	add.w	r9, r0, r4
 8003232:	2200      	movs	r2, #0
 8003234:	2300      	movs	r3, #0
 8003236:	4630      	mov	r0, r6
 8003238:	4639      	mov	r1, r7
 800323a:	f7fd fc45 	bl	8000ac8 <__aeabi_dcmpeq>
 800323e:	b108      	cbz	r0, 8003244 <__cvt+0x7c>
 8003240:	f8cd 900c 	str.w	r9, [sp, #12]
 8003244:	2230      	movs	r2, #48	@ 0x30
 8003246:	9b03      	ldr	r3, [sp, #12]
 8003248:	454b      	cmp	r3, r9
 800324a:	d31e      	bcc.n	800328a <__cvt+0xc2>
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003250:	1b5b      	subs	r3, r3, r5
 8003252:	4628      	mov	r0, r5
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	b004      	add	sp, #16
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003260:	eb00 0904 	add.w	r9, r0, r4
 8003264:	d1e5      	bne.n	8003232 <__cvt+0x6a>
 8003266:	7803      	ldrb	r3, [r0, #0]
 8003268:	2b30      	cmp	r3, #48	@ 0x30
 800326a:	d10a      	bne.n	8003282 <__cvt+0xba>
 800326c:	2200      	movs	r2, #0
 800326e:	2300      	movs	r3, #0
 8003270:	4630      	mov	r0, r6
 8003272:	4639      	mov	r1, r7
 8003274:	f7fd fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8003278:	b918      	cbnz	r0, 8003282 <__cvt+0xba>
 800327a:	f1c4 0401 	rsb	r4, r4, #1
 800327e:	f8ca 4000 	str.w	r4, [sl]
 8003282:	f8da 3000 	ldr.w	r3, [sl]
 8003286:	4499      	add	r9, r3
 8003288:	e7d3      	b.n	8003232 <__cvt+0x6a>
 800328a:	1c59      	adds	r1, r3, #1
 800328c:	9103      	str	r1, [sp, #12]
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e7d9      	b.n	8003246 <__cvt+0x7e>

08003292 <__exponent>:
 8003292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003294:	2900      	cmp	r1, #0
 8003296:	bfba      	itte	lt
 8003298:	4249      	neglt	r1, r1
 800329a:	232d      	movlt	r3, #45	@ 0x2d
 800329c:	232b      	movge	r3, #43	@ 0x2b
 800329e:	2909      	cmp	r1, #9
 80032a0:	7002      	strb	r2, [r0, #0]
 80032a2:	7043      	strb	r3, [r0, #1]
 80032a4:	dd29      	ble.n	80032fa <__exponent+0x68>
 80032a6:	f10d 0307 	add.w	r3, sp, #7
 80032aa:	461d      	mov	r5, r3
 80032ac:	270a      	movs	r7, #10
 80032ae:	461a      	mov	r2, r3
 80032b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80032b4:	fb07 1416 	mls	r4, r7, r6, r1
 80032b8:	3430      	adds	r4, #48	@ 0x30
 80032ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80032be:	460c      	mov	r4, r1
 80032c0:	2c63      	cmp	r4, #99	@ 0x63
 80032c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80032c6:	4631      	mov	r1, r6
 80032c8:	dcf1      	bgt.n	80032ae <__exponent+0x1c>
 80032ca:	3130      	adds	r1, #48	@ 0x30
 80032cc:	1e94      	subs	r4, r2, #2
 80032ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80032d2:	1c41      	adds	r1, r0, #1
 80032d4:	4623      	mov	r3, r4
 80032d6:	42ab      	cmp	r3, r5
 80032d8:	d30a      	bcc.n	80032f0 <__exponent+0x5e>
 80032da:	f10d 0309 	add.w	r3, sp, #9
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	42ac      	cmp	r4, r5
 80032e2:	bf88      	it	hi
 80032e4:	2300      	movhi	r3, #0
 80032e6:	3302      	adds	r3, #2
 80032e8:	4403      	add	r3, r0
 80032ea:	1a18      	subs	r0, r3, r0
 80032ec:	b003      	add	sp, #12
 80032ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80032f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80032f8:	e7ed      	b.n	80032d6 <__exponent+0x44>
 80032fa:	2330      	movs	r3, #48	@ 0x30
 80032fc:	3130      	adds	r1, #48	@ 0x30
 80032fe:	7083      	strb	r3, [r0, #2]
 8003300:	70c1      	strb	r1, [r0, #3]
 8003302:	1d03      	adds	r3, r0, #4
 8003304:	e7f1      	b.n	80032ea <__exponent+0x58>
	...

08003308 <_printf_float>:
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	b08d      	sub	sp, #52	@ 0x34
 800330e:	460c      	mov	r4, r1
 8003310:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003314:	4616      	mov	r6, r2
 8003316:	461f      	mov	r7, r3
 8003318:	4605      	mov	r5, r0
 800331a:	f000 fcdb 	bl	8003cd4 <_localeconv_r>
 800331e:	6803      	ldr	r3, [r0, #0]
 8003320:	9304      	str	r3, [sp, #16]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fc ffa4 	bl	8000270 <strlen>
 8003328:	2300      	movs	r3, #0
 800332a:	930a      	str	r3, [sp, #40]	@ 0x28
 800332c:	f8d8 3000 	ldr.w	r3, [r8]
 8003330:	9005      	str	r0, [sp, #20]
 8003332:	3307      	adds	r3, #7
 8003334:	f023 0307 	bic.w	r3, r3, #7
 8003338:	f103 0208 	add.w	r2, r3, #8
 800333c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003340:	f8d4 b000 	ldr.w	fp, [r4]
 8003344:	f8c8 2000 	str.w	r2, [r8]
 8003348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800334c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003350:	9307      	str	r3, [sp, #28]
 8003352:	f8cd 8018 	str.w	r8, [sp, #24]
 8003356:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800335a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800335e:	4b9c      	ldr	r3, [pc, #624]	@ (80035d0 <_printf_float+0x2c8>)
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	f7fd fbe2 	bl	8000b2c <__aeabi_dcmpun>
 8003368:	bb70      	cbnz	r0, 80033c8 <_printf_float+0xc0>
 800336a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800336e:	4b98      	ldr	r3, [pc, #608]	@ (80035d0 <_printf_float+0x2c8>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	f7fd fbbc 	bl	8000af0 <__aeabi_dcmple>
 8003378:	bb30      	cbnz	r0, 80033c8 <_printf_float+0xc0>
 800337a:	2200      	movs	r2, #0
 800337c:	2300      	movs	r3, #0
 800337e:	4640      	mov	r0, r8
 8003380:	4649      	mov	r1, r9
 8003382:	f7fd fbab 	bl	8000adc <__aeabi_dcmplt>
 8003386:	b110      	cbz	r0, 800338e <_printf_float+0x86>
 8003388:	232d      	movs	r3, #45	@ 0x2d
 800338a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800338e:	4a91      	ldr	r2, [pc, #580]	@ (80035d4 <_printf_float+0x2cc>)
 8003390:	4b91      	ldr	r3, [pc, #580]	@ (80035d8 <_printf_float+0x2d0>)
 8003392:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003396:	bf94      	ite	ls
 8003398:	4690      	movls	r8, r2
 800339a:	4698      	movhi	r8, r3
 800339c:	2303      	movs	r3, #3
 800339e:	6123      	str	r3, [r4, #16]
 80033a0:	f02b 0304 	bic.w	r3, fp, #4
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	f04f 0900 	mov.w	r9, #0
 80033aa:	9700      	str	r7, [sp, #0]
 80033ac:	4633      	mov	r3, r6
 80033ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80033b0:	4621      	mov	r1, r4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 f9d2 	bl	800375c <_printf_common>
 80033b8:	3001      	adds	r0, #1
 80033ba:	f040 808d 	bne.w	80034d8 <_printf_float+0x1d0>
 80033be:	f04f 30ff 	mov.w	r0, #4294967295
 80033c2:	b00d      	add	sp, #52	@ 0x34
 80033c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	4649      	mov	r1, r9
 80033d0:	f7fd fbac 	bl	8000b2c <__aeabi_dcmpun>
 80033d4:	b140      	cbz	r0, 80033e8 <_printf_float+0xe0>
 80033d6:	464b      	mov	r3, r9
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bfbc      	itt	lt
 80033dc:	232d      	movlt	r3, #45	@ 0x2d
 80033de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80033e2:	4a7e      	ldr	r2, [pc, #504]	@ (80035dc <_printf_float+0x2d4>)
 80033e4:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <_printf_float+0x2d8>)
 80033e6:	e7d4      	b.n	8003392 <_printf_float+0x8a>
 80033e8:	6863      	ldr	r3, [r4, #4]
 80033ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80033ee:	9206      	str	r2, [sp, #24]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	d13b      	bne.n	800346c <_printf_float+0x164>
 80033f4:	2306      	movs	r3, #6
 80033f6:	6063      	str	r3, [r4, #4]
 80033f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80033fc:	2300      	movs	r3, #0
 80033fe:	6022      	str	r2, [r4, #0]
 8003400:	9303      	str	r3, [sp, #12]
 8003402:	ab0a      	add	r3, sp, #40	@ 0x28
 8003404:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003408:	ab09      	add	r3, sp, #36	@ 0x24
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	6861      	ldr	r1, [r4, #4]
 800340e:	ec49 8b10 	vmov	d0, r8, r9
 8003412:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003416:	4628      	mov	r0, r5
 8003418:	f7ff fed6 	bl	80031c8 <__cvt>
 800341c:	9b06      	ldr	r3, [sp, #24]
 800341e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003420:	2b47      	cmp	r3, #71	@ 0x47
 8003422:	4680      	mov	r8, r0
 8003424:	d129      	bne.n	800347a <_printf_float+0x172>
 8003426:	1cc8      	adds	r0, r1, #3
 8003428:	db02      	blt.n	8003430 <_printf_float+0x128>
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	4299      	cmp	r1, r3
 800342e:	dd41      	ble.n	80034b4 <_printf_float+0x1ac>
 8003430:	f1aa 0a02 	sub.w	sl, sl, #2
 8003434:	fa5f fa8a 	uxtb.w	sl, sl
 8003438:	3901      	subs	r1, #1
 800343a:	4652      	mov	r2, sl
 800343c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003440:	9109      	str	r1, [sp, #36]	@ 0x24
 8003442:	f7ff ff26 	bl	8003292 <__exponent>
 8003446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003448:	1813      	adds	r3, r2, r0
 800344a:	2a01      	cmp	r2, #1
 800344c:	4681      	mov	r9, r0
 800344e:	6123      	str	r3, [r4, #16]
 8003450:	dc02      	bgt.n	8003458 <_printf_float+0x150>
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	07d2      	lsls	r2, r2, #31
 8003456:	d501      	bpl.n	800345c <_printf_float+0x154>
 8003458:	3301      	adds	r3, #1
 800345a:	6123      	str	r3, [r4, #16]
 800345c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0a2      	beq.n	80033aa <_printf_float+0xa2>
 8003464:	232d      	movs	r3, #45	@ 0x2d
 8003466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800346a:	e79e      	b.n	80033aa <_printf_float+0xa2>
 800346c:	9a06      	ldr	r2, [sp, #24]
 800346e:	2a47      	cmp	r2, #71	@ 0x47
 8003470:	d1c2      	bne.n	80033f8 <_printf_float+0xf0>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1c0      	bne.n	80033f8 <_printf_float+0xf0>
 8003476:	2301      	movs	r3, #1
 8003478:	e7bd      	b.n	80033f6 <_printf_float+0xee>
 800347a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800347e:	d9db      	bls.n	8003438 <_printf_float+0x130>
 8003480:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003484:	d118      	bne.n	80034b8 <_printf_float+0x1b0>
 8003486:	2900      	cmp	r1, #0
 8003488:	6863      	ldr	r3, [r4, #4]
 800348a:	dd0b      	ble.n	80034a4 <_printf_float+0x19c>
 800348c:	6121      	str	r1, [r4, #16]
 800348e:	b913      	cbnz	r3, 8003496 <_printf_float+0x18e>
 8003490:	6822      	ldr	r2, [r4, #0]
 8003492:	07d0      	lsls	r0, r2, #31
 8003494:	d502      	bpl.n	800349c <_printf_float+0x194>
 8003496:	3301      	adds	r3, #1
 8003498:	440b      	add	r3, r1
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800349e:	f04f 0900 	mov.w	r9, #0
 80034a2:	e7db      	b.n	800345c <_printf_float+0x154>
 80034a4:	b913      	cbnz	r3, 80034ac <_printf_float+0x1a4>
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	07d2      	lsls	r2, r2, #31
 80034aa:	d501      	bpl.n	80034b0 <_printf_float+0x1a8>
 80034ac:	3302      	adds	r3, #2
 80034ae:	e7f4      	b.n	800349a <_printf_float+0x192>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e7f2      	b.n	800349a <_printf_float+0x192>
 80034b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80034b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034ba:	4299      	cmp	r1, r3
 80034bc:	db05      	blt.n	80034ca <_printf_float+0x1c2>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	6121      	str	r1, [r4, #16]
 80034c2:	07d8      	lsls	r0, r3, #31
 80034c4:	d5ea      	bpl.n	800349c <_printf_float+0x194>
 80034c6:	1c4b      	adds	r3, r1, #1
 80034c8:	e7e7      	b.n	800349a <_printf_float+0x192>
 80034ca:	2900      	cmp	r1, #0
 80034cc:	bfd4      	ite	le
 80034ce:	f1c1 0202 	rsble	r2, r1, #2
 80034d2:	2201      	movgt	r2, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	e7e0      	b.n	800349a <_printf_float+0x192>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	055a      	lsls	r2, r3, #21
 80034dc:	d407      	bmi.n	80034ee <_printf_float+0x1e6>
 80034de:	6923      	ldr	r3, [r4, #16]
 80034e0:	4642      	mov	r2, r8
 80034e2:	4631      	mov	r1, r6
 80034e4:	4628      	mov	r0, r5
 80034e6:	47b8      	blx	r7
 80034e8:	3001      	adds	r0, #1
 80034ea:	d12b      	bne.n	8003544 <_printf_float+0x23c>
 80034ec:	e767      	b.n	80033be <_printf_float+0xb6>
 80034ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034f2:	f240 80dd 	bls.w	80036b0 <_printf_float+0x3a8>
 80034f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034fa:	2200      	movs	r2, #0
 80034fc:	2300      	movs	r3, #0
 80034fe:	f7fd fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003502:	2800      	cmp	r0, #0
 8003504:	d033      	beq.n	800356e <_printf_float+0x266>
 8003506:	4a37      	ldr	r2, [pc, #220]	@ (80035e4 <_printf_float+0x2dc>)
 8003508:	2301      	movs	r3, #1
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	47b8      	blx	r7
 8003510:	3001      	adds	r0, #1
 8003512:	f43f af54 	beq.w	80033be <_printf_float+0xb6>
 8003516:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800351a:	4543      	cmp	r3, r8
 800351c:	db02      	blt.n	8003524 <_printf_float+0x21c>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	07d8      	lsls	r0, r3, #31
 8003522:	d50f      	bpl.n	8003544 <_printf_float+0x23c>
 8003524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003528:	4631      	mov	r1, r6
 800352a:	4628      	mov	r0, r5
 800352c:	47b8      	blx	r7
 800352e:	3001      	adds	r0, #1
 8003530:	f43f af45 	beq.w	80033be <_printf_float+0xb6>
 8003534:	f04f 0900 	mov.w	r9, #0
 8003538:	f108 38ff 	add.w	r8, r8, #4294967295
 800353c:	f104 0a1a 	add.w	sl, r4, #26
 8003540:	45c8      	cmp	r8, r9
 8003542:	dc09      	bgt.n	8003558 <_printf_float+0x250>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	079b      	lsls	r3, r3, #30
 8003548:	f100 8103 	bmi.w	8003752 <_printf_float+0x44a>
 800354c:	68e0      	ldr	r0, [r4, #12]
 800354e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003550:	4298      	cmp	r0, r3
 8003552:	bfb8      	it	lt
 8003554:	4618      	movlt	r0, r3
 8003556:	e734      	b.n	80033c2 <_printf_float+0xba>
 8003558:	2301      	movs	r3, #1
 800355a:	4652      	mov	r2, sl
 800355c:	4631      	mov	r1, r6
 800355e:	4628      	mov	r0, r5
 8003560:	47b8      	blx	r7
 8003562:	3001      	adds	r0, #1
 8003564:	f43f af2b 	beq.w	80033be <_printf_float+0xb6>
 8003568:	f109 0901 	add.w	r9, r9, #1
 800356c:	e7e8      	b.n	8003540 <_printf_float+0x238>
 800356e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	dc39      	bgt.n	80035e8 <_printf_float+0x2e0>
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <_printf_float+0x2dc>)
 8003576:	2301      	movs	r3, #1
 8003578:	4631      	mov	r1, r6
 800357a:	4628      	mov	r0, r5
 800357c:	47b8      	blx	r7
 800357e:	3001      	adds	r0, #1
 8003580:	f43f af1d 	beq.w	80033be <_printf_float+0xb6>
 8003584:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003588:	ea59 0303 	orrs.w	r3, r9, r3
 800358c:	d102      	bne.n	8003594 <_printf_float+0x28c>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	07d9      	lsls	r1, r3, #31
 8003592:	d5d7      	bpl.n	8003544 <_printf_float+0x23c>
 8003594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003598:	4631      	mov	r1, r6
 800359a:	4628      	mov	r0, r5
 800359c:	47b8      	blx	r7
 800359e:	3001      	adds	r0, #1
 80035a0:	f43f af0d 	beq.w	80033be <_printf_float+0xb6>
 80035a4:	f04f 0a00 	mov.w	sl, #0
 80035a8:	f104 0b1a 	add.w	fp, r4, #26
 80035ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035ae:	425b      	negs	r3, r3
 80035b0:	4553      	cmp	r3, sl
 80035b2:	dc01      	bgt.n	80035b8 <_printf_float+0x2b0>
 80035b4:	464b      	mov	r3, r9
 80035b6:	e793      	b.n	80034e0 <_printf_float+0x1d8>
 80035b8:	2301      	movs	r3, #1
 80035ba:	465a      	mov	r2, fp
 80035bc:	4631      	mov	r1, r6
 80035be:	4628      	mov	r0, r5
 80035c0:	47b8      	blx	r7
 80035c2:	3001      	adds	r0, #1
 80035c4:	f43f aefb 	beq.w	80033be <_printf_float+0xb6>
 80035c8:	f10a 0a01 	add.w	sl, sl, #1
 80035cc:	e7ee      	b.n	80035ac <_printf_float+0x2a4>
 80035ce:	bf00      	nop
 80035d0:	7fefffff 	.word	0x7fefffff
 80035d4:	08006d6f 	.word	0x08006d6f
 80035d8:	08006d73 	.word	0x08006d73
 80035dc:	08006d77 	.word	0x08006d77
 80035e0:	08006d7b 	.word	0x08006d7b
 80035e4:	08006d7f 	.word	0x08006d7f
 80035e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80035ee:	4553      	cmp	r3, sl
 80035f0:	bfa8      	it	ge
 80035f2:	4653      	movge	r3, sl
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	4699      	mov	r9, r3
 80035f8:	dc36      	bgt.n	8003668 <_printf_float+0x360>
 80035fa:	f04f 0b00 	mov.w	fp, #0
 80035fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003602:	f104 021a 	add.w	r2, r4, #26
 8003606:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003608:	9306      	str	r3, [sp, #24]
 800360a:	eba3 0309 	sub.w	r3, r3, r9
 800360e:	455b      	cmp	r3, fp
 8003610:	dc31      	bgt.n	8003676 <_printf_float+0x36e>
 8003612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003614:	459a      	cmp	sl, r3
 8003616:	dc3a      	bgt.n	800368e <_printf_float+0x386>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	07da      	lsls	r2, r3, #31
 800361c:	d437      	bmi.n	800368e <_printf_float+0x386>
 800361e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003620:	ebaa 0903 	sub.w	r9, sl, r3
 8003624:	9b06      	ldr	r3, [sp, #24]
 8003626:	ebaa 0303 	sub.w	r3, sl, r3
 800362a:	4599      	cmp	r9, r3
 800362c:	bfa8      	it	ge
 800362e:	4699      	movge	r9, r3
 8003630:	f1b9 0f00 	cmp.w	r9, #0
 8003634:	dc33      	bgt.n	800369e <_printf_float+0x396>
 8003636:	f04f 0800 	mov.w	r8, #0
 800363a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800363e:	f104 0b1a 	add.w	fp, r4, #26
 8003642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003644:	ebaa 0303 	sub.w	r3, sl, r3
 8003648:	eba3 0309 	sub.w	r3, r3, r9
 800364c:	4543      	cmp	r3, r8
 800364e:	f77f af79 	ble.w	8003544 <_printf_float+0x23c>
 8003652:	2301      	movs	r3, #1
 8003654:	465a      	mov	r2, fp
 8003656:	4631      	mov	r1, r6
 8003658:	4628      	mov	r0, r5
 800365a:	47b8      	blx	r7
 800365c:	3001      	adds	r0, #1
 800365e:	f43f aeae 	beq.w	80033be <_printf_float+0xb6>
 8003662:	f108 0801 	add.w	r8, r8, #1
 8003666:	e7ec      	b.n	8003642 <_printf_float+0x33a>
 8003668:	4642      	mov	r2, r8
 800366a:	4631      	mov	r1, r6
 800366c:	4628      	mov	r0, r5
 800366e:	47b8      	blx	r7
 8003670:	3001      	adds	r0, #1
 8003672:	d1c2      	bne.n	80035fa <_printf_float+0x2f2>
 8003674:	e6a3      	b.n	80033be <_printf_float+0xb6>
 8003676:	2301      	movs	r3, #1
 8003678:	4631      	mov	r1, r6
 800367a:	4628      	mov	r0, r5
 800367c:	9206      	str	r2, [sp, #24]
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f ae9c 	beq.w	80033be <_printf_float+0xb6>
 8003686:	9a06      	ldr	r2, [sp, #24]
 8003688:	f10b 0b01 	add.w	fp, fp, #1
 800368c:	e7bb      	b.n	8003606 <_printf_float+0x2fe>
 800368e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003692:	4631      	mov	r1, r6
 8003694:	4628      	mov	r0, r5
 8003696:	47b8      	blx	r7
 8003698:	3001      	adds	r0, #1
 800369a:	d1c0      	bne.n	800361e <_printf_float+0x316>
 800369c:	e68f      	b.n	80033be <_printf_float+0xb6>
 800369e:	9a06      	ldr	r2, [sp, #24]
 80036a0:	464b      	mov	r3, r9
 80036a2:	4442      	add	r2, r8
 80036a4:	4631      	mov	r1, r6
 80036a6:	4628      	mov	r0, r5
 80036a8:	47b8      	blx	r7
 80036aa:	3001      	adds	r0, #1
 80036ac:	d1c3      	bne.n	8003636 <_printf_float+0x32e>
 80036ae:	e686      	b.n	80033be <_printf_float+0xb6>
 80036b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80036b4:	f1ba 0f01 	cmp.w	sl, #1
 80036b8:	dc01      	bgt.n	80036be <_printf_float+0x3b6>
 80036ba:	07db      	lsls	r3, r3, #31
 80036bc:	d536      	bpl.n	800372c <_printf_float+0x424>
 80036be:	2301      	movs	r3, #1
 80036c0:	4642      	mov	r2, r8
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b8      	blx	r7
 80036c8:	3001      	adds	r0, #1
 80036ca:	f43f ae78 	beq.w	80033be <_printf_float+0xb6>
 80036ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036d2:	4631      	mov	r1, r6
 80036d4:	4628      	mov	r0, r5
 80036d6:	47b8      	blx	r7
 80036d8:	3001      	adds	r0, #1
 80036da:	f43f ae70 	beq.w	80033be <_printf_float+0xb6>
 80036de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036e2:	2200      	movs	r2, #0
 80036e4:	2300      	movs	r3, #0
 80036e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036ea:	f7fd f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80036ee:	b9c0      	cbnz	r0, 8003722 <_printf_float+0x41a>
 80036f0:	4653      	mov	r3, sl
 80036f2:	f108 0201 	add.w	r2, r8, #1
 80036f6:	4631      	mov	r1, r6
 80036f8:	4628      	mov	r0, r5
 80036fa:	47b8      	blx	r7
 80036fc:	3001      	adds	r0, #1
 80036fe:	d10c      	bne.n	800371a <_printf_float+0x412>
 8003700:	e65d      	b.n	80033be <_printf_float+0xb6>
 8003702:	2301      	movs	r3, #1
 8003704:	465a      	mov	r2, fp
 8003706:	4631      	mov	r1, r6
 8003708:	4628      	mov	r0, r5
 800370a:	47b8      	blx	r7
 800370c:	3001      	adds	r0, #1
 800370e:	f43f ae56 	beq.w	80033be <_printf_float+0xb6>
 8003712:	f108 0801 	add.w	r8, r8, #1
 8003716:	45d0      	cmp	r8, sl
 8003718:	dbf3      	blt.n	8003702 <_printf_float+0x3fa>
 800371a:	464b      	mov	r3, r9
 800371c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003720:	e6df      	b.n	80034e2 <_printf_float+0x1da>
 8003722:	f04f 0800 	mov.w	r8, #0
 8003726:	f104 0b1a 	add.w	fp, r4, #26
 800372a:	e7f4      	b.n	8003716 <_printf_float+0x40e>
 800372c:	2301      	movs	r3, #1
 800372e:	4642      	mov	r2, r8
 8003730:	e7e1      	b.n	80036f6 <_printf_float+0x3ee>
 8003732:	2301      	movs	r3, #1
 8003734:	464a      	mov	r2, r9
 8003736:	4631      	mov	r1, r6
 8003738:	4628      	mov	r0, r5
 800373a:	47b8      	blx	r7
 800373c:	3001      	adds	r0, #1
 800373e:	f43f ae3e 	beq.w	80033be <_printf_float+0xb6>
 8003742:	f108 0801 	add.w	r8, r8, #1
 8003746:	68e3      	ldr	r3, [r4, #12]
 8003748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800374a:	1a5b      	subs	r3, r3, r1
 800374c:	4543      	cmp	r3, r8
 800374e:	dcf0      	bgt.n	8003732 <_printf_float+0x42a>
 8003750:	e6fc      	b.n	800354c <_printf_float+0x244>
 8003752:	f04f 0800 	mov.w	r8, #0
 8003756:	f104 0919 	add.w	r9, r4, #25
 800375a:	e7f4      	b.n	8003746 <_printf_float+0x43e>

0800375c <_printf_common>:
 800375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	4616      	mov	r6, r2
 8003762:	4698      	mov	r8, r3
 8003764:	688a      	ldr	r2, [r1, #8]
 8003766:	690b      	ldr	r3, [r1, #16]
 8003768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800376c:	4293      	cmp	r3, r2
 800376e:	bfb8      	it	lt
 8003770:	4613      	movlt	r3, r2
 8003772:	6033      	str	r3, [r6, #0]
 8003774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003778:	4607      	mov	r7, r0
 800377a:	460c      	mov	r4, r1
 800377c:	b10a      	cbz	r2, 8003782 <_printf_common+0x26>
 800377e:	3301      	adds	r3, #1
 8003780:	6033      	str	r3, [r6, #0]
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	0699      	lsls	r1, r3, #26
 8003786:	bf42      	ittt	mi
 8003788:	6833      	ldrmi	r3, [r6, #0]
 800378a:	3302      	addmi	r3, #2
 800378c:	6033      	strmi	r3, [r6, #0]
 800378e:	6825      	ldr	r5, [r4, #0]
 8003790:	f015 0506 	ands.w	r5, r5, #6
 8003794:	d106      	bne.n	80037a4 <_printf_common+0x48>
 8003796:	f104 0a19 	add.w	sl, r4, #25
 800379a:	68e3      	ldr	r3, [r4, #12]
 800379c:	6832      	ldr	r2, [r6, #0]
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	42ab      	cmp	r3, r5
 80037a2:	dc26      	bgt.n	80037f2 <_printf_common+0x96>
 80037a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	3b00      	subs	r3, #0
 80037ac:	bf18      	it	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	0692      	lsls	r2, r2, #26
 80037b2:	d42b      	bmi.n	800380c <_printf_common+0xb0>
 80037b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037b8:	4641      	mov	r1, r8
 80037ba:	4638      	mov	r0, r7
 80037bc:	47c8      	blx	r9
 80037be:	3001      	adds	r0, #1
 80037c0:	d01e      	beq.n	8003800 <_printf_common+0xa4>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	6922      	ldr	r2, [r4, #16]
 80037c6:	f003 0306 	and.w	r3, r3, #6
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	bf02      	ittt	eq
 80037ce:	68e5      	ldreq	r5, [r4, #12]
 80037d0:	6833      	ldreq	r3, [r6, #0]
 80037d2:	1aed      	subeq	r5, r5, r3
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	bf0c      	ite	eq
 80037d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037dc:	2500      	movne	r5, #0
 80037de:	4293      	cmp	r3, r2
 80037e0:	bfc4      	itt	gt
 80037e2:	1a9b      	subgt	r3, r3, r2
 80037e4:	18ed      	addgt	r5, r5, r3
 80037e6:	2600      	movs	r6, #0
 80037e8:	341a      	adds	r4, #26
 80037ea:	42b5      	cmp	r5, r6
 80037ec:	d11a      	bne.n	8003824 <_printf_common+0xc8>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e008      	b.n	8003804 <_printf_common+0xa8>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4652      	mov	r2, sl
 80037f6:	4641      	mov	r1, r8
 80037f8:	4638      	mov	r0, r7
 80037fa:	47c8      	blx	r9
 80037fc:	3001      	adds	r0, #1
 80037fe:	d103      	bne.n	8003808 <_printf_common+0xac>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003808:	3501      	adds	r5, #1
 800380a:	e7c6      	b.n	800379a <_printf_common+0x3e>
 800380c:	18e1      	adds	r1, r4, r3
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	2030      	movs	r0, #48	@ 0x30
 8003812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003816:	4422      	add	r2, r4
 8003818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800381c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003820:	3302      	adds	r3, #2
 8003822:	e7c7      	b.n	80037b4 <_printf_common+0x58>
 8003824:	2301      	movs	r3, #1
 8003826:	4622      	mov	r2, r4
 8003828:	4641      	mov	r1, r8
 800382a:	4638      	mov	r0, r7
 800382c:	47c8      	blx	r9
 800382e:	3001      	adds	r0, #1
 8003830:	d0e6      	beq.n	8003800 <_printf_common+0xa4>
 8003832:	3601      	adds	r6, #1
 8003834:	e7d9      	b.n	80037ea <_printf_common+0x8e>
	...

08003838 <_printf_i>:
 8003838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	7e0f      	ldrb	r7, [r1, #24]
 800383e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003840:	2f78      	cmp	r7, #120	@ 0x78
 8003842:	4691      	mov	r9, r2
 8003844:	4680      	mov	r8, r0
 8003846:	460c      	mov	r4, r1
 8003848:	469a      	mov	sl, r3
 800384a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800384e:	d807      	bhi.n	8003860 <_printf_i+0x28>
 8003850:	2f62      	cmp	r7, #98	@ 0x62
 8003852:	d80a      	bhi.n	800386a <_printf_i+0x32>
 8003854:	2f00      	cmp	r7, #0
 8003856:	f000 80d2 	beq.w	80039fe <_printf_i+0x1c6>
 800385a:	2f58      	cmp	r7, #88	@ 0x58
 800385c:	f000 80b9 	beq.w	80039d2 <_printf_i+0x19a>
 8003860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003868:	e03a      	b.n	80038e0 <_printf_i+0xa8>
 800386a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800386e:	2b15      	cmp	r3, #21
 8003870:	d8f6      	bhi.n	8003860 <_printf_i+0x28>
 8003872:	a101      	add	r1, pc, #4	@ (adr r1, 8003878 <_printf_i+0x40>)
 8003874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003878:	080038d1 	.word	0x080038d1
 800387c:	080038e5 	.word	0x080038e5
 8003880:	08003861 	.word	0x08003861
 8003884:	08003861 	.word	0x08003861
 8003888:	08003861 	.word	0x08003861
 800388c:	08003861 	.word	0x08003861
 8003890:	080038e5 	.word	0x080038e5
 8003894:	08003861 	.word	0x08003861
 8003898:	08003861 	.word	0x08003861
 800389c:	08003861 	.word	0x08003861
 80038a0:	08003861 	.word	0x08003861
 80038a4:	080039e5 	.word	0x080039e5
 80038a8:	0800390f 	.word	0x0800390f
 80038ac:	0800399f 	.word	0x0800399f
 80038b0:	08003861 	.word	0x08003861
 80038b4:	08003861 	.word	0x08003861
 80038b8:	08003a07 	.word	0x08003a07
 80038bc:	08003861 	.word	0x08003861
 80038c0:	0800390f 	.word	0x0800390f
 80038c4:	08003861 	.word	0x08003861
 80038c8:	08003861 	.word	0x08003861
 80038cc:	080039a7 	.word	0x080039a7
 80038d0:	6833      	ldr	r3, [r6, #0]
 80038d2:	1d1a      	adds	r2, r3, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6032      	str	r2, [r6, #0]
 80038d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038e0:	2301      	movs	r3, #1
 80038e2:	e09d      	b.n	8003a20 <_printf_i+0x1e8>
 80038e4:	6833      	ldr	r3, [r6, #0]
 80038e6:	6820      	ldr	r0, [r4, #0]
 80038e8:	1d19      	adds	r1, r3, #4
 80038ea:	6031      	str	r1, [r6, #0]
 80038ec:	0606      	lsls	r6, r0, #24
 80038ee:	d501      	bpl.n	80038f4 <_printf_i+0xbc>
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	e003      	b.n	80038fc <_printf_i+0xc4>
 80038f4:	0645      	lsls	r5, r0, #25
 80038f6:	d5fb      	bpl.n	80038f0 <_printf_i+0xb8>
 80038f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	da03      	bge.n	8003908 <_printf_i+0xd0>
 8003900:	232d      	movs	r3, #45	@ 0x2d
 8003902:	426d      	negs	r5, r5
 8003904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003908:	4859      	ldr	r0, [pc, #356]	@ (8003a70 <_printf_i+0x238>)
 800390a:	230a      	movs	r3, #10
 800390c:	e011      	b.n	8003932 <_printf_i+0xfa>
 800390e:	6821      	ldr	r1, [r4, #0]
 8003910:	6833      	ldr	r3, [r6, #0]
 8003912:	0608      	lsls	r0, r1, #24
 8003914:	f853 5b04 	ldr.w	r5, [r3], #4
 8003918:	d402      	bmi.n	8003920 <_printf_i+0xe8>
 800391a:	0649      	lsls	r1, r1, #25
 800391c:	bf48      	it	mi
 800391e:	b2ad      	uxthmi	r5, r5
 8003920:	2f6f      	cmp	r7, #111	@ 0x6f
 8003922:	4853      	ldr	r0, [pc, #332]	@ (8003a70 <_printf_i+0x238>)
 8003924:	6033      	str	r3, [r6, #0]
 8003926:	bf14      	ite	ne
 8003928:	230a      	movne	r3, #10
 800392a:	2308      	moveq	r3, #8
 800392c:	2100      	movs	r1, #0
 800392e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003932:	6866      	ldr	r6, [r4, #4]
 8003934:	60a6      	str	r6, [r4, #8]
 8003936:	2e00      	cmp	r6, #0
 8003938:	bfa2      	ittt	ge
 800393a:	6821      	ldrge	r1, [r4, #0]
 800393c:	f021 0104 	bicge.w	r1, r1, #4
 8003940:	6021      	strge	r1, [r4, #0]
 8003942:	b90d      	cbnz	r5, 8003948 <_printf_i+0x110>
 8003944:	2e00      	cmp	r6, #0
 8003946:	d04b      	beq.n	80039e0 <_printf_i+0x1a8>
 8003948:	4616      	mov	r6, r2
 800394a:	fbb5 f1f3 	udiv	r1, r5, r3
 800394e:	fb03 5711 	mls	r7, r3, r1, r5
 8003952:	5dc7      	ldrb	r7, [r0, r7]
 8003954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003958:	462f      	mov	r7, r5
 800395a:	42bb      	cmp	r3, r7
 800395c:	460d      	mov	r5, r1
 800395e:	d9f4      	bls.n	800394a <_printf_i+0x112>
 8003960:	2b08      	cmp	r3, #8
 8003962:	d10b      	bne.n	800397c <_printf_i+0x144>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	07df      	lsls	r7, r3, #31
 8003968:	d508      	bpl.n	800397c <_printf_i+0x144>
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	6861      	ldr	r1, [r4, #4]
 800396e:	4299      	cmp	r1, r3
 8003970:	bfde      	ittt	le
 8003972:	2330      	movle	r3, #48	@ 0x30
 8003974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800397c:	1b92      	subs	r2, r2, r6
 800397e:	6122      	str	r2, [r4, #16]
 8003980:	f8cd a000 	str.w	sl, [sp]
 8003984:	464b      	mov	r3, r9
 8003986:	aa03      	add	r2, sp, #12
 8003988:	4621      	mov	r1, r4
 800398a:	4640      	mov	r0, r8
 800398c:	f7ff fee6 	bl	800375c <_printf_common>
 8003990:	3001      	adds	r0, #1
 8003992:	d14a      	bne.n	8003a2a <_printf_i+0x1f2>
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	b004      	add	sp, #16
 800399a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f043 0320 	orr.w	r3, r3, #32
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	4833      	ldr	r0, [pc, #204]	@ (8003a74 <_printf_i+0x23c>)
 80039a8:	2778      	movs	r7, #120	@ 0x78
 80039aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	6831      	ldr	r1, [r6, #0]
 80039b2:	061f      	lsls	r7, r3, #24
 80039b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80039b8:	d402      	bmi.n	80039c0 <_printf_i+0x188>
 80039ba:	065f      	lsls	r7, r3, #25
 80039bc:	bf48      	it	mi
 80039be:	b2ad      	uxthmi	r5, r5
 80039c0:	6031      	str	r1, [r6, #0]
 80039c2:	07d9      	lsls	r1, r3, #31
 80039c4:	bf44      	itt	mi
 80039c6:	f043 0320 	orrmi.w	r3, r3, #32
 80039ca:	6023      	strmi	r3, [r4, #0]
 80039cc:	b11d      	cbz	r5, 80039d6 <_printf_i+0x19e>
 80039ce:	2310      	movs	r3, #16
 80039d0:	e7ac      	b.n	800392c <_printf_i+0xf4>
 80039d2:	4827      	ldr	r0, [pc, #156]	@ (8003a70 <_printf_i+0x238>)
 80039d4:	e7e9      	b.n	80039aa <_printf_i+0x172>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	f023 0320 	bic.w	r3, r3, #32
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	e7f6      	b.n	80039ce <_printf_i+0x196>
 80039e0:	4616      	mov	r6, r2
 80039e2:	e7bd      	b.n	8003960 <_printf_i+0x128>
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	6825      	ldr	r5, [r4, #0]
 80039e8:	6961      	ldr	r1, [r4, #20]
 80039ea:	1d18      	adds	r0, r3, #4
 80039ec:	6030      	str	r0, [r6, #0]
 80039ee:	062e      	lsls	r6, r5, #24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	d501      	bpl.n	80039f8 <_printf_i+0x1c0>
 80039f4:	6019      	str	r1, [r3, #0]
 80039f6:	e002      	b.n	80039fe <_printf_i+0x1c6>
 80039f8:	0668      	lsls	r0, r5, #25
 80039fa:	d5fb      	bpl.n	80039f4 <_printf_i+0x1bc>
 80039fc:	8019      	strh	r1, [r3, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	6123      	str	r3, [r4, #16]
 8003a02:	4616      	mov	r6, r2
 8003a04:	e7bc      	b.n	8003980 <_printf_i+0x148>
 8003a06:	6833      	ldr	r3, [r6, #0]
 8003a08:	1d1a      	adds	r2, r3, #4
 8003a0a:	6032      	str	r2, [r6, #0]
 8003a0c:	681e      	ldr	r6, [r3, #0]
 8003a0e:	6862      	ldr	r2, [r4, #4]
 8003a10:	2100      	movs	r1, #0
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7fc fbdc 	bl	80001d0 <memchr>
 8003a18:	b108      	cbz	r0, 8003a1e <_printf_i+0x1e6>
 8003a1a:	1b80      	subs	r0, r0, r6
 8003a1c:	6060      	str	r0, [r4, #4]
 8003a1e:	6863      	ldr	r3, [r4, #4]
 8003a20:	6123      	str	r3, [r4, #16]
 8003a22:	2300      	movs	r3, #0
 8003a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a28:	e7aa      	b.n	8003980 <_printf_i+0x148>
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	4632      	mov	r2, r6
 8003a2e:	4649      	mov	r1, r9
 8003a30:	4640      	mov	r0, r8
 8003a32:	47d0      	blx	sl
 8003a34:	3001      	adds	r0, #1
 8003a36:	d0ad      	beq.n	8003994 <_printf_i+0x15c>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	079b      	lsls	r3, r3, #30
 8003a3c:	d413      	bmi.n	8003a66 <_printf_i+0x22e>
 8003a3e:	68e0      	ldr	r0, [r4, #12]
 8003a40:	9b03      	ldr	r3, [sp, #12]
 8003a42:	4298      	cmp	r0, r3
 8003a44:	bfb8      	it	lt
 8003a46:	4618      	movlt	r0, r3
 8003a48:	e7a6      	b.n	8003998 <_printf_i+0x160>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	4649      	mov	r1, r9
 8003a50:	4640      	mov	r0, r8
 8003a52:	47d0      	blx	sl
 8003a54:	3001      	adds	r0, #1
 8003a56:	d09d      	beq.n	8003994 <_printf_i+0x15c>
 8003a58:	3501      	adds	r5, #1
 8003a5a:	68e3      	ldr	r3, [r4, #12]
 8003a5c:	9903      	ldr	r1, [sp, #12]
 8003a5e:	1a5b      	subs	r3, r3, r1
 8003a60:	42ab      	cmp	r3, r5
 8003a62:	dcf2      	bgt.n	8003a4a <_printf_i+0x212>
 8003a64:	e7eb      	b.n	8003a3e <_printf_i+0x206>
 8003a66:	2500      	movs	r5, #0
 8003a68:	f104 0619 	add.w	r6, r4, #25
 8003a6c:	e7f5      	b.n	8003a5a <_printf_i+0x222>
 8003a6e:	bf00      	nop
 8003a70:	08006d81 	.word	0x08006d81
 8003a74:	08006d92 	.word	0x08006d92

08003a78 <std>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a86:	6083      	str	r3, [r0, #8]
 8003a88:	8181      	strh	r1, [r0, #12]
 8003a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a8c:	81c2      	strh	r2, [r0, #14]
 8003a8e:	6183      	str	r3, [r0, #24]
 8003a90:	4619      	mov	r1, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	305c      	adds	r0, #92	@ 0x5c
 8003a96:	f000 f914 	bl	8003cc2 <memset>
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <std+0x58>)
 8003a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <std+0x5c>)
 8003aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <std+0x60>)
 8003aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <std+0x64>)
 8003aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <std+0x68>)
 8003aac:	6224      	str	r4, [r4, #32]
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d006      	beq.n	8003ac0 <std+0x48>
 8003ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ab6:	4294      	cmp	r4, r2
 8003ab8:	d002      	beq.n	8003ac0 <std+0x48>
 8003aba:	33d0      	adds	r3, #208	@ 0xd0
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d105      	bne.n	8003acc <std+0x54>
 8003ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac8:	f000 b978 	b.w	8003dbc <__retarget_lock_init_recursive>
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	bf00      	nop
 8003ad0:	08003c3d 	.word	0x08003c3d
 8003ad4:	08003c5f 	.word	0x08003c5f
 8003ad8:	08003c97 	.word	0x08003c97
 8003adc:	08003cbb 	.word	0x08003cbb
 8003ae0:	20000234 	.word	0x20000234

08003ae4 <stdio_exit_handler>:
 8003ae4:	4a02      	ldr	r2, [pc, #8]	@ (8003af0 <stdio_exit_handler+0xc>)
 8003ae6:	4903      	ldr	r1, [pc, #12]	@ (8003af4 <stdio_exit_handler+0x10>)
 8003ae8:	4803      	ldr	r0, [pc, #12]	@ (8003af8 <stdio_exit_handler+0x14>)
 8003aea:	f000 b869 	b.w	8003bc0 <_fwalk_sglue>
 8003aee:	bf00      	nop
 8003af0:	20000008 	.word	0x20000008
 8003af4:	0800571d 	.word	0x0800571d
 8003af8:	20000018 	.word	0x20000018

08003afc <cleanup_stdio>:
 8003afc:	6841      	ldr	r1, [r0, #4]
 8003afe:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <cleanup_stdio+0x34>)
 8003b00:	4299      	cmp	r1, r3
 8003b02:	b510      	push	{r4, lr}
 8003b04:	4604      	mov	r4, r0
 8003b06:	d001      	beq.n	8003b0c <cleanup_stdio+0x10>
 8003b08:	f001 fe08 	bl	800571c <_fflush_r>
 8003b0c:	68a1      	ldr	r1, [r4, #8]
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <cleanup_stdio+0x38>)
 8003b10:	4299      	cmp	r1, r3
 8003b12:	d002      	beq.n	8003b1a <cleanup_stdio+0x1e>
 8003b14:	4620      	mov	r0, r4
 8003b16:	f001 fe01 	bl	800571c <_fflush_r>
 8003b1a:	68e1      	ldr	r1, [r4, #12]
 8003b1c:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <cleanup_stdio+0x3c>)
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	d004      	beq.n	8003b2c <cleanup_stdio+0x30>
 8003b22:	4620      	mov	r0, r4
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b28:	f001 bdf8 	b.w	800571c <_fflush_r>
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000234 	.word	0x20000234
 8003b34:	2000029c 	.word	0x2000029c
 8003b38:	20000304 	.word	0x20000304

08003b3c <global_stdio_init.part.0>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <global_stdio_init.part.0+0x30>)
 8003b40:	4c0b      	ldr	r4, [pc, #44]	@ (8003b70 <global_stdio_init.part.0+0x34>)
 8003b42:	4a0c      	ldr	r2, [pc, #48]	@ (8003b74 <global_stdio_init.part.0+0x38>)
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	4620      	mov	r0, r4
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	f7ff ff94 	bl	8003a78 <std>
 8003b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b54:	2201      	movs	r2, #1
 8003b56:	2109      	movs	r1, #9
 8003b58:	f7ff ff8e 	bl	8003a78 <std>
 8003b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b60:	2202      	movs	r2, #2
 8003b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b66:	2112      	movs	r1, #18
 8003b68:	f7ff bf86 	b.w	8003a78 <std>
 8003b6c:	2000036c 	.word	0x2000036c
 8003b70:	20000234 	.word	0x20000234
 8003b74:	08003ae5 	.word	0x08003ae5

08003b78 <__sfp_lock_acquire>:
 8003b78:	4801      	ldr	r0, [pc, #4]	@ (8003b80 <__sfp_lock_acquire+0x8>)
 8003b7a:	f000 b920 	b.w	8003dbe <__retarget_lock_acquire_recursive>
 8003b7e:	bf00      	nop
 8003b80:	20000375 	.word	0x20000375

08003b84 <__sfp_lock_release>:
 8003b84:	4801      	ldr	r0, [pc, #4]	@ (8003b8c <__sfp_lock_release+0x8>)
 8003b86:	f000 b91b 	b.w	8003dc0 <__retarget_lock_release_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	20000375 	.word	0x20000375

08003b90 <__sinit>:
 8003b90:	b510      	push	{r4, lr}
 8003b92:	4604      	mov	r4, r0
 8003b94:	f7ff fff0 	bl	8003b78 <__sfp_lock_acquire>
 8003b98:	6a23      	ldr	r3, [r4, #32]
 8003b9a:	b11b      	cbz	r3, 8003ba4 <__sinit+0x14>
 8003b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba0:	f7ff bff0 	b.w	8003b84 <__sfp_lock_release>
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <__sinit+0x28>)
 8003ba6:	6223      	str	r3, [r4, #32]
 8003ba8:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <__sinit+0x2c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f5      	bne.n	8003b9c <__sinit+0xc>
 8003bb0:	f7ff ffc4 	bl	8003b3c <global_stdio_init.part.0>
 8003bb4:	e7f2      	b.n	8003b9c <__sinit+0xc>
 8003bb6:	bf00      	nop
 8003bb8:	08003afd 	.word	0x08003afd
 8003bbc:	2000036c 	.word	0x2000036c

08003bc0 <_fwalk_sglue>:
 8003bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	4688      	mov	r8, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	2600      	movs	r6, #0
 8003bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd4:	d505      	bpl.n	8003be2 <_fwalk_sglue+0x22>
 8003bd6:	6824      	ldr	r4, [r4, #0]
 8003bd8:	2c00      	cmp	r4, #0
 8003bda:	d1f7      	bne.n	8003bcc <_fwalk_sglue+0xc>
 8003bdc:	4630      	mov	r0, r6
 8003bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be2:	89ab      	ldrh	r3, [r5, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d907      	bls.n	8003bf8 <_fwalk_sglue+0x38>
 8003be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bec:	3301      	adds	r3, #1
 8003bee:	d003      	beq.n	8003bf8 <_fwalk_sglue+0x38>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	4306      	orrs	r6, r0
 8003bf8:	3568      	adds	r5, #104	@ 0x68
 8003bfa:	e7e9      	b.n	8003bd0 <_fwalk_sglue+0x10>

08003bfc <siprintf>:
 8003bfc:	b40e      	push	{r1, r2, r3}
 8003bfe:	b500      	push	{lr}
 8003c00:	b09c      	sub	sp, #112	@ 0x70
 8003c02:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c04:	9002      	str	r0, [sp, #8]
 8003c06:	9006      	str	r0, [sp, #24]
 8003c08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c0c:	4809      	ldr	r0, [pc, #36]	@ (8003c34 <siprintf+0x38>)
 8003c0e:	9107      	str	r1, [sp, #28]
 8003c10:	9104      	str	r1, [sp, #16]
 8003c12:	4909      	ldr	r1, [pc, #36]	@ (8003c38 <siprintf+0x3c>)
 8003c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c18:	9105      	str	r1, [sp, #20]
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	a902      	add	r1, sp, #8
 8003c20:	f001 fbfc 	bl	800541c <_svfiprintf_r>
 8003c24:	9b02      	ldr	r3, [sp, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	b01c      	add	sp, #112	@ 0x70
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b003      	add	sp, #12
 8003c32:	4770      	bx	lr
 8003c34:	20000014 	.word	0x20000014
 8003c38:	ffff0208 	.word	0xffff0208

08003c3c <__sread>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	460c      	mov	r4, r1
 8003c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c44:	f000 f86c 	bl	8003d20 <_read_r>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	bfab      	itete	ge
 8003c4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c50:	181b      	addge	r3, r3, r0
 8003c52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c56:	bfac      	ite	ge
 8003c58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c5a:	81a3      	strhlt	r3, [r4, #12]
 8003c5c:	bd10      	pop	{r4, pc}

08003c5e <__swrite>:
 8003c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c62:	461f      	mov	r7, r3
 8003c64:	898b      	ldrh	r3, [r1, #12]
 8003c66:	05db      	lsls	r3, r3, #23
 8003c68:	4605      	mov	r5, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	d505      	bpl.n	8003c7c <__swrite+0x1e>
 8003c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c74:	2302      	movs	r3, #2
 8003c76:	2200      	movs	r2, #0
 8003c78:	f000 f840 	bl	8003cfc <_lseek_r>
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c86:	81a3      	strh	r3, [r4, #12]
 8003c88:	4632      	mov	r2, r6
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c92:	f000 b857 	b.w	8003d44 <_write_r>

08003c96 <__sseek>:
 8003c96:	b510      	push	{r4, lr}
 8003c98:	460c      	mov	r4, r1
 8003c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9e:	f000 f82d 	bl	8003cfc <_lseek_r>
 8003ca2:	1c43      	adds	r3, r0, #1
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	bf15      	itete	ne
 8003ca8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003caa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003cae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cb2:	81a3      	strheq	r3, [r4, #12]
 8003cb4:	bf18      	it	ne
 8003cb6:	81a3      	strhne	r3, [r4, #12]
 8003cb8:	bd10      	pop	{r4, pc}

08003cba <__sclose>:
 8003cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbe:	f000 b80d 	b.w	8003cdc <_close_r>

08003cc2 <memset>:
 8003cc2:	4402      	add	r2, r0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d100      	bne.n	8003ccc <memset+0xa>
 8003cca:	4770      	bx	lr
 8003ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd0:	e7f9      	b.n	8003cc6 <memset+0x4>
	...

08003cd4 <_localeconv_r>:
 8003cd4:	4800      	ldr	r0, [pc, #0]	@ (8003cd8 <_localeconv_r+0x4>)
 8003cd6:	4770      	bx	lr
 8003cd8:	20000154 	.word	0x20000154

08003cdc <_close_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	@ (8003cf8 <_close_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fd ff26 	bl	8001b38 <_close>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_close_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_close_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000370 	.word	0x20000370

08003cfc <_lseek_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4d07      	ldr	r5, [pc, #28]	@ (8003d1c <_lseek_r+0x20>)
 8003d00:	4604      	mov	r4, r0
 8003d02:	4608      	mov	r0, r1
 8003d04:	4611      	mov	r1, r2
 8003d06:	2200      	movs	r2, #0
 8003d08:	602a      	str	r2, [r5, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7fd ff3b 	bl	8001b86 <_lseek>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_lseek_r+0x1e>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_lseek_r+0x1e>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	20000370 	.word	0x20000370

08003d20 <_read_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d07      	ldr	r5, [pc, #28]	@ (8003d40 <_read_r+0x20>)
 8003d24:	4604      	mov	r4, r0
 8003d26:	4608      	mov	r0, r1
 8003d28:	4611      	mov	r1, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	602a      	str	r2, [r5, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f7fd fec9 	bl	8001ac6 <_read>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_read_r+0x1e>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_read_r+0x1e>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000370 	.word	0x20000370

08003d44 <_write_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d07      	ldr	r5, [pc, #28]	@ (8003d64 <_write_r+0x20>)
 8003d48:	4604      	mov	r4, r0
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	602a      	str	r2, [r5, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f7fd fed4 	bl	8001b00 <_write>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d102      	bne.n	8003d62 <_write_r+0x1e>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	b103      	cbz	r3, 8003d62 <_write_r+0x1e>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	20000370 	.word	0x20000370

08003d68 <__errno>:
 8003d68:	4b01      	ldr	r3, [pc, #4]	@ (8003d70 <__errno+0x8>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000014 	.word	0x20000014

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	4d0d      	ldr	r5, [pc, #52]	@ (8003dac <__libc_init_array+0x38>)
 8003d78:	4c0d      	ldr	r4, [pc, #52]	@ (8003db0 <__libc_init_array+0x3c>)
 8003d7a:	1b64      	subs	r4, r4, r5
 8003d7c:	10a4      	asrs	r4, r4, #2
 8003d7e:	2600      	movs	r6, #0
 8003d80:	42a6      	cmp	r6, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	4d0b      	ldr	r5, [pc, #44]	@ (8003db4 <__libc_init_array+0x40>)
 8003d86:	4c0c      	ldr	r4, [pc, #48]	@ (8003db8 <__libc_init_array+0x44>)
 8003d88:	f002 ffc4 	bl	8006d14 <_init>
 8003d8c:	1b64      	subs	r4, r4, r5
 8003d8e:	10a4      	asrs	r4, r4, #2
 8003d90:	2600      	movs	r6, #0
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9c:	4798      	blx	r3
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da6:	4798      	blx	r3
 8003da8:	3601      	adds	r6, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	08007118 	.word	0x08007118
 8003db0:	08007118 	.word	0x08007118
 8003db4:	08007118 	.word	0x08007118
 8003db8:	0800711c 	.word	0x0800711c

08003dbc <__retarget_lock_init_recursive>:
 8003dbc:	4770      	bx	lr

08003dbe <__retarget_lock_acquire_recursive>:
 8003dbe:	4770      	bx	lr

08003dc0 <__retarget_lock_release_recursive>:
 8003dc0:	4770      	bx	lr

08003dc2 <quorem>:
 8003dc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	6903      	ldr	r3, [r0, #16]
 8003dc8:	690c      	ldr	r4, [r1, #16]
 8003dca:	42a3      	cmp	r3, r4
 8003dcc:	4607      	mov	r7, r0
 8003dce:	db7e      	blt.n	8003ece <quorem+0x10c>
 8003dd0:	3c01      	subs	r4, #1
 8003dd2:	f101 0814 	add.w	r8, r1, #20
 8003dd6:	00a3      	lsls	r3, r4, #2
 8003dd8:	f100 0514 	add.w	r5, r0, #20
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dec:	3301      	adds	r3, #1
 8003dee:	429a      	cmp	r2, r3
 8003df0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003df4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003df8:	d32e      	bcc.n	8003e58 <quorem+0x96>
 8003dfa:	f04f 0a00 	mov.w	sl, #0
 8003dfe:	46c4      	mov	ip, r8
 8003e00:	46ae      	mov	lr, r5
 8003e02:	46d3      	mov	fp, sl
 8003e04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e08:	b298      	uxth	r0, r3
 8003e0a:	fb06 a000 	mla	r0, r6, r0, sl
 8003e0e:	0c02      	lsrs	r2, r0, #16
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	fb06 2303 	mla	r3, r6, r3, r2
 8003e16:	f8de 2000 	ldr.w	r2, [lr]
 8003e1a:	b280      	uxth	r0, r0
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	1a12      	subs	r2, r2, r0
 8003e20:	445a      	add	r2, fp
 8003e22:	f8de 0000 	ldr.w	r0, [lr]
 8003e26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003e30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003e34:	b292      	uxth	r2, r2
 8003e36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003e3a:	45e1      	cmp	r9, ip
 8003e3c:	f84e 2b04 	str.w	r2, [lr], #4
 8003e40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003e44:	d2de      	bcs.n	8003e04 <quorem+0x42>
 8003e46:	9b00      	ldr	r3, [sp, #0]
 8003e48:	58eb      	ldr	r3, [r5, r3]
 8003e4a:	b92b      	cbnz	r3, 8003e58 <quorem+0x96>
 8003e4c:	9b01      	ldr	r3, [sp, #4]
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	429d      	cmp	r5, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	d32f      	bcc.n	8003eb6 <quorem+0xf4>
 8003e56:	613c      	str	r4, [r7, #16]
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f001 f97b 	bl	8005154 <__mcmp>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	db25      	blt.n	8003eae <quorem+0xec>
 8003e62:	4629      	mov	r1, r5
 8003e64:	2000      	movs	r0, #0
 8003e66:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e6a:	f8d1 c000 	ldr.w	ip, [r1]
 8003e6e:	fa1f fe82 	uxth.w	lr, r2
 8003e72:	fa1f f38c 	uxth.w	r3, ip
 8003e76:	eba3 030e 	sub.w	r3, r3, lr
 8003e7a:	4403      	add	r3, r0
 8003e7c:	0c12      	lsrs	r2, r2, #16
 8003e7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003e82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e8c:	45c1      	cmp	r9, r8
 8003e8e:	f841 3b04 	str.w	r3, [r1], #4
 8003e92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e96:	d2e6      	bcs.n	8003e66 <quorem+0xa4>
 8003e98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ea0:	b922      	cbnz	r2, 8003eac <quorem+0xea>
 8003ea2:	3b04      	subs	r3, #4
 8003ea4:	429d      	cmp	r5, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	d30b      	bcc.n	8003ec2 <quorem+0x100>
 8003eaa:	613c      	str	r4, [r7, #16]
 8003eac:	3601      	adds	r6, #1
 8003eae:	4630      	mov	r0, r6
 8003eb0:	b003      	add	sp, #12
 8003eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	3b04      	subs	r3, #4
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d1cb      	bne.n	8003e56 <quorem+0x94>
 8003ebe:	3c01      	subs	r4, #1
 8003ec0:	e7c6      	b.n	8003e50 <quorem+0x8e>
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	3b04      	subs	r3, #4
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d1ef      	bne.n	8003eaa <quorem+0xe8>
 8003eca:	3c01      	subs	r4, #1
 8003ecc:	e7ea      	b.n	8003ea4 <quorem+0xe2>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e7ee      	b.n	8003eb0 <quorem+0xee>
 8003ed2:	0000      	movs	r0, r0
 8003ed4:	0000      	movs	r0, r0
	...

08003ed8 <_dtoa_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	69c7      	ldr	r7, [r0, #28]
 8003ede:	b099      	sub	sp, #100	@ 0x64
 8003ee0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003ee4:	ec55 4b10 	vmov	r4, r5, d0
 8003ee8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003eea:	9109      	str	r1, [sp, #36]	@ 0x24
 8003eec:	4683      	mov	fp, r0
 8003eee:	920e      	str	r2, [sp, #56]	@ 0x38
 8003ef0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003ef2:	b97f      	cbnz	r7, 8003f14 <_dtoa_r+0x3c>
 8003ef4:	2010      	movs	r0, #16
 8003ef6:	f000 fdfd 	bl	8004af4 <malloc>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f8cb 001c 	str.w	r0, [fp, #28]
 8003f00:	b920      	cbnz	r0, 8003f0c <_dtoa_r+0x34>
 8003f02:	4ba7      	ldr	r3, [pc, #668]	@ (80041a0 <_dtoa_r+0x2c8>)
 8003f04:	21ef      	movs	r1, #239	@ 0xef
 8003f06:	48a7      	ldr	r0, [pc, #668]	@ (80041a4 <_dtoa_r+0x2cc>)
 8003f08:	f001 fc68 	bl	80057dc <__assert_func>
 8003f0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003f10:	6007      	str	r7, [r0, #0]
 8003f12:	60c7      	str	r7, [r0, #12]
 8003f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	b159      	cbz	r1, 8003f34 <_dtoa_r+0x5c>
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	604a      	str	r2, [r1, #4]
 8003f20:	2301      	movs	r3, #1
 8003f22:	4093      	lsls	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
 8003f26:	4658      	mov	r0, fp
 8003f28:	f000 feda 	bl	8004ce0 <_Bfree>
 8003f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	1e2b      	subs	r3, r5, #0
 8003f36:	bfb9      	ittee	lt
 8003f38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003f3c:	9303      	strlt	r3, [sp, #12]
 8003f3e:	2300      	movge	r3, #0
 8003f40:	6033      	strge	r3, [r6, #0]
 8003f42:	9f03      	ldr	r7, [sp, #12]
 8003f44:	4b98      	ldr	r3, [pc, #608]	@ (80041a8 <_dtoa_r+0x2d0>)
 8003f46:	bfbc      	itt	lt
 8003f48:	2201      	movlt	r2, #1
 8003f4a:	6032      	strlt	r2, [r6, #0]
 8003f4c:	43bb      	bics	r3, r7
 8003f4e:	d112      	bne.n	8003f76 <_dtoa_r+0x9e>
 8003f50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003f52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f5c:	4323      	orrs	r3, r4
 8003f5e:	f000 854d 	beq.w	80049fc <_dtoa_r+0xb24>
 8003f62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003f64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80041bc <_dtoa_r+0x2e4>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 854f 	beq.w	8004a0c <_dtoa_r+0xb34>
 8003f6e:	f10a 0303 	add.w	r3, sl, #3
 8003f72:	f000 bd49 	b.w	8004a08 <_dtoa_r+0xb30>
 8003f76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	ec51 0b17 	vmov	r0, r1, d7
 8003f80:	2300      	movs	r3, #0
 8003f82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003f86:	f7fc fd9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f8a:	4680      	mov	r8, r0
 8003f8c:	b158      	cbz	r0, 8003fa6 <_dtoa_r+0xce>
 8003f8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003f90:	2301      	movs	r3, #1
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003f96:	b113      	cbz	r3, 8003f9e <_dtoa_r+0xc6>
 8003f98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003f9a:	4b84      	ldr	r3, [pc, #528]	@ (80041ac <_dtoa_r+0x2d4>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80041c0 <_dtoa_r+0x2e8>
 8003fa2:	f000 bd33 	b.w	8004a0c <_dtoa_r+0xb34>
 8003fa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003faa:	aa16      	add	r2, sp, #88	@ 0x58
 8003fac:	a917      	add	r1, sp, #92	@ 0x5c
 8003fae:	4658      	mov	r0, fp
 8003fb0:	f001 f980 	bl	80052b4 <__d2b>
 8003fb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003fb8:	4681      	mov	r9, r0
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	d077      	beq.n	80040ae <_dtoa_r+0x1d6>
 8003fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003fd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003fd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003fd8:	4619      	mov	r1, r3
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4b74      	ldr	r3, [pc, #464]	@ (80041b0 <_dtoa_r+0x2d8>)
 8003fde:	f7fc f953 	bl	8000288 <__aeabi_dsub>
 8003fe2:	a369      	add	r3, pc, #420	@ (adr r3, 8004188 <_dtoa_r+0x2b0>)
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f7fc fb06 	bl	80005f8 <__aeabi_dmul>
 8003fec:	a368      	add	r3, pc, #416	@ (adr r3, 8004190 <_dtoa_r+0x2b8>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f7fc f94b 	bl	800028c <__adddf3>
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	f7fc fa92 	bl	8000524 <__aeabi_i2d>
 8004000:	a365      	add	r3, pc, #404	@ (adr r3, 8004198 <_dtoa_r+0x2c0>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc faf7 	bl	80005f8 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4620      	mov	r0, r4
 8004010:	4629      	mov	r1, r5
 8004012:	f7fc f93b 	bl	800028c <__adddf3>
 8004016:	4604      	mov	r4, r0
 8004018:	460d      	mov	r5, r1
 800401a:	f7fc fd9d 	bl	8000b58 <__aeabi_d2iz>
 800401e:	2200      	movs	r2, #0
 8004020:	4607      	mov	r7, r0
 8004022:	2300      	movs	r3, #0
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc fd58 	bl	8000adc <__aeabi_dcmplt>
 800402c:	b140      	cbz	r0, 8004040 <_dtoa_r+0x168>
 800402e:	4638      	mov	r0, r7
 8004030:	f7fc fa78 	bl	8000524 <__aeabi_i2d>
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	f7fc fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 800403c:	b900      	cbnz	r0, 8004040 <_dtoa_r+0x168>
 800403e:	3f01      	subs	r7, #1
 8004040:	2f16      	cmp	r7, #22
 8004042:	d851      	bhi.n	80040e8 <_dtoa_r+0x210>
 8004044:	4b5b      	ldr	r3, [pc, #364]	@ (80041b4 <_dtoa_r+0x2dc>)
 8004046:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004052:	f7fc fd43 	bl	8000adc <__aeabi_dcmplt>
 8004056:	2800      	cmp	r0, #0
 8004058:	d048      	beq.n	80040ec <_dtoa_r+0x214>
 800405a:	3f01      	subs	r7, #1
 800405c:	2300      	movs	r3, #0
 800405e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004060:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004062:	1b9b      	subs	r3, r3, r6
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	bf44      	itt	mi
 8004068:	f1c3 0801 	rsbmi	r8, r3, #1
 800406c:	2300      	movmi	r3, #0
 800406e:	9208      	str	r2, [sp, #32]
 8004070:	bf54      	ite	pl
 8004072:	f04f 0800 	movpl.w	r8, #0
 8004076:	9308      	strmi	r3, [sp, #32]
 8004078:	2f00      	cmp	r7, #0
 800407a:	db39      	blt.n	80040f0 <_dtoa_r+0x218>
 800407c:	9b08      	ldr	r3, [sp, #32]
 800407e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004080:	443b      	add	r3, r7
 8004082:	9308      	str	r3, [sp, #32]
 8004084:	2300      	movs	r3, #0
 8004086:	930a      	str	r3, [sp, #40]	@ 0x28
 8004088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800408a:	2b09      	cmp	r3, #9
 800408c:	d864      	bhi.n	8004158 <_dtoa_r+0x280>
 800408e:	2b05      	cmp	r3, #5
 8004090:	bfc4      	itt	gt
 8004092:	3b04      	subgt	r3, #4
 8004094:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004098:	f1a3 0302 	sub.w	r3, r3, #2
 800409c:	bfcc      	ite	gt
 800409e:	2400      	movgt	r4, #0
 80040a0:	2401      	movle	r4, #1
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d863      	bhi.n	800416e <_dtoa_r+0x296>
 80040a6:	e8df f003 	tbb	[pc, r3]
 80040aa:	372a      	.short	0x372a
 80040ac:	5535      	.short	0x5535
 80040ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80040b2:	441e      	add	r6, r3
 80040b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	bfc1      	itttt	gt
 80040bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80040c0:	409f      	lslgt	r7, r3
 80040c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80040c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80040ca:	bfd6      	itet	le
 80040cc:	f1c3 0320 	rsble	r3, r3, #32
 80040d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80040d4:	fa04 f003 	lslle.w	r0, r4, r3
 80040d8:	f7fc fa14 	bl	8000504 <__aeabi_ui2d>
 80040dc:	2201      	movs	r2, #1
 80040de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80040e2:	3e01      	subs	r6, #1
 80040e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80040e6:	e777      	b.n	8003fd8 <_dtoa_r+0x100>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e7b8      	b.n	800405e <_dtoa_r+0x186>
 80040ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80040ee:	e7b7      	b.n	8004060 <_dtoa_r+0x188>
 80040f0:	427b      	negs	r3, r7
 80040f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80040f4:	2300      	movs	r3, #0
 80040f6:	eba8 0807 	sub.w	r8, r8, r7
 80040fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80040fc:	e7c4      	b.n	8004088 <_dtoa_r+0x1b0>
 80040fe:	2300      	movs	r3, #0
 8004100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	dc35      	bgt.n	8004174 <_dtoa_r+0x29c>
 8004108:	2301      	movs	r3, #1
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	9307      	str	r3, [sp, #28]
 800410e:	461a      	mov	r2, r3
 8004110:	920e      	str	r2, [sp, #56]	@ 0x38
 8004112:	e00b      	b.n	800412c <_dtoa_r+0x254>
 8004114:	2301      	movs	r3, #1
 8004116:	e7f3      	b.n	8004100 <_dtoa_r+0x228>
 8004118:	2300      	movs	r3, #0
 800411a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800411c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	9307      	str	r3, [sp, #28]
 8004128:	bfb8      	it	lt
 800412a:	2301      	movlt	r3, #1
 800412c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004130:	2100      	movs	r1, #0
 8004132:	2204      	movs	r2, #4
 8004134:	f102 0514 	add.w	r5, r2, #20
 8004138:	429d      	cmp	r5, r3
 800413a:	d91f      	bls.n	800417c <_dtoa_r+0x2a4>
 800413c:	6041      	str	r1, [r0, #4]
 800413e:	4658      	mov	r0, fp
 8004140:	f000 fd8e 	bl	8004c60 <_Balloc>
 8004144:	4682      	mov	sl, r0
 8004146:	2800      	cmp	r0, #0
 8004148:	d13c      	bne.n	80041c4 <_dtoa_r+0x2ec>
 800414a:	4b1b      	ldr	r3, [pc, #108]	@ (80041b8 <_dtoa_r+0x2e0>)
 800414c:	4602      	mov	r2, r0
 800414e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004152:	e6d8      	b.n	8003f06 <_dtoa_r+0x2e>
 8004154:	2301      	movs	r3, #1
 8004156:	e7e0      	b.n	800411a <_dtoa_r+0x242>
 8004158:	2401      	movs	r4, #1
 800415a:	2300      	movs	r3, #0
 800415c:	9309      	str	r3, [sp, #36]	@ 0x24
 800415e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	9307      	str	r3, [sp, #28]
 8004168:	2200      	movs	r2, #0
 800416a:	2312      	movs	r3, #18
 800416c:	e7d0      	b.n	8004110 <_dtoa_r+0x238>
 800416e:	2301      	movs	r3, #1
 8004170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004172:	e7f5      	b.n	8004160 <_dtoa_r+0x288>
 8004174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	9307      	str	r3, [sp, #28]
 800417a:	e7d7      	b.n	800412c <_dtoa_r+0x254>
 800417c:	3101      	adds	r1, #1
 800417e:	0052      	lsls	r2, r2, #1
 8004180:	e7d8      	b.n	8004134 <_dtoa_r+0x25c>
 8004182:	bf00      	nop
 8004184:	f3af 8000 	nop.w
 8004188:	636f4361 	.word	0x636f4361
 800418c:	3fd287a7 	.word	0x3fd287a7
 8004190:	8b60c8b3 	.word	0x8b60c8b3
 8004194:	3fc68a28 	.word	0x3fc68a28
 8004198:	509f79fb 	.word	0x509f79fb
 800419c:	3fd34413 	.word	0x3fd34413
 80041a0:	08006db0 	.word	0x08006db0
 80041a4:	08006dc7 	.word	0x08006dc7
 80041a8:	7ff00000 	.word	0x7ff00000
 80041ac:	08006d80 	.word	0x08006d80
 80041b0:	3ff80000 	.word	0x3ff80000
 80041b4:	08006ec0 	.word	0x08006ec0
 80041b8:	08006e1f 	.word	0x08006e1f
 80041bc:	08006dac 	.word	0x08006dac
 80041c0:	08006d7f 	.word	0x08006d7f
 80041c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041c8:	6018      	str	r0, [r3, #0]
 80041ca:	9b07      	ldr	r3, [sp, #28]
 80041cc:	2b0e      	cmp	r3, #14
 80041ce:	f200 80a4 	bhi.w	800431a <_dtoa_r+0x442>
 80041d2:	2c00      	cmp	r4, #0
 80041d4:	f000 80a1 	beq.w	800431a <_dtoa_r+0x442>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	dd33      	ble.n	8004244 <_dtoa_r+0x36c>
 80041dc:	4bad      	ldr	r3, [pc, #692]	@ (8004494 <_dtoa_r+0x5bc>)
 80041de:	f007 020f 	and.w	r2, r7, #15
 80041e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041e6:	ed93 7b00 	vldr	d7, [r3]
 80041ea:	05f8      	lsls	r0, r7, #23
 80041ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80041f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80041f4:	d516      	bpl.n	8004224 <_dtoa_r+0x34c>
 80041f6:	4ba8      	ldr	r3, [pc, #672]	@ (8004498 <_dtoa_r+0x5c0>)
 80041f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004200:	f7fc fb24 	bl	800084c <__aeabi_ddiv>
 8004204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004208:	f004 040f 	and.w	r4, r4, #15
 800420c:	2603      	movs	r6, #3
 800420e:	4da2      	ldr	r5, [pc, #648]	@ (8004498 <_dtoa_r+0x5c0>)
 8004210:	b954      	cbnz	r4, 8004228 <_dtoa_r+0x350>
 8004212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800421a:	f7fc fb17 	bl	800084c <__aeabi_ddiv>
 800421e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004222:	e028      	b.n	8004276 <_dtoa_r+0x39e>
 8004224:	2602      	movs	r6, #2
 8004226:	e7f2      	b.n	800420e <_dtoa_r+0x336>
 8004228:	07e1      	lsls	r1, r4, #31
 800422a:	d508      	bpl.n	800423e <_dtoa_r+0x366>
 800422c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004230:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004234:	f7fc f9e0 	bl	80005f8 <__aeabi_dmul>
 8004238:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800423c:	3601      	adds	r6, #1
 800423e:	1064      	asrs	r4, r4, #1
 8004240:	3508      	adds	r5, #8
 8004242:	e7e5      	b.n	8004210 <_dtoa_r+0x338>
 8004244:	f000 80d2 	beq.w	80043ec <_dtoa_r+0x514>
 8004248:	427c      	negs	r4, r7
 800424a:	4b92      	ldr	r3, [pc, #584]	@ (8004494 <_dtoa_r+0x5bc>)
 800424c:	4d92      	ldr	r5, [pc, #584]	@ (8004498 <_dtoa_r+0x5c0>)
 800424e:	f004 020f 	and.w	r2, r4, #15
 8004252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800425e:	f7fc f9cb 	bl	80005f8 <__aeabi_dmul>
 8004262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004266:	1124      	asrs	r4, r4, #4
 8004268:	2300      	movs	r3, #0
 800426a:	2602      	movs	r6, #2
 800426c:	2c00      	cmp	r4, #0
 800426e:	f040 80b2 	bne.w	80043d6 <_dtoa_r+0x4fe>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1d3      	bne.n	800421e <_dtoa_r+0x346>
 8004276:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004278:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80b7 	beq.w	80043f0 <_dtoa_r+0x518>
 8004282:	4b86      	ldr	r3, [pc, #536]	@ (800449c <_dtoa_r+0x5c4>)
 8004284:	2200      	movs	r2, #0
 8004286:	4620      	mov	r0, r4
 8004288:	4629      	mov	r1, r5
 800428a:	f7fc fc27 	bl	8000adc <__aeabi_dcmplt>
 800428e:	2800      	cmp	r0, #0
 8004290:	f000 80ae 	beq.w	80043f0 <_dtoa_r+0x518>
 8004294:	9b07      	ldr	r3, [sp, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80aa 	beq.w	80043f0 <_dtoa_r+0x518>
 800429c:	9b00      	ldr	r3, [sp, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	dd37      	ble.n	8004312 <_dtoa_r+0x43a>
 80042a2:	1e7b      	subs	r3, r7, #1
 80042a4:	9304      	str	r3, [sp, #16]
 80042a6:	4620      	mov	r0, r4
 80042a8:	4b7d      	ldr	r3, [pc, #500]	@ (80044a0 <_dtoa_r+0x5c8>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7fc f9a3 	bl	80005f8 <__aeabi_dmul>
 80042b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b6:	9c00      	ldr	r4, [sp, #0]
 80042b8:	3601      	adds	r6, #1
 80042ba:	4630      	mov	r0, r6
 80042bc:	f7fc f932 	bl	8000524 <__aeabi_i2d>
 80042c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042c4:	f7fc f998 	bl	80005f8 <__aeabi_dmul>
 80042c8:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <_dtoa_r+0x5cc>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	f7fb ffde 	bl	800028c <__adddf3>
 80042d0:	4605      	mov	r5, r0
 80042d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80042d6:	2c00      	cmp	r4, #0
 80042d8:	f040 808d 	bne.w	80043f6 <_dtoa_r+0x51e>
 80042dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042e0:	4b71      	ldr	r3, [pc, #452]	@ (80044a8 <_dtoa_r+0x5d0>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	f7fb ffd0 	bl	8000288 <__aeabi_dsub>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042f0:	462a      	mov	r2, r5
 80042f2:	4633      	mov	r3, r6
 80042f4:	f7fc fc10 	bl	8000b18 <__aeabi_dcmpgt>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f040 828b 	bne.w	8004814 <_dtoa_r+0x93c>
 80042fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004302:	462a      	mov	r2, r5
 8004304:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004308:	f7fc fbe8 	bl	8000adc <__aeabi_dcmplt>
 800430c:	2800      	cmp	r0, #0
 800430e:	f040 8128 	bne.w	8004562 <_dtoa_r+0x68a>
 8004312:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004316:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800431a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800431c:	2b00      	cmp	r3, #0
 800431e:	f2c0 815a 	blt.w	80045d6 <_dtoa_r+0x6fe>
 8004322:	2f0e      	cmp	r7, #14
 8004324:	f300 8157 	bgt.w	80045d6 <_dtoa_r+0x6fe>
 8004328:	4b5a      	ldr	r3, [pc, #360]	@ (8004494 <_dtoa_r+0x5bc>)
 800432a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800432e:	ed93 7b00 	vldr	d7, [r3]
 8004332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	ed8d 7b00 	vstr	d7, [sp]
 800433a:	da03      	bge.n	8004344 <_dtoa_r+0x46c>
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f340 8101 	ble.w	8004546 <_dtoa_r+0x66e>
 8004344:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004348:	4656      	mov	r6, sl
 800434a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800434e:	4620      	mov	r0, r4
 8004350:	4629      	mov	r1, r5
 8004352:	f7fc fa7b 	bl	800084c <__aeabi_ddiv>
 8004356:	f7fc fbff 	bl	8000b58 <__aeabi_d2iz>
 800435a:	4680      	mov	r8, r0
 800435c:	f7fc f8e2 	bl	8000524 <__aeabi_i2d>
 8004360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004364:	f7fc f948 	bl	80005f8 <__aeabi_dmul>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004374:	f7fb ff88 	bl	8000288 <__aeabi_dsub>
 8004378:	f806 4b01 	strb.w	r4, [r6], #1
 800437c:	9d07      	ldr	r5, [sp, #28]
 800437e:	eba6 040a 	sub.w	r4, r6, sl
 8004382:	42a5      	cmp	r5, r4
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	f040 8117 	bne.w	80045ba <_dtoa_r+0x6e2>
 800438c:	f7fb ff7e 	bl	800028c <__adddf3>
 8004390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004394:	4604      	mov	r4, r0
 8004396:	460d      	mov	r5, r1
 8004398:	f7fc fbbe 	bl	8000b18 <__aeabi_dcmpgt>
 800439c:	2800      	cmp	r0, #0
 800439e:	f040 80f9 	bne.w	8004594 <_dtoa_r+0x6bc>
 80043a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043a6:	4620      	mov	r0, r4
 80043a8:	4629      	mov	r1, r5
 80043aa:	f7fc fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ae:	b118      	cbz	r0, 80043b8 <_dtoa_r+0x4e0>
 80043b0:	f018 0f01 	tst.w	r8, #1
 80043b4:	f040 80ee 	bne.w	8004594 <_dtoa_r+0x6bc>
 80043b8:	4649      	mov	r1, r9
 80043ba:	4658      	mov	r0, fp
 80043bc:	f000 fc90 	bl	8004ce0 <_Bfree>
 80043c0:	2300      	movs	r3, #0
 80043c2:	7033      	strb	r3, [r6, #0]
 80043c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80043c6:	3701      	adds	r7, #1
 80043c8:	601f      	str	r7, [r3, #0]
 80043ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 831d 	beq.w	8004a0c <_dtoa_r+0xb34>
 80043d2:	601e      	str	r6, [r3, #0]
 80043d4:	e31a      	b.n	8004a0c <_dtoa_r+0xb34>
 80043d6:	07e2      	lsls	r2, r4, #31
 80043d8:	d505      	bpl.n	80043e6 <_dtoa_r+0x50e>
 80043da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043de:	f7fc f90b 	bl	80005f8 <__aeabi_dmul>
 80043e2:	3601      	adds	r6, #1
 80043e4:	2301      	movs	r3, #1
 80043e6:	1064      	asrs	r4, r4, #1
 80043e8:	3508      	adds	r5, #8
 80043ea:	e73f      	b.n	800426c <_dtoa_r+0x394>
 80043ec:	2602      	movs	r6, #2
 80043ee:	e742      	b.n	8004276 <_dtoa_r+0x39e>
 80043f0:	9c07      	ldr	r4, [sp, #28]
 80043f2:	9704      	str	r7, [sp, #16]
 80043f4:	e761      	b.n	80042ba <_dtoa_r+0x3e2>
 80043f6:	4b27      	ldr	r3, [pc, #156]	@ (8004494 <_dtoa_r+0x5bc>)
 80043f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80043fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004402:	4454      	add	r4, sl
 8004404:	2900      	cmp	r1, #0
 8004406:	d053      	beq.n	80044b0 <_dtoa_r+0x5d8>
 8004408:	4928      	ldr	r1, [pc, #160]	@ (80044ac <_dtoa_r+0x5d4>)
 800440a:	2000      	movs	r0, #0
 800440c:	f7fc fa1e 	bl	800084c <__aeabi_ddiv>
 8004410:	4633      	mov	r3, r6
 8004412:	462a      	mov	r2, r5
 8004414:	f7fb ff38 	bl	8000288 <__aeabi_dsub>
 8004418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800441c:	4656      	mov	r6, sl
 800441e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004422:	f7fc fb99 	bl	8000b58 <__aeabi_d2iz>
 8004426:	4605      	mov	r5, r0
 8004428:	f7fc f87c 	bl	8000524 <__aeabi_i2d>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004434:	f7fb ff28 	bl	8000288 <__aeabi_dsub>
 8004438:	3530      	adds	r5, #48	@ 0x30
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004442:	f806 5b01 	strb.w	r5, [r6], #1
 8004446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800444a:	f7fc fb47 	bl	8000adc <__aeabi_dcmplt>
 800444e:	2800      	cmp	r0, #0
 8004450:	d171      	bne.n	8004536 <_dtoa_r+0x65e>
 8004452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004456:	4911      	ldr	r1, [pc, #68]	@ (800449c <_dtoa_r+0x5c4>)
 8004458:	2000      	movs	r0, #0
 800445a:	f7fb ff15 	bl	8000288 <__aeabi_dsub>
 800445e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004462:	f7fc fb3b 	bl	8000adc <__aeabi_dcmplt>
 8004466:	2800      	cmp	r0, #0
 8004468:	f040 8095 	bne.w	8004596 <_dtoa_r+0x6be>
 800446c:	42a6      	cmp	r6, r4
 800446e:	f43f af50 	beq.w	8004312 <_dtoa_r+0x43a>
 8004472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004476:	4b0a      	ldr	r3, [pc, #40]	@ (80044a0 <_dtoa_r+0x5c8>)
 8004478:	2200      	movs	r2, #0
 800447a:	f7fc f8bd 	bl	80005f8 <__aeabi_dmul>
 800447e:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <_dtoa_r+0x5c8>)
 8004480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004484:	2200      	movs	r2, #0
 8004486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800448a:	f7fc f8b5 	bl	80005f8 <__aeabi_dmul>
 800448e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004492:	e7c4      	b.n	800441e <_dtoa_r+0x546>
 8004494:	08006ec0 	.word	0x08006ec0
 8004498:	08006e98 	.word	0x08006e98
 800449c:	3ff00000 	.word	0x3ff00000
 80044a0:	40240000 	.word	0x40240000
 80044a4:	401c0000 	.word	0x401c0000
 80044a8:	40140000 	.word	0x40140000
 80044ac:	3fe00000 	.word	0x3fe00000
 80044b0:	4631      	mov	r1, r6
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7fc f8a0 	bl	80005f8 <__aeabi_dmul>
 80044b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80044be:	4656      	mov	r6, sl
 80044c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c4:	f7fc fb48 	bl	8000b58 <__aeabi_d2iz>
 80044c8:	4605      	mov	r5, r0
 80044ca:	f7fc f82b 	bl	8000524 <__aeabi_i2d>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044d6:	f7fb fed7 	bl	8000288 <__aeabi_dsub>
 80044da:	3530      	adds	r5, #48	@ 0x30
 80044dc:	f806 5b01 	strb.w	r5, [r6], #1
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	d124      	bne.n	800453a <_dtoa_r+0x662>
 80044f0:	4bac      	ldr	r3, [pc, #688]	@ (80047a4 <_dtoa_r+0x8cc>)
 80044f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80044f6:	f7fb fec9 	bl	800028c <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004502:	f7fc fb09 	bl	8000b18 <__aeabi_dcmpgt>
 8004506:	2800      	cmp	r0, #0
 8004508:	d145      	bne.n	8004596 <_dtoa_r+0x6be>
 800450a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800450e:	49a5      	ldr	r1, [pc, #660]	@ (80047a4 <_dtoa_r+0x8cc>)
 8004510:	2000      	movs	r0, #0
 8004512:	f7fb feb9 	bl	8000288 <__aeabi_dsub>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451e:	f7fc fadd 	bl	8000adc <__aeabi_dcmplt>
 8004522:	2800      	cmp	r0, #0
 8004524:	f43f aef5 	beq.w	8004312 <_dtoa_r+0x43a>
 8004528:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800452a:	1e73      	subs	r3, r6, #1
 800452c:	9315      	str	r3, [sp, #84]	@ 0x54
 800452e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004532:	2b30      	cmp	r3, #48	@ 0x30
 8004534:	d0f8      	beq.n	8004528 <_dtoa_r+0x650>
 8004536:	9f04      	ldr	r7, [sp, #16]
 8004538:	e73e      	b.n	80043b8 <_dtoa_r+0x4e0>
 800453a:	4b9b      	ldr	r3, [pc, #620]	@ (80047a8 <_dtoa_r+0x8d0>)
 800453c:	f7fc f85c 	bl	80005f8 <__aeabi_dmul>
 8004540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004544:	e7bc      	b.n	80044c0 <_dtoa_r+0x5e8>
 8004546:	d10c      	bne.n	8004562 <_dtoa_r+0x68a>
 8004548:	4b98      	ldr	r3, [pc, #608]	@ (80047ac <_dtoa_r+0x8d4>)
 800454a:	2200      	movs	r2, #0
 800454c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004550:	f7fc f852 	bl	80005f8 <__aeabi_dmul>
 8004554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004558:	f7fc fad4 	bl	8000b04 <__aeabi_dcmpge>
 800455c:	2800      	cmp	r0, #0
 800455e:	f000 8157 	beq.w	8004810 <_dtoa_r+0x938>
 8004562:	2400      	movs	r4, #0
 8004564:	4625      	mov	r5, r4
 8004566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004568:	43db      	mvns	r3, r3
 800456a:	9304      	str	r3, [sp, #16]
 800456c:	4656      	mov	r6, sl
 800456e:	2700      	movs	r7, #0
 8004570:	4621      	mov	r1, r4
 8004572:	4658      	mov	r0, fp
 8004574:	f000 fbb4 	bl	8004ce0 <_Bfree>
 8004578:	2d00      	cmp	r5, #0
 800457a:	d0dc      	beq.n	8004536 <_dtoa_r+0x65e>
 800457c:	b12f      	cbz	r7, 800458a <_dtoa_r+0x6b2>
 800457e:	42af      	cmp	r7, r5
 8004580:	d003      	beq.n	800458a <_dtoa_r+0x6b2>
 8004582:	4639      	mov	r1, r7
 8004584:	4658      	mov	r0, fp
 8004586:	f000 fbab 	bl	8004ce0 <_Bfree>
 800458a:	4629      	mov	r1, r5
 800458c:	4658      	mov	r0, fp
 800458e:	f000 fba7 	bl	8004ce0 <_Bfree>
 8004592:	e7d0      	b.n	8004536 <_dtoa_r+0x65e>
 8004594:	9704      	str	r7, [sp, #16]
 8004596:	4633      	mov	r3, r6
 8004598:	461e      	mov	r6, r3
 800459a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800459e:	2a39      	cmp	r2, #57	@ 0x39
 80045a0:	d107      	bne.n	80045b2 <_dtoa_r+0x6da>
 80045a2:	459a      	cmp	sl, r3
 80045a4:	d1f8      	bne.n	8004598 <_dtoa_r+0x6c0>
 80045a6:	9a04      	ldr	r2, [sp, #16]
 80045a8:	3201      	adds	r2, #1
 80045aa:	9204      	str	r2, [sp, #16]
 80045ac:	2230      	movs	r2, #48	@ 0x30
 80045ae:	f88a 2000 	strb.w	r2, [sl]
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	3201      	adds	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e7bd      	b.n	8004536 <_dtoa_r+0x65e>
 80045ba:	4b7b      	ldr	r3, [pc, #492]	@ (80047a8 <_dtoa_r+0x8d0>)
 80045bc:	2200      	movs	r2, #0
 80045be:	f7fc f81b 	bl	80005f8 <__aeabi_dmul>
 80045c2:	2200      	movs	r2, #0
 80045c4:	2300      	movs	r3, #0
 80045c6:	4604      	mov	r4, r0
 80045c8:	460d      	mov	r5, r1
 80045ca:	f7fc fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f43f aebb 	beq.w	800434a <_dtoa_r+0x472>
 80045d4:	e6f0      	b.n	80043b8 <_dtoa_r+0x4e0>
 80045d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80045d8:	2a00      	cmp	r2, #0
 80045da:	f000 80db 	beq.w	8004794 <_dtoa_r+0x8bc>
 80045de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045e0:	2a01      	cmp	r2, #1
 80045e2:	f300 80bf 	bgt.w	8004764 <_dtoa_r+0x88c>
 80045e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80045e8:	2a00      	cmp	r2, #0
 80045ea:	f000 80b7 	beq.w	800475c <_dtoa_r+0x884>
 80045ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80045f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045f4:	4646      	mov	r6, r8
 80045f6:	9a08      	ldr	r2, [sp, #32]
 80045f8:	2101      	movs	r1, #1
 80045fa:	441a      	add	r2, r3
 80045fc:	4658      	mov	r0, fp
 80045fe:	4498      	add	r8, r3
 8004600:	9208      	str	r2, [sp, #32]
 8004602:	f000 fc21 	bl	8004e48 <__i2b>
 8004606:	4605      	mov	r5, r0
 8004608:	b15e      	cbz	r6, 8004622 <_dtoa_r+0x74a>
 800460a:	9b08      	ldr	r3, [sp, #32]
 800460c:	2b00      	cmp	r3, #0
 800460e:	dd08      	ble.n	8004622 <_dtoa_r+0x74a>
 8004610:	42b3      	cmp	r3, r6
 8004612:	9a08      	ldr	r2, [sp, #32]
 8004614:	bfa8      	it	ge
 8004616:	4633      	movge	r3, r6
 8004618:	eba8 0803 	sub.w	r8, r8, r3
 800461c:	1af6      	subs	r6, r6, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	9308      	str	r3, [sp, #32]
 8004622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004624:	b1f3      	cbz	r3, 8004664 <_dtoa_r+0x78c>
 8004626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80b7 	beq.w	800479c <_dtoa_r+0x8c4>
 800462e:	b18c      	cbz	r4, 8004654 <_dtoa_r+0x77c>
 8004630:	4629      	mov	r1, r5
 8004632:	4622      	mov	r2, r4
 8004634:	4658      	mov	r0, fp
 8004636:	f000 fcc7 	bl	8004fc8 <__pow5mult>
 800463a:	464a      	mov	r2, r9
 800463c:	4601      	mov	r1, r0
 800463e:	4605      	mov	r5, r0
 8004640:	4658      	mov	r0, fp
 8004642:	f000 fc17 	bl	8004e74 <__multiply>
 8004646:	4649      	mov	r1, r9
 8004648:	9004      	str	r0, [sp, #16]
 800464a:	4658      	mov	r0, fp
 800464c:	f000 fb48 	bl	8004ce0 <_Bfree>
 8004650:	9b04      	ldr	r3, [sp, #16]
 8004652:	4699      	mov	r9, r3
 8004654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004656:	1b1a      	subs	r2, r3, r4
 8004658:	d004      	beq.n	8004664 <_dtoa_r+0x78c>
 800465a:	4649      	mov	r1, r9
 800465c:	4658      	mov	r0, fp
 800465e:	f000 fcb3 	bl	8004fc8 <__pow5mult>
 8004662:	4681      	mov	r9, r0
 8004664:	2101      	movs	r1, #1
 8004666:	4658      	mov	r0, fp
 8004668:	f000 fbee 	bl	8004e48 <__i2b>
 800466c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800466e:	4604      	mov	r4, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 81cf 	beq.w	8004a14 <_dtoa_r+0xb3c>
 8004676:	461a      	mov	r2, r3
 8004678:	4601      	mov	r1, r0
 800467a:	4658      	mov	r0, fp
 800467c:	f000 fca4 	bl	8004fc8 <__pow5mult>
 8004680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004682:	2b01      	cmp	r3, #1
 8004684:	4604      	mov	r4, r0
 8004686:	f300 8095 	bgt.w	80047b4 <_dtoa_r+0x8dc>
 800468a:	9b02      	ldr	r3, [sp, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8087 	bne.w	80047a0 <_dtoa_r+0x8c8>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 8089 	bne.w	80047b0 <_dtoa_r+0x8d8>
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	051b      	lsls	r3, r3, #20
 80046a8:	b12b      	cbz	r3, 80046b6 <_dtoa_r+0x7de>
 80046aa:	9b08      	ldr	r3, [sp, #32]
 80046ac:	3301      	adds	r3, #1
 80046ae:	9308      	str	r3, [sp, #32]
 80046b0:	f108 0801 	add.w	r8, r8, #1
 80046b4:	2301      	movs	r3, #1
 80046b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 81b0 	beq.w	8004a20 <_dtoa_r+0xb48>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80046c6:	6918      	ldr	r0, [r3, #16]
 80046c8:	f000 fb72 	bl	8004db0 <__hi0bits>
 80046cc:	f1c0 0020 	rsb	r0, r0, #32
 80046d0:	9b08      	ldr	r3, [sp, #32]
 80046d2:	4418      	add	r0, r3
 80046d4:	f010 001f 	ands.w	r0, r0, #31
 80046d8:	d077      	beq.n	80047ca <_dtoa_r+0x8f2>
 80046da:	f1c0 0320 	rsb	r3, r0, #32
 80046de:	2b04      	cmp	r3, #4
 80046e0:	dd6b      	ble.n	80047ba <_dtoa_r+0x8e2>
 80046e2:	9b08      	ldr	r3, [sp, #32]
 80046e4:	f1c0 001c 	rsb	r0, r0, #28
 80046e8:	4403      	add	r3, r0
 80046ea:	4480      	add	r8, r0
 80046ec:	4406      	add	r6, r0
 80046ee:	9308      	str	r3, [sp, #32]
 80046f0:	f1b8 0f00 	cmp.w	r8, #0
 80046f4:	dd05      	ble.n	8004702 <_dtoa_r+0x82a>
 80046f6:	4649      	mov	r1, r9
 80046f8:	4642      	mov	r2, r8
 80046fa:	4658      	mov	r0, fp
 80046fc:	f000 fcbe 	bl	800507c <__lshift>
 8004700:	4681      	mov	r9, r0
 8004702:	9b08      	ldr	r3, [sp, #32]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dd05      	ble.n	8004714 <_dtoa_r+0x83c>
 8004708:	4621      	mov	r1, r4
 800470a:	461a      	mov	r2, r3
 800470c:	4658      	mov	r0, fp
 800470e:	f000 fcb5 	bl	800507c <__lshift>
 8004712:	4604      	mov	r4, r0
 8004714:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004716:	2b00      	cmp	r3, #0
 8004718:	d059      	beq.n	80047ce <_dtoa_r+0x8f6>
 800471a:	4621      	mov	r1, r4
 800471c:	4648      	mov	r0, r9
 800471e:	f000 fd19 	bl	8005154 <__mcmp>
 8004722:	2800      	cmp	r0, #0
 8004724:	da53      	bge.n	80047ce <_dtoa_r+0x8f6>
 8004726:	1e7b      	subs	r3, r7, #1
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	4649      	mov	r1, r9
 800472c:	2300      	movs	r3, #0
 800472e:	220a      	movs	r2, #10
 8004730:	4658      	mov	r0, fp
 8004732:	f000 faf7 	bl	8004d24 <__multadd>
 8004736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004738:	4681      	mov	r9, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8172 	beq.w	8004a24 <_dtoa_r+0xb4c>
 8004740:	2300      	movs	r3, #0
 8004742:	4629      	mov	r1, r5
 8004744:	220a      	movs	r2, #10
 8004746:	4658      	mov	r0, fp
 8004748:	f000 faec 	bl	8004d24 <__multadd>
 800474c:	9b00      	ldr	r3, [sp, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	4605      	mov	r5, r0
 8004752:	dc67      	bgt.n	8004824 <_dtoa_r+0x94c>
 8004754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004756:	2b02      	cmp	r3, #2
 8004758:	dc41      	bgt.n	80047de <_dtoa_r+0x906>
 800475a:	e063      	b.n	8004824 <_dtoa_r+0x94c>
 800475c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800475e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004762:	e746      	b.n	80045f2 <_dtoa_r+0x71a>
 8004764:	9b07      	ldr	r3, [sp, #28]
 8004766:	1e5c      	subs	r4, r3, #1
 8004768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800476a:	42a3      	cmp	r3, r4
 800476c:	bfbf      	itttt	lt
 800476e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004770:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004772:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004774:	1ae3      	sublt	r3, r4, r3
 8004776:	bfb4      	ite	lt
 8004778:	18d2      	addlt	r2, r2, r3
 800477a:	1b1c      	subge	r4, r3, r4
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	bfbc      	itt	lt
 8004780:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004782:	2400      	movlt	r4, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	bfb5      	itete	lt
 8004788:	eba8 0603 	sublt.w	r6, r8, r3
 800478c:	9b07      	ldrge	r3, [sp, #28]
 800478e:	2300      	movlt	r3, #0
 8004790:	4646      	movge	r6, r8
 8004792:	e730      	b.n	80045f6 <_dtoa_r+0x71e>
 8004794:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004796:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004798:	4646      	mov	r6, r8
 800479a:	e735      	b.n	8004608 <_dtoa_r+0x730>
 800479c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800479e:	e75c      	b.n	800465a <_dtoa_r+0x782>
 80047a0:	2300      	movs	r3, #0
 80047a2:	e788      	b.n	80046b6 <_dtoa_r+0x7de>
 80047a4:	3fe00000 	.word	0x3fe00000
 80047a8:	40240000 	.word	0x40240000
 80047ac:	40140000 	.word	0x40140000
 80047b0:	9b02      	ldr	r3, [sp, #8]
 80047b2:	e780      	b.n	80046b6 <_dtoa_r+0x7de>
 80047b4:	2300      	movs	r3, #0
 80047b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047b8:	e782      	b.n	80046c0 <_dtoa_r+0x7e8>
 80047ba:	d099      	beq.n	80046f0 <_dtoa_r+0x818>
 80047bc:	9a08      	ldr	r2, [sp, #32]
 80047be:	331c      	adds	r3, #28
 80047c0:	441a      	add	r2, r3
 80047c2:	4498      	add	r8, r3
 80047c4:	441e      	add	r6, r3
 80047c6:	9208      	str	r2, [sp, #32]
 80047c8:	e792      	b.n	80046f0 <_dtoa_r+0x818>
 80047ca:	4603      	mov	r3, r0
 80047cc:	e7f6      	b.n	80047bc <_dtoa_r+0x8e4>
 80047ce:	9b07      	ldr	r3, [sp, #28]
 80047d0:	9704      	str	r7, [sp, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc20      	bgt.n	8004818 <_dtoa_r+0x940>
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047da:	2b02      	cmp	r3, #2
 80047dc:	dd1e      	ble.n	800481c <_dtoa_r+0x944>
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f aec0 	bne.w	8004566 <_dtoa_r+0x68e>
 80047e6:	4621      	mov	r1, r4
 80047e8:	2205      	movs	r2, #5
 80047ea:	4658      	mov	r0, fp
 80047ec:	f000 fa9a 	bl	8004d24 <__multadd>
 80047f0:	4601      	mov	r1, r0
 80047f2:	4604      	mov	r4, r0
 80047f4:	4648      	mov	r0, r9
 80047f6:	f000 fcad 	bl	8005154 <__mcmp>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f77f aeb3 	ble.w	8004566 <_dtoa_r+0x68e>
 8004800:	4656      	mov	r6, sl
 8004802:	2331      	movs	r3, #49	@ 0x31
 8004804:	f806 3b01 	strb.w	r3, [r6], #1
 8004808:	9b04      	ldr	r3, [sp, #16]
 800480a:	3301      	adds	r3, #1
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	e6ae      	b.n	800456e <_dtoa_r+0x696>
 8004810:	9c07      	ldr	r4, [sp, #28]
 8004812:	9704      	str	r7, [sp, #16]
 8004814:	4625      	mov	r5, r4
 8004816:	e7f3      	b.n	8004800 <_dtoa_r+0x928>
 8004818:	9b07      	ldr	r3, [sp, #28]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8104 	beq.w	8004a2c <_dtoa_r+0xb54>
 8004824:	2e00      	cmp	r6, #0
 8004826:	dd05      	ble.n	8004834 <_dtoa_r+0x95c>
 8004828:	4629      	mov	r1, r5
 800482a:	4632      	mov	r2, r6
 800482c:	4658      	mov	r0, fp
 800482e:	f000 fc25 	bl	800507c <__lshift>
 8004832:	4605      	mov	r5, r0
 8004834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	d05a      	beq.n	80048f0 <_dtoa_r+0xa18>
 800483a:	6869      	ldr	r1, [r5, #4]
 800483c:	4658      	mov	r0, fp
 800483e:	f000 fa0f 	bl	8004c60 <_Balloc>
 8004842:	4606      	mov	r6, r0
 8004844:	b928      	cbnz	r0, 8004852 <_dtoa_r+0x97a>
 8004846:	4b84      	ldr	r3, [pc, #528]	@ (8004a58 <_dtoa_r+0xb80>)
 8004848:	4602      	mov	r2, r0
 800484a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800484e:	f7ff bb5a 	b.w	8003f06 <_dtoa_r+0x2e>
 8004852:	692a      	ldr	r2, [r5, #16]
 8004854:	3202      	adds	r2, #2
 8004856:	0092      	lsls	r2, r2, #2
 8004858:	f105 010c 	add.w	r1, r5, #12
 800485c:	300c      	adds	r0, #12
 800485e:	f000 ffaf 	bl	80057c0 <memcpy>
 8004862:	2201      	movs	r2, #1
 8004864:	4631      	mov	r1, r6
 8004866:	4658      	mov	r0, fp
 8004868:	f000 fc08 	bl	800507c <__lshift>
 800486c:	f10a 0301 	add.w	r3, sl, #1
 8004870:	9307      	str	r3, [sp, #28]
 8004872:	9b00      	ldr	r3, [sp, #0]
 8004874:	4453      	add	r3, sl
 8004876:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	462f      	mov	r7, r5
 8004880:	930a      	str	r3, [sp, #40]	@ 0x28
 8004882:	4605      	mov	r5, r0
 8004884:	9b07      	ldr	r3, [sp, #28]
 8004886:	4621      	mov	r1, r4
 8004888:	3b01      	subs	r3, #1
 800488a:	4648      	mov	r0, r9
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f7ff fa98 	bl	8003dc2 <quorem>
 8004892:	4639      	mov	r1, r7
 8004894:	9002      	str	r0, [sp, #8]
 8004896:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800489a:	4648      	mov	r0, r9
 800489c:	f000 fc5a 	bl	8005154 <__mcmp>
 80048a0:	462a      	mov	r2, r5
 80048a2:	9008      	str	r0, [sp, #32]
 80048a4:	4621      	mov	r1, r4
 80048a6:	4658      	mov	r0, fp
 80048a8:	f000 fc70 	bl	800518c <__mdiff>
 80048ac:	68c2      	ldr	r2, [r0, #12]
 80048ae:	4606      	mov	r6, r0
 80048b0:	bb02      	cbnz	r2, 80048f4 <_dtoa_r+0xa1c>
 80048b2:	4601      	mov	r1, r0
 80048b4:	4648      	mov	r0, r9
 80048b6:	f000 fc4d 	bl	8005154 <__mcmp>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4631      	mov	r1, r6
 80048be:	4658      	mov	r0, fp
 80048c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80048c2:	f000 fa0d 	bl	8004ce0 <_Bfree>
 80048c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048ca:	9e07      	ldr	r6, [sp, #28]
 80048cc:	ea43 0102 	orr.w	r1, r3, r2
 80048d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048d2:	4319      	orrs	r1, r3
 80048d4:	d110      	bne.n	80048f8 <_dtoa_r+0xa20>
 80048d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80048da:	d029      	beq.n	8004930 <_dtoa_r+0xa58>
 80048dc:	9b08      	ldr	r3, [sp, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd02      	ble.n	80048e8 <_dtoa_r+0xa10>
 80048e2:	9b02      	ldr	r3, [sp, #8]
 80048e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80048e8:	9b00      	ldr	r3, [sp, #0]
 80048ea:	f883 8000 	strb.w	r8, [r3]
 80048ee:	e63f      	b.n	8004570 <_dtoa_r+0x698>
 80048f0:	4628      	mov	r0, r5
 80048f2:	e7bb      	b.n	800486c <_dtoa_r+0x994>
 80048f4:	2201      	movs	r2, #1
 80048f6:	e7e1      	b.n	80048bc <_dtoa_r+0x9e4>
 80048f8:	9b08      	ldr	r3, [sp, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db04      	blt.n	8004908 <_dtoa_r+0xa30>
 80048fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004900:	430b      	orrs	r3, r1
 8004902:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004904:	430b      	orrs	r3, r1
 8004906:	d120      	bne.n	800494a <_dtoa_r+0xa72>
 8004908:	2a00      	cmp	r2, #0
 800490a:	dded      	ble.n	80048e8 <_dtoa_r+0xa10>
 800490c:	4649      	mov	r1, r9
 800490e:	2201      	movs	r2, #1
 8004910:	4658      	mov	r0, fp
 8004912:	f000 fbb3 	bl	800507c <__lshift>
 8004916:	4621      	mov	r1, r4
 8004918:	4681      	mov	r9, r0
 800491a:	f000 fc1b 	bl	8005154 <__mcmp>
 800491e:	2800      	cmp	r0, #0
 8004920:	dc03      	bgt.n	800492a <_dtoa_r+0xa52>
 8004922:	d1e1      	bne.n	80048e8 <_dtoa_r+0xa10>
 8004924:	f018 0f01 	tst.w	r8, #1
 8004928:	d0de      	beq.n	80048e8 <_dtoa_r+0xa10>
 800492a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800492e:	d1d8      	bne.n	80048e2 <_dtoa_r+0xa0a>
 8004930:	9a00      	ldr	r2, [sp, #0]
 8004932:	2339      	movs	r3, #57	@ 0x39
 8004934:	7013      	strb	r3, [r2, #0]
 8004936:	4633      	mov	r3, r6
 8004938:	461e      	mov	r6, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004940:	2a39      	cmp	r2, #57	@ 0x39
 8004942:	d052      	beq.n	80049ea <_dtoa_r+0xb12>
 8004944:	3201      	adds	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e612      	b.n	8004570 <_dtoa_r+0x698>
 800494a:	2a00      	cmp	r2, #0
 800494c:	dd07      	ble.n	800495e <_dtoa_r+0xa86>
 800494e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004952:	d0ed      	beq.n	8004930 <_dtoa_r+0xa58>
 8004954:	9a00      	ldr	r2, [sp, #0]
 8004956:	f108 0301 	add.w	r3, r8, #1
 800495a:	7013      	strb	r3, [r2, #0]
 800495c:	e608      	b.n	8004570 <_dtoa_r+0x698>
 800495e:	9b07      	ldr	r3, [sp, #28]
 8004960:	9a07      	ldr	r2, [sp, #28]
 8004962:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004968:	4293      	cmp	r3, r2
 800496a:	d028      	beq.n	80049be <_dtoa_r+0xae6>
 800496c:	4649      	mov	r1, r9
 800496e:	2300      	movs	r3, #0
 8004970:	220a      	movs	r2, #10
 8004972:	4658      	mov	r0, fp
 8004974:	f000 f9d6 	bl	8004d24 <__multadd>
 8004978:	42af      	cmp	r7, r5
 800497a:	4681      	mov	r9, r0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	f04f 020a 	mov.w	r2, #10
 8004984:	4639      	mov	r1, r7
 8004986:	4658      	mov	r0, fp
 8004988:	d107      	bne.n	800499a <_dtoa_r+0xac2>
 800498a:	f000 f9cb 	bl	8004d24 <__multadd>
 800498e:	4607      	mov	r7, r0
 8004990:	4605      	mov	r5, r0
 8004992:	9b07      	ldr	r3, [sp, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	9307      	str	r3, [sp, #28]
 8004998:	e774      	b.n	8004884 <_dtoa_r+0x9ac>
 800499a:	f000 f9c3 	bl	8004d24 <__multadd>
 800499e:	4629      	mov	r1, r5
 80049a0:	4607      	mov	r7, r0
 80049a2:	2300      	movs	r3, #0
 80049a4:	220a      	movs	r2, #10
 80049a6:	4658      	mov	r0, fp
 80049a8:	f000 f9bc 	bl	8004d24 <__multadd>
 80049ac:	4605      	mov	r5, r0
 80049ae:	e7f0      	b.n	8004992 <_dtoa_r+0xaba>
 80049b0:	9b00      	ldr	r3, [sp, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bfcc      	ite	gt
 80049b6:	461e      	movgt	r6, r3
 80049b8:	2601      	movle	r6, #1
 80049ba:	4456      	add	r6, sl
 80049bc:	2700      	movs	r7, #0
 80049be:	4649      	mov	r1, r9
 80049c0:	2201      	movs	r2, #1
 80049c2:	4658      	mov	r0, fp
 80049c4:	f000 fb5a 	bl	800507c <__lshift>
 80049c8:	4621      	mov	r1, r4
 80049ca:	4681      	mov	r9, r0
 80049cc:	f000 fbc2 	bl	8005154 <__mcmp>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	dcb0      	bgt.n	8004936 <_dtoa_r+0xa5e>
 80049d4:	d102      	bne.n	80049dc <_dtoa_r+0xb04>
 80049d6:	f018 0f01 	tst.w	r8, #1
 80049da:	d1ac      	bne.n	8004936 <_dtoa_r+0xa5e>
 80049dc:	4633      	mov	r3, r6
 80049de:	461e      	mov	r6, r3
 80049e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049e4:	2a30      	cmp	r2, #48	@ 0x30
 80049e6:	d0fa      	beq.n	80049de <_dtoa_r+0xb06>
 80049e8:	e5c2      	b.n	8004570 <_dtoa_r+0x698>
 80049ea:	459a      	cmp	sl, r3
 80049ec:	d1a4      	bne.n	8004938 <_dtoa_r+0xa60>
 80049ee:	9b04      	ldr	r3, [sp, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	9304      	str	r3, [sp, #16]
 80049f4:	2331      	movs	r3, #49	@ 0x31
 80049f6:	f88a 3000 	strb.w	r3, [sl]
 80049fa:	e5b9      	b.n	8004570 <_dtoa_r+0x698>
 80049fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004a5c <_dtoa_r+0xb84>
 8004a02:	b11b      	cbz	r3, 8004a0c <_dtoa_r+0xb34>
 8004a04:	f10a 0308 	add.w	r3, sl, #8
 8004a08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	b019      	add	sp, #100	@ 0x64
 8004a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	f77f ae37 	ble.w	800468a <_dtoa_r+0x7b2>
 8004a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a20:	2001      	movs	r0, #1
 8004a22:	e655      	b.n	80046d0 <_dtoa_r+0x7f8>
 8004a24:	9b00      	ldr	r3, [sp, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f77f aed6 	ble.w	80047d8 <_dtoa_r+0x900>
 8004a2c:	4656      	mov	r6, sl
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4648      	mov	r0, r9
 8004a32:	f7ff f9c6 	bl	8003dc2 <quorem>
 8004a36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004a3a:	f806 8b01 	strb.w	r8, [r6], #1
 8004a3e:	9b00      	ldr	r3, [sp, #0]
 8004a40:	eba6 020a 	sub.w	r2, r6, sl
 8004a44:	4293      	cmp	r3, r2
 8004a46:	ddb3      	ble.n	80049b0 <_dtoa_r+0xad8>
 8004a48:	4649      	mov	r1, r9
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	220a      	movs	r2, #10
 8004a4e:	4658      	mov	r0, fp
 8004a50:	f000 f968 	bl	8004d24 <__multadd>
 8004a54:	4681      	mov	r9, r0
 8004a56:	e7ea      	b.n	8004a2e <_dtoa_r+0xb56>
 8004a58:	08006e1f 	.word	0x08006e1f
 8004a5c:	08006da3 	.word	0x08006da3

08004a60 <_free_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4605      	mov	r5, r0
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d041      	beq.n	8004aec <_free_r+0x8c>
 8004a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6c:	1f0c      	subs	r4, r1, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	18e4      	addlt	r4, r4, r3
 8004a74:	f000 f8e8 	bl	8004c48 <__malloc_lock>
 8004a78:	4a1d      	ldr	r2, [pc, #116]	@ (8004af0 <_free_r+0x90>)
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	b933      	cbnz	r3, 8004a8c <_free_r+0x2c>
 8004a7e:	6063      	str	r3, [r4, #4]
 8004a80:	6014      	str	r4, [r2, #0]
 8004a82:	4628      	mov	r0, r5
 8004a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a88:	f000 b8e4 	b.w	8004c54 <__malloc_unlock>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d908      	bls.n	8004aa2 <_free_r+0x42>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	1821      	adds	r1, r4, r0
 8004a94:	428b      	cmp	r3, r1
 8004a96:	bf01      	itttt	eq
 8004a98:	6819      	ldreq	r1, [r3, #0]
 8004a9a:	685b      	ldreq	r3, [r3, #4]
 8004a9c:	1809      	addeq	r1, r1, r0
 8004a9e:	6021      	streq	r1, [r4, #0]
 8004aa0:	e7ed      	b.n	8004a7e <_free_r+0x1e>
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b10b      	cbz	r3, 8004aac <_free_r+0x4c>
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	d9fa      	bls.n	8004aa2 <_free_r+0x42>
 8004aac:	6811      	ldr	r1, [r2, #0]
 8004aae:	1850      	adds	r0, r2, r1
 8004ab0:	42a0      	cmp	r0, r4
 8004ab2:	d10b      	bne.n	8004acc <_free_r+0x6c>
 8004ab4:	6820      	ldr	r0, [r4, #0]
 8004ab6:	4401      	add	r1, r0
 8004ab8:	1850      	adds	r0, r2, r1
 8004aba:	4283      	cmp	r3, r0
 8004abc:	6011      	str	r1, [r2, #0]
 8004abe:	d1e0      	bne.n	8004a82 <_free_r+0x22>
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	6053      	str	r3, [r2, #4]
 8004ac6:	4408      	add	r0, r1
 8004ac8:	6010      	str	r0, [r2, #0]
 8004aca:	e7da      	b.n	8004a82 <_free_r+0x22>
 8004acc:	d902      	bls.n	8004ad4 <_free_r+0x74>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	602b      	str	r3, [r5, #0]
 8004ad2:	e7d6      	b.n	8004a82 <_free_r+0x22>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	1821      	adds	r1, r4, r0
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	bf04      	itt	eq
 8004adc:	6819      	ldreq	r1, [r3, #0]
 8004ade:	685b      	ldreq	r3, [r3, #4]
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	bf04      	itt	eq
 8004ae4:	1809      	addeq	r1, r1, r0
 8004ae6:	6021      	streq	r1, [r4, #0]
 8004ae8:	6054      	str	r4, [r2, #4]
 8004aea:	e7ca      	b.n	8004a82 <_free_r+0x22>
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
 8004aee:	bf00      	nop
 8004af0:	2000037c 	.word	0x2000037c

08004af4 <malloc>:
 8004af4:	4b02      	ldr	r3, [pc, #8]	@ (8004b00 <malloc+0xc>)
 8004af6:	4601      	mov	r1, r0
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	f000 b825 	b.w	8004b48 <_malloc_r>
 8004afe:	bf00      	nop
 8004b00:	20000014 	.word	0x20000014

08004b04 <sbrk_aligned>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4e0f      	ldr	r6, [pc, #60]	@ (8004b44 <sbrk_aligned+0x40>)
 8004b08:	460c      	mov	r4, r1
 8004b0a:	6831      	ldr	r1, [r6, #0]
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	b911      	cbnz	r1, 8004b16 <sbrk_aligned+0x12>
 8004b10:	f000 fe46 	bl	80057a0 <_sbrk_r>
 8004b14:	6030      	str	r0, [r6, #0]
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 fe41 	bl	80057a0 <_sbrk_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	d103      	bne.n	8004b2a <sbrk_aligned+0x26>
 8004b22:	f04f 34ff 	mov.w	r4, #4294967295
 8004b26:	4620      	mov	r0, r4
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	1cc4      	adds	r4, r0, #3
 8004b2c:	f024 0403 	bic.w	r4, r4, #3
 8004b30:	42a0      	cmp	r0, r4
 8004b32:	d0f8      	beq.n	8004b26 <sbrk_aligned+0x22>
 8004b34:	1a21      	subs	r1, r4, r0
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 fe32 	bl	80057a0 <_sbrk_r>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1f2      	bne.n	8004b26 <sbrk_aligned+0x22>
 8004b40:	e7ef      	b.n	8004b22 <sbrk_aligned+0x1e>
 8004b42:	bf00      	nop
 8004b44:	20000378 	.word	0x20000378

08004b48 <_malloc_r>:
 8004b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	1ccd      	adds	r5, r1, #3
 8004b4e:	f025 0503 	bic.w	r5, r5, #3
 8004b52:	3508      	adds	r5, #8
 8004b54:	2d0c      	cmp	r5, #12
 8004b56:	bf38      	it	cc
 8004b58:	250c      	movcc	r5, #12
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	db01      	blt.n	8004b64 <_malloc_r+0x1c>
 8004b60:	42a9      	cmp	r1, r5
 8004b62:	d904      	bls.n	8004b6e <_malloc_r+0x26>
 8004b64:	230c      	movs	r3, #12
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c44 <_malloc_r+0xfc>
 8004b72:	f000 f869 	bl	8004c48 <__malloc_lock>
 8004b76:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	bb44      	cbnz	r4, 8004bd0 <_malloc_r+0x88>
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7ff ffbf 	bl	8004b04 <sbrk_aligned>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	4604      	mov	r4, r0
 8004b8a:	d158      	bne.n	8004c3e <_malloc_r+0xf6>
 8004b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b90:	4627      	mov	r7, r4
 8004b92:	2f00      	cmp	r7, #0
 8004b94:	d143      	bne.n	8004c1e <_malloc_r+0xd6>
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	d04b      	beq.n	8004c32 <_malloc_r+0xea>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	eb04 0903 	add.w	r9, r4, r3
 8004ba4:	f000 fdfc 	bl	80057a0 <_sbrk_r>
 8004ba8:	4581      	cmp	r9, r0
 8004baa:	d142      	bne.n	8004c32 <_malloc_r+0xea>
 8004bac:	6821      	ldr	r1, [r4, #0]
 8004bae:	1a6d      	subs	r5, r5, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff ffa6 	bl	8004b04 <sbrk_aligned>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d03a      	beq.n	8004c32 <_malloc_r+0xea>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	442b      	add	r3, r5
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	bb62      	cbnz	r2, 8004c24 <_malloc_r+0xdc>
 8004bca:	f8c8 7000 	str.w	r7, [r8]
 8004bce:	e00f      	b.n	8004bf0 <_malloc_r+0xa8>
 8004bd0:	6822      	ldr	r2, [r4, #0]
 8004bd2:	1b52      	subs	r2, r2, r5
 8004bd4:	d420      	bmi.n	8004c18 <_malloc_r+0xd0>
 8004bd6:	2a0b      	cmp	r2, #11
 8004bd8:	d917      	bls.n	8004c0a <_malloc_r+0xc2>
 8004bda:	1961      	adds	r1, r4, r5
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	6025      	str	r5, [r4, #0]
 8004be0:	bf18      	it	ne
 8004be2:	6059      	strne	r1, [r3, #4]
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	bf08      	it	eq
 8004be8:	f8c8 1000 	streq.w	r1, [r8]
 8004bec:	5162      	str	r2, [r4, r5]
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f82f 	bl	8004c54 <__malloc_unlock>
 8004bf6:	f104 000b 	add.w	r0, r4, #11
 8004bfa:	1d23      	adds	r3, r4, #4
 8004bfc:	f020 0007 	bic.w	r0, r0, #7
 8004c00:	1ac2      	subs	r2, r0, r3
 8004c02:	bf1c      	itt	ne
 8004c04:	1a1b      	subne	r3, r3, r0
 8004c06:	50a3      	strne	r3, [r4, r2]
 8004c08:	e7af      	b.n	8004b6a <_malloc_r+0x22>
 8004c0a:	6862      	ldr	r2, [r4, #4]
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	bf0c      	ite	eq
 8004c10:	f8c8 2000 	streq.w	r2, [r8]
 8004c14:	605a      	strne	r2, [r3, #4]
 8004c16:	e7eb      	b.n	8004bf0 <_malloc_r+0xa8>
 8004c18:	4623      	mov	r3, r4
 8004c1a:	6864      	ldr	r4, [r4, #4]
 8004c1c:	e7ae      	b.n	8004b7c <_malloc_r+0x34>
 8004c1e:	463c      	mov	r4, r7
 8004c20:	687f      	ldr	r7, [r7, #4]
 8004c22:	e7b6      	b.n	8004b92 <_malloc_r+0x4a>
 8004c24:	461a      	mov	r2, r3
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d1fb      	bne.n	8004c24 <_malloc_r+0xdc>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6053      	str	r3, [r2, #4]
 8004c30:	e7de      	b.n	8004bf0 <_malloc_r+0xa8>
 8004c32:	230c      	movs	r3, #12
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 f80c 	bl	8004c54 <__malloc_unlock>
 8004c3c:	e794      	b.n	8004b68 <_malloc_r+0x20>
 8004c3e:	6005      	str	r5, [r0, #0]
 8004c40:	e7d6      	b.n	8004bf0 <_malloc_r+0xa8>
 8004c42:	bf00      	nop
 8004c44:	2000037c 	.word	0x2000037c

08004c48 <__malloc_lock>:
 8004c48:	4801      	ldr	r0, [pc, #4]	@ (8004c50 <__malloc_lock+0x8>)
 8004c4a:	f7ff b8b8 	b.w	8003dbe <__retarget_lock_acquire_recursive>
 8004c4e:	bf00      	nop
 8004c50:	20000374 	.word	0x20000374

08004c54 <__malloc_unlock>:
 8004c54:	4801      	ldr	r0, [pc, #4]	@ (8004c5c <__malloc_unlock+0x8>)
 8004c56:	f7ff b8b3 	b.w	8003dc0 <__retarget_lock_release_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000374 	.word	0x20000374

08004c60 <_Balloc>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	69c6      	ldr	r6, [r0, #28]
 8004c64:	4604      	mov	r4, r0
 8004c66:	460d      	mov	r5, r1
 8004c68:	b976      	cbnz	r6, 8004c88 <_Balloc+0x28>
 8004c6a:	2010      	movs	r0, #16
 8004c6c:	f7ff ff42 	bl	8004af4 <malloc>
 8004c70:	4602      	mov	r2, r0
 8004c72:	61e0      	str	r0, [r4, #28]
 8004c74:	b920      	cbnz	r0, 8004c80 <_Balloc+0x20>
 8004c76:	4b18      	ldr	r3, [pc, #96]	@ (8004cd8 <_Balloc+0x78>)
 8004c78:	4818      	ldr	r0, [pc, #96]	@ (8004cdc <_Balloc+0x7c>)
 8004c7a:	216b      	movs	r1, #107	@ 0x6b
 8004c7c:	f000 fdae 	bl	80057dc <__assert_func>
 8004c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c84:	6006      	str	r6, [r0, #0]
 8004c86:	60c6      	str	r6, [r0, #12]
 8004c88:	69e6      	ldr	r6, [r4, #28]
 8004c8a:	68f3      	ldr	r3, [r6, #12]
 8004c8c:	b183      	cbz	r3, 8004cb0 <_Balloc+0x50>
 8004c8e:	69e3      	ldr	r3, [r4, #28]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c96:	b9b8      	cbnz	r0, 8004cc8 <_Balloc+0x68>
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8004c9e:	1d72      	adds	r2, r6, #5
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 fdb8 	bl	8005818 <_calloc_r>
 8004ca8:	b160      	cbz	r0, 8004cc4 <_Balloc+0x64>
 8004caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cae:	e00e      	b.n	8004cce <_Balloc+0x6e>
 8004cb0:	2221      	movs	r2, #33	@ 0x21
 8004cb2:	2104      	movs	r1, #4
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 fdaf 	bl	8005818 <_calloc_r>
 8004cba:	69e3      	ldr	r3, [r4, #28]
 8004cbc:	60f0      	str	r0, [r6, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e4      	bne.n	8004c8e <_Balloc+0x2e>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	6802      	ldr	r2, [r0, #0]
 8004cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cd4:	e7f7      	b.n	8004cc6 <_Balloc+0x66>
 8004cd6:	bf00      	nop
 8004cd8:	08006db0 	.word	0x08006db0
 8004cdc:	08006e30 	.word	0x08006e30

08004ce0 <_Bfree>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	69c6      	ldr	r6, [r0, #28]
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	b976      	cbnz	r6, 8004d08 <_Bfree+0x28>
 8004cea:	2010      	movs	r0, #16
 8004cec:	f7ff ff02 	bl	8004af4 <malloc>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	61e8      	str	r0, [r5, #28]
 8004cf4:	b920      	cbnz	r0, 8004d00 <_Bfree+0x20>
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <_Bfree+0x3c>)
 8004cf8:	4809      	ldr	r0, [pc, #36]	@ (8004d20 <_Bfree+0x40>)
 8004cfa:	218f      	movs	r1, #143	@ 0x8f
 8004cfc:	f000 fd6e 	bl	80057dc <__assert_func>
 8004d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d04:	6006      	str	r6, [r0, #0]
 8004d06:	60c6      	str	r6, [r0, #12]
 8004d08:	b13c      	cbz	r4, 8004d1a <_Bfree+0x3a>
 8004d0a:	69eb      	ldr	r3, [r5, #28]
 8004d0c:	6862      	ldr	r2, [r4, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d14:	6021      	str	r1, [r4, #0]
 8004d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	08006db0 	.word	0x08006db0
 8004d20:	08006e30 	.word	0x08006e30

08004d24 <__multadd>:
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	690d      	ldr	r5, [r1, #16]
 8004d2a:	4607      	mov	r7, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	461e      	mov	r6, r3
 8004d30:	f101 0c14 	add.w	ip, r1, #20
 8004d34:	2000      	movs	r0, #0
 8004d36:	f8dc 3000 	ldr.w	r3, [ip]
 8004d3a:	b299      	uxth	r1, r3
 8004d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8004d40:	0c1e      	lsrs	r6, r3, #16
 8004d42:	0c0b      	lsrs	r3, r1, #16
 8004d44:	fb02 3306 	mla	r3, r2, r6, r3
 8004d48:	b289      	uxth	r1, r1
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d50:	4285      	cmp	r5, r0
 8004d52:	f84c 1b04 	str.w	r1, [ip], #4
 8004d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d5a:	dcec      	bgt.n	8004d36 <__multadd+0x12>
 8004d5c:	b30e      	cbz	r6, 8004da2 <__multadd+0x7e>
 8004d5e:	68a3      	ldr	r3, [r4, #8]
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc19      	bgt.n	8004d98 <__multadd+0x74>
 8004d64:	6861      	ldr	r1, [r4, #4]
 8004d66:	4638      	mov	r0, r7
 8004d68:	3101      	adds	r1, #1
 8004d6a:	f7ff ff79 	bl	8004c60 <_Balloc>
 8004d6e:	4680      	mov	r8, r0
 8004d70:	b928      	cbnz	r0, 8004d7e <__multadd+0x5a>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <__multadd+0x84>)
 8004d76:	480d      	ldr	r0, [pc, #52]	@ (8004dac <__multadd+0x88>)
 8004d78:	21ba      	movs	r1, #186	@ 0xba
 8004d7a:	f000 fd2f 	bl	80057dc <__assert_func>
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	3202      	adds	r2, #2
 8004d82:	f104 010c 	add.w	r1, r4, #12
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	300c      	adds	r0, #12
 8004d8a:	f000 fd19 	bl	80057c0 <memcpy>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7ff ffa5 	bl	8004ce0 <_Bfree>
 8004d96:	4644      	mov	r4, r8
 8004d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	615e      	str	r6, [r3, #20]
 8004da0:	6125      	str	r5, [r4, #16]
 8004da2:	4620      	mov	r0, r4
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da8:	08006e1f 	.word	0x08006e1f
 8004dac:	08006e30 	.word	0x08006e30

08004db0 <__hi0bits>:
 8004db0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004db4:	4603      	mov	r3, r0
 8004db6:	bf36      	itet	cc
 8004db8:	0403      	lslcc	r3, r0, #16
 8004dba:	2000      	movcs	r0, #0
 8004dbc:	2010      	movcc	r0, #16
 8004dbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dc2:	bf3c      	itt	cc
 8004dc4:	021b      	lslcc	r3, r3, #8
 8004dc6:	3008      	addcc	r0, #8
 8004dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dcc:	bf3c      	itt	cc
 8004dce:	011b      	lslcc	r3, r3, #4
 8004dd0:	3004      	addcc	r0, #4
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd6:	bf3c      	itt	cc
 8004dd8:	009b      	lslcc	r3, r3, #2
 8004dda:	3002      	addcc	r0, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	db05      	blt.n	8004dec <__hi0bits+0x3c>
 8004de0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004de4:	f100 0001 	add.w	r0, r0, #1
 8004de8:	bf08      	it	eq
 8004dea:	2020      	moveq	r0, #32
 8004dec:	4770      	bx	lr

08004dee <__lo0bits>:
 8004dee:	6803      	ldr	r3, [r0, #0]
 8004df0:	4602      	mov	r2, r0
 8004df2:	f013 0007 	ands.w	r0, r3, #7
 8004df6:	d00b      	beq.n	8004e10 <__lo0bits+0x22>
 8004df8:	07d9      	lsls	r1, r3, #31
 8004dfa:	d421      	bmi.n	8004e40 <__lo0bits+0x52>
 8004dfc:	0798      	lsls	r0, r3, #30
 8004dfe:	bf49      	itett	mi
 8004e00:	085b      	lsrmi	r3, r3, #1
 8004e02:	089b      	lsrpl	r3, r3, #2
 8004e04:	2001      	movmi	r0, #1
 8004e06:	6013      	strmi	r3, [r2, #0]
 8004e08:	bf5c      	itt	pl
 8004e0a:	6013      	strpl	r3, [r2, #0]
 8004e0c:	2002      	movpl	r0, #2
 8004e0e:	4770      	bx	lr
 8004e10:	b299      	uxth	r1, r3
 8004e12:	b909      	cbnz	r1, 8004e18 <__lo0bits+0x2a>
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	2010      	movs	r0, #16
 8004e18:	b2d9      	uxtb	r1, r3
 8004e1a:	b909      	cbnz	r1, 8004e20 <__lo0bits+0x32>
 8004e1c:	3008      	adds	r0, #8
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	0719      	lsls	r1, r3, #28
 8004e22:	bf04      	itt	eq
 8004e24:	091b      	lsreq	r3, r3, #4
 8004e26:	3004      	addeq	r0, #4
 8004e28:	0799      	lsls	r1, r3, #30
 8004e2a:	bf04      	itt	eq
 8004e2c:	089b      	lsreq	r3, r3, #2
 8004e2e:	3002      	addeq	r0, #2
 8004e30:	07d9      	lsls	r1, r3, #31
 8004e32:	d403      	bmi.n	8004e3c <__lo0bits+0x4e>
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	f100 0001 	add.w	r0, r0, #1
 8004e3a:	d003      	beq.n	8004e44 <__lo0bits+0x56>
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4770      	bx	lr
 8004e40:	2000      	movs	r0, #0
 8004e42:	4770      	bx	lr
 8004e44:	2020      	movs	r0, #32
 8004e46:	4770      	bx	lr

08004e48 <__i2b>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	f7ff ff07 	bl	8004c60 <_Balloc>
 8004e52:	4602      	mov	r2, r0
 8004e54:	b928      	cbnz	r0, 8004e62 <__i2b+0x1a>
 8004e56:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <__i2b+0x24>)
 8004e58:	4805      	ldr	r0, [pc, #20]	@ (8004e70 <__i2b+0x28>)
 8004e5a:	f240 1145 	movw	r1, #325	@ 0x145
 8004e5e:	f000 fcbd 	bl	80057dc <__assert_func>
 8004e62:	2301      	movs	r3, #1
 8004e64:	6144      	str	r4, [r0, #20]
 8004e66:	6103      	str	r3, [r0, #16]
 8004e68:	bd10      	pop	{r4, pc}
 8004e6a:	bf00      	nop
 8004e6c:	08006e1f 	.word	0x08006e1f
 8004e70:	08006e30 	.word	0x08006e30

08004e74 <__multiply>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	4614      	mov	r4, r2
 8004e7a:	690a      	ldr	r2, [r1, #16]
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	bfa8      	it	ge
 8004e82:	4623      	movge	r3, r4
 8004e84:	460f      	mov	r7, r1
 8004e86:	bfa4      	itt	ge
 8004e88:	460c      	movge	r4, r1
 8004e8a:	461f      	movge	r7, r3
 8004e8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004e90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004e94:	68a3      	ldr	r3, [r4, #8]
 8004e96:	6861      	ldr	r1, [r4, #4]
 8004e98:	eb0a 0609 	add.w	r6, sl, r9
 8004e9c:	42b3      	cmp	r3, r6
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	bfb8      	it	lt
 8004ea2:	3101      	addlt	r1, #1
 8004ea4:	f7ff fedc 	bl	8004c60 <_Balloc>
 8004ea8:	b930      	cbnz	r0, 8004eb8 <__multiply+0x44>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b44      	ldr	r3, [pc, #272]	@ (8004fc0 <__multiply+0x14c>)
 8004eae:	4845      	ldr	r0, [pc, #276]	@ (8004fc4 <__multiply+0x150>)
 8004eb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004eb4:	f000 fc92 	bl	80057dc <__assert_func>
 8004eb8:	f100 0514 	add.w	r5, r0, #20
 8004ebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	4543      	cmp	r3, r8
 8004ec6:	d321      	bcc.n	8004f0c <__multiply+0x98>
 8004ec8:	f107 0114 	add.w	r1, r7, #20
 8004ecc:	f104 0214 	add.w	r2, r4, #20
 8004ed0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004ed4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	1b13      	subs	r3, r2, r4
 8004edc:	3b15      	subs	r3, #21
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	f104 0715 	add.w	r7, r4, #21
 8004ee8:	42ba      	cmp	r2, r7
 8004eea:	bf38      	it	cc
 8004eec:	2304      	movcc	r3, #4
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	9103      	str	r1, [sp, #12]
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	d80c      	bhi.n	8004f12 <__multiply+0x9e>
 8004ef8:	2e00      	cmp	r6, #0
 8004efa:	dd03      	ble.n	8004f04 <__multiply+0x90>
 8004efc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d05b      	beq.n	8004fbc <__multiply+0x148>
 8004f04:	6106      	str	r6, [r0, #16]
 8004f06:	b005      	add	sp, #20
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	f843 2b04 	str.w	r2, [r3], #4
 8004f10:	e7d8      	b.n	8004ec4 <__multiply+0x50>
 8004f12:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f16:	f1ba 0f00 	cmp.w	sl, #0
 8004f1a:	d024      	beq.n	8004f66 <__multiply+0xf2>
 8004f1c:	f104 0e14 	add.w	lr, r4, #20
 8004f20:	46a9      	mov	r9, r5
 8004f22:	f04f 0c00 	mov.w	ip, #0
 8004f26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f2a:	f8d9 3000 	ldr.w	r3, [r9]
 8004f2e:	fa1f fb87 	uxth.w	fp, r7
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	fb0a 330b 	mla	r3, sl, fp, r3
 8004f38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004f3c:	f8d9 7000 	ldr.w	r7, [r9]
 8004f40:	4463      	add	r3, ip
 8004f42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f46:	fb0a c70b 	mla	r7, sl, fp, ip
 8004f4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f54:	4572      	cmp	r2, lr
 8004f56:	f849 3b04 	str.w	r3, [r9], #4
 8004f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f5e:	d8e2      	bhi.n	8004f26 <__multiply+0xb2>
 8004f60:	9b01      	ldr	r3, [sp, #4]
 8004f62:	f845 c003 	str.w	ip, [r5, r3]
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004f6c:	3104      	adds	r1, #4
 8004f6e:	f1b9 0f00 	cmp.w	r9, #0
 8004f72:	d021      	beq.n	8004fb8 <__multiply+0x144>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	f104 0c14 	add.w	ip, r4, #20
 8004f7a:	46ae      	mov	lr, r5
 8004f7c:	f04f 0a00 	mov.w	sl, #0
 8004f80:	f8bc b000 	ldrh.w	fp, [ip]
 8004f84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004f88:	fb09 770b 	mla	r7, r9, fp, r7
 8004f8c:	4457      	add	r7, sl
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f94:	f84e 3b04 	str.w	r3, [lr], #4
 8004f98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fa0:	f8be 3000 	ldrh.w	r3, [lr]
 8004fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8004fa8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004fac:	4562      	cmp	r2, ip
 8004fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fb2:	d8e5      	bhi.n	8004f80 <__multiply+0x10c>
 8004fb4:	9f01      	ldr	r7, [sp, #4]
 8004fb6:	51eb      	str	r3, [r5, r7]
 8004fb8:	3504      	adds	r5, #4
 8004fba:	e799      	b.n	8004ef0 <__multiply+0x7c>
 8004fbc:	3e01      	subs	r6, #1
 8004fbe:	e79b      	b.n	8004ef8 <__multiply+0x84>
 8004fc0:	08006e1f 	.word	0x08006e1f
 8004fc4:	08006e30 	.word	0x08006e30

08004fc8 <__pow5mult>:
 8004fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fcc:	4615      	mov	r5, r2
 8004fce:	f012 0203 	ands.w	r2, r2, #3
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	460e      	mov	r6, r1
 8004fd6:	d007      	beq.n	8004fe8 <__pow5mult+0x20>
 8004fd8:	4c25      	ldr	r4, [pc, #148]	@ (8005070 <__pow5mult+0xa8>)
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fe2:	f7ff fe9f 	bl	8004d24 <__multadd>
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	10ad      	asrs	r5, r5, #2
 8004fea:	d03d      	beq.n	8005068 <__pow5mult+0xa0>
 8004fec:	69fc      	ldr	r4, [r7, #28]
 8004fee:	b97c      	cbnz	r4, 8005010 <__pow5mult+0x48>
 8004ff0:	2010      	movs	r0, #16
 8004ff2:	f7ff fd7f 	bl	8004af4 <malloc>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	61f8      	str	r0, [r7, #28]
 8004ffa:	b928      	cbnz	r0, 8005008 <__pow5mult+0x40>
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8005074 <__pow5mult+0xac>)
 8004ffe:	481e      	ldr	r0, [pc, #120]	@ (8005078 <__pow5mult+0xb0>)
 8005000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005004:	f000 fbea 	bl	80057dc <__assert_func>
 8005008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800500c:	6004      	str	r4, [r0, #0]
 800500e:	60c4      	str	r4, [r0, #12]
 8005010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005018:	b94c      	cbnz	r4, 800502e <__pow5mult+0x66>
 800501a:	f240 2171 	movw	r1, #625	@ 0x271
 800501e:	4638      	mov	r0, r7
 8005020:	f7ff ff12 	bl	8004e48 <__i2b>
 8005024:	2300      	movs	r3, #0
 8005026:	f8c8 0008 	str.w	r0, [r8, #8]
 800502a:	4604      	mov	r4, r0
 800502c:	6003      	str	r3, [r0, #0]
 800502e:	f04f 0900 	mov.w	r9, #0
 8005032:	07eb      	lsls	r3, r5, #31
 8005034:	d50a      	bpl.n	800504c <__pow5mult+0x84>
 8005036:	4631      	mov	r1, r6
 8005038:	4622      	mov	r2, r4
 800503a:	4638      	mov	r0, r7
 800503c:	f7ff ff1a 	bl	8004e74 <__multiply>
 8005040:	4631      	mov	r1, r6
 8005042:	4680      	mov	r8, r0
 8005044:	4638      	mov	r0, r7
 8005046:	f7ff fe4b 	bl	8004ce0 <_Bfree>
 800504a:	4646      	mov	r6, r8
 800504c:	106d      	asrs	r5, r5, #1
 800504e:	d00b      	beq.n	8005068 <__pow5mult+0xa0>
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	b938      	cbnz	r0, 8005064 <__pow5mult+0x9c>
 8005054:	4622      	mov	r2, r4
 8005056:	4621      	mov	r1, r4
 8005058:	4638      	mov	r0, r7
 800505a:	f7ff ff0b 	bl	8004e74 <__multiply>
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	f8c0 9000 	str.w	r9, [r0]
 8005064:	4604      	mov	r4, r0
 8005066:	e7e4      	b.n	8005032 <__pow5mult+0x6a>
 8005068:	4630      	mov	r0, r6
 800506a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506e:	bf00      	nop
 8005070:	08006e8c 	.word	0x08006e8c
 8005074:	08006db0 	.word	0x08006db0
 8005078:	08006e30 	.word	0x08006e30

0800507c <__lshift>:
 800507c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005080:	460c      	mov	r4, r1
 8005082:	6849      	ldr	r1, [r1, #4]
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	4607      	mov	r7, r0
 800508e:	4691      	mov	r9, r2
 8005090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005094:	f108 0601 	add.w	r6, r8, #1
 8005098:	42b3      	cmp	r3, r6
 800509a:	db0b      	blt.n	80050b4 <__lshift+0x38>
 800509c:	4638      	mov	r0, r7
 800509e:	f7ff fddf 	bl	8004c60 <_Balloc>
 80050a2:	4605      	mov	r5, r0
 80050a4:	b948      	cbnz	r0, 80050ba <__lshift+0x3e>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <__lshift+0xd0>)
 80050aa:	4829      	ldr	r0, [pc, #164]	@ (8005150 <__lshift+0xd4>)
 80050ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80050b0:	f000 fb94 	bl	80057dc <__assert_func>
 80050b4:	3101      	adds	r1, #1
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	e7ee      	b.n	8005098 <__lshift+0x1c>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f100 0114 	add.w	r1, r0, #20
 80050c0:	f100 0210 	add.w	r2, r0, #16
 80050c4:	4618      	mov	r0, r3
 80050c6:	4553      	cmp	r3, sl
 80050c8:	db33      	blt.n	8005132 <__lshift+0xb6>
 80050ca:	6920      	ldr	r0, [r4, #16]
 80050cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050d0:	f104 0314 	add.w	r3, r4, #20
 80050d4:	f019 091f 	ands.w	r9, r9, #31
 80050d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80050e0:	d02b      	beq.n	800513a <__lshift+0xbe>
 80050e2:	f1c9 0e20 	rsb	lr, r9, #32
 80050e6:	468a      	mov	sl, r1
 80050e8:	2200      	movs	r2, #0
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	fa00 f009 	lsl.w	r0, r0, r9
 80050f0:	4310      	orrs	r0, r2
 80050f2:	f84a 0b04 	str.w	r0, [sl], #4
 80050f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fa:	459c      	cmp	ip, r3
 80050fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005100:	d8f3      	bhi.n	80050ea <__lshift+0x6e>
 8005102:	ebac 0304 	sub.w	r3, ip, r4
 8005106:	3b15      	subs	r3, #21
 8005108:	f023 0303 	bic.w	r3, r3, #3
 800510c:	3304      	adds	r3, #4
 800510e:	f104 0015 	add.w	r0, r4, #21
 8005112:	4584      	cmp	ip, r0
 8005114:	bf38      	it	cc
 8005116:	2304      	movcc	r3, #4
 8005118:	50ca      	str	r2, [r1, r3]
 800511a:	b10a      	cbz	r2, 8005120 <__lshift+0xa4>
 800511c:	f108 0602 	add.w	r6, r8, #2
 8005120:	3e01      	subs	r6, #1
 8005122:	4638      	mov	r0, r7
 8005124:	612e      	str	r6, [r5, #16]
 8005126:	4621      	mov	r1, r4
 8005128:	f7ff fdda 	bl	8004ce0 <_Bfree>
 800512c:	4628      	mov	r0, r5
 800512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005132:	f842 0f04 	str.w	r0, [r2, #4]!
 8005136:	3301      	adds	r3, #1
 8005138:	e7c5      	b.n	80050c6 <__lshift+0x4a>
 800513a:	3904      	subs	r1, #4
 800513c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005140:	f841 2f04 	str.w	r2, [r1, #4]!
 8005144:	459c      	cmp	ip, r3
 8005146:	d8f9      	bhi.n	800513c <__lshift+0xc0>
 8005148:	e7ea      	b.n	8005120 <__lshift+0xa4>
 800514a:	bf00      	nop
 800514c:	08006e1f 	.word	0x08006e1f
 8005150:	08006e30 	.word	0x08006e30

08005154 <__mcmp>:
 8005154:	690a      	ldr	r2, [r1, #16]
 8005156:	4603      	mov	r3, r0
 8005158:	6900      	ldr	r0, [r0, #16]
 800515a:	1a80      	subs	r0, r0, r2
 800515c:	b530      	push	{r4, r5, lr}
 800515e:	d10e      	bne.n	800517e <__mcmp+0x2a>
 8005160:	3314      	adds	r3, #20
 8005162:	3114      	adds	r1, #20
 8005164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800516c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005174:	4295      	cmp	r5, r2
 8005176:	d003      	beq.n	8005180 <__mcmp+0x2c>
 8005178:	d205      	bcs.n	8005186 <__mcmp+0x32>
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	42a3      	cmp	r3, r4
 8005182:	d3f3      	bcc.n	800516c <__mcmp+0x18>
 8005184:	e7fb      	b.n	800517e <__mcmp+0x2a>
 8005186:	2001      	movs	r0, #1
 8005188:	e7f9      	b.n	800517e <__mcmp+0x2a>
	...

0800518c <__mdiff>:
 800518c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4689      	mov	r9, r1
 8005192:	4606      	mov	r6, r0
 8005194:	4611      	mov	r1, r2
 8005196:	4648      	mov	r0, r9
 8005198:	4614      	mov	r4, r2
 800519a:	f7ff ffdb 	bl	8005154 <__mcmp>
 800519e:	1e05      	subs	r5, r0, #0
 80051a0:	d112      	bne.n	80051c8 <__mdiff+0x3c>
 80051a2:	4629      	mov	r1, r5
 80051a4:	4630      	mov	r0, r6
 80051a6:	f7ff fd5b 	bl	8004c60 <_Balloc>
 80051aa:	4602      	mov	r2, r0
 80051ac:	b928      	cbnz	r0, 80051ba <__mdiff+0x2e>
 80051ae:	4b3f      	ldr	r3, [pc, #252]	@ (80052ac <__mdiff+0x120>)
 80051b0:	f240 2137 	movw	r1, #567	@ 0x237
 80051b4:	483e      	ldr	r0, [pc, #248]	@ (80052b0 <__mdiff+0x124>)
 80051b6:	f000 fb11 	bl	80057dc <__assert_func>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051c0:	4610      	mov	r0, r2
 80051c2:	b003      	add	sp, #12
 80051c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c8:	bfbc      	itt	lt
 80051ca:	464b      	movlt	r3, r9
 80051cc:	46a1      	movlt	r9, r4
 80051ce:	4630      	mov	r0, r6
 80051d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80051d4:	bfba      	itte	lt
 80051d6:	461c      	movlt	r4, r3
 80051d8:	2501      	movlt	r5, #1
 80051da:	2500      	movge	r5, #0
 80051dc:	f7ff fd40 	bl	8004c60 <_Balloc>
 80051e0:	4602      	mov	r2, r0
 80051e2:	b918      	cbnz	r0, 80051ec <__mdiff+0x60>
 80051e4:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <__mdiff+0x120>)
 80051e6:	f240 2145 	movw	r1, #581	@ 0x245
 80051ea:	e7e3      	b.n	80051b4 <__mdiff+0x28>
 80051ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80051f0:	6926      	ldr	r6, [r4, #16]
 80051f2:	60c5      	str	r5, [r0, #12]
 80051f4:	f109 0310 	add.w	r3, r9, #16
 80051f8:	f109 0514 	add.w	r5, r9, #20
 80051fc:	f104 0e14 	add.w	lr, r4, #20
 8005200:	f100 0b14 	add.w	fp, r0, #20
 8005204:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005208:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	46d9      	mov	r9, fp
 8005210:	f04f 0c00 	mov.w	ip, #0
 8005214:	9b01      	ldr	r3, [sp, #4]
 8005216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800521a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	fa1f f38a 	uxth.w	r3, sl
 8005224:	4619      	mov	r1, r3
 8005226:	b283      	uxth	r3, r0
 8005228:	1acb      	subs	r3, r1, r3
 800522a:	0c00      	lsrs	r0, r0, #16
 800522c:	4463      	add	r3, ip
 800522e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005232:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005236:	b29b      	uxth	r3, r3
 8005238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800523c:	4576      	cmp	r6, lr
 800523e:	f849 3b04 	str.w	r3, [r9], #4
 8005242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005246:	d8e5      	bhi.n	8005214 <__mdiff+0x88>
 8005248:	1b33      	subs	r3, r6, r4
 800524a:	3b15      	subs	r3, #21
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	3415      	adds	r4, #21
 8005252:	3304      	adds	r3, #4
 8005254:	42a6      	cmp	r6, r4
 8005256:	bf38      	it	cc
 8005258:	2304      	movcc	r3, #4
 800525a:	441d      	add	r5, r3
 800525c:	445b      	add	r3, fp
 800525e:	461e      	mov	r6, r3
 8005260:	462c      	mov	r4, r5
 8005262:	4544      	cmp	r4, r8
 8005264:	d30e      	bcc.n	8005284 <__mdiff+0xf8>
 8005266:	f108 0103 	add.w	r1, r8, #3
 800526a:	1b49      	subs	r1, r1, r5
 800526c:	f021 0103 	bic.w	r1, r1, #3
 8005270:	3d03      	subs	r5, #3
 8005272:	45a8      	cmp	r8, r5
 8005274:	bf38      	it	cc
 8005276:	2100      	movcc	r1, #0
 8005278:	440b      	add	r3, r1
 800527a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800527e:	b191      	cbz	r1, 80052a6 <__mdiff+0x11a>
 8005280:	6117      	str	r7, [r2, #16]
 8005282:	e79d      	b.n	80051c0 <__mdiff+0x34>
 8005284:	f854 1b04 	ldr.w	r1, [r4], #4
 8005288:	46e6      	mov	lr, ip
 800528a:	0c08      	lsrs	r0, r1, #16
 800528c:	fa1c fc81 	uxtah	ip, ip, r1
 8005290:	4471      	add	r1, lr
 8005292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005296:	b289      	uxth	r1, r1
 8005298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800529c:	f846 1b04 	str.w	r1, [r6], #4
 80052a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052a4:	e7dd      	b.n	8005262 <__mdiff+0xd6>
 80052a6:	3f01      	subs	r7, #1
 80052a8:	e7e7      	b.n	800527a <__mdiff+0xee>
 80052aa:	bf00      	nop
 80052ac:	08006e1f 	.word	0x08006e1f
 80052b0:	08006e30 	.word	0x08006e30

080052b4 <__d2b>:
 80052b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052b8:	460f      	mov	r7, r1
 80052ba:	2101      	movs	r1, #1
 80052bc:	ec59 8b10 	vmov	r8, r9, d0
 80052c0:	4616      	mov	r6, r2
 80052c2:	f7ff fccd 	bl	8004c60 <_Balloc>
 80052c6:	4604      	mov	r4, r0
 80052c8:	b930      	cbnz	r0, 80052d8 <__d2b+0x24>
 80052ca:	4602      	mov	r2, r0
 80052cc:	4b23      	ldr	r3, [pc, #140]	@ (800535c <__d2b+0xa8>)
 80052ce:	4824      	ldr	r0, [pc, #144]	@ (8005360 <__d2b+0xac>)
 80052d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80052d4:	f000 fa82 	bl	80057dc <__assert_func>
 80052d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80052dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052e0:	b10d      	cbz	r5, 80052e6 <__d2b+0x32>
 80052e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	f1b8 0300 	subs.w	r3, r8, #0
 80052ec:	d023      	beq.n	8005336 <__d2b+0x82>
 80052ee:	4668      	mov	r0, sp
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f7ff fd7c 	bl	8004dee <__lo0bits>
 80052f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80052fa:	b1d0      	cbz	r0, 8005332 <__d2b+0x7e>
 80052fc:	f1c0 0320 	rsb	r3, r0, #32
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	430b      	orrs	r3, r1
 8005306:	40c2      	lsrs	r2, r0
 8005308:	6163      	str	r3, [r4, #20]
 800530a:	9201      	str	r2, [sp, #4]
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	61a3      	str	r3, [r4, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2201      	moveq	r2, #1
 8005316:	2202      	movne	r2, #2
 8005318:	6122      	str	r2, [r4, #16]
 800531a:	b1a5      	cbz	r5, 8005346 <__d2b+0x92>
 800531c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005320:	4405      	add	r5, r0
 8005322:	603d      	str	r5, [r7, #0]
 8005324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005328:	6030      	str	r0, [r6, #0]
 800532a:	4620      	mov	r0, r4
 800532c:	b003      	add	sp, #12
 800532e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005332:	6161      	str	r1, [r4, #20]
 8005334:	e7ea      	b.n	800530c <__d2b+0x58>
 8005336:	a801      	add	r0, sp, #4
 8005338:	f7ff fd59 	bl	8004dee <__lo0bits>
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	6163      	str	r3, [r4, #20]
 8005340:	3020      	adds	r0, #32
 8005342:	2201      	movs	r2, #1
 8005344:	e7e8      	b.n	8005318 <__d2b+0x64>
 8005346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800534a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800534e:	6038      	str	r0, [r7, #0]
 8005350:	6918      	ldr	r0, [r3, #16]
 8005352:	f7ff fd2d 	bl	8004db0 <__hi0bits>
 8005356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800535a:	e7e5      	b.n	8005328 <__d2b+0x74>
 800535c:	08006e1f 	.word	0x08006e1f
 8005360:	08006e30 	.word	0x08006e30

08005364 <__ssputs_r>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	688e      	ldr	r6, [r1, #8]
 800536a:	461f      	mov	r7, r3
 800536c:	42be      	cmp	r6, r7
 800536e:	680b      	ldr	r3, [r1, #0]
 8005370:	4682      	mov	sl, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4690      	mov	r8, r2
 8005376:	d82d      	bhi.n	80053d4 <__ssputs_r+0x70>
 8005378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800537c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005380:	d026      	beq.n	80053d0 <__ssputs_r+0x6c>
 8005382:	6965      	ldr	r5, [r4, #20]
 8005384:	6909      	ldr	r1, [r1, #16]
 8005386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800538a:	eba3 0901 	sub.w	r9, r3, r1
 800538e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005392:	1c7b      	adds	r3, r7, #1
 8005394:	444b      	add	r3, r9
 8005396:	106d      	asrs	r5, r5, #1
 8005398:	429d      	cmp	r5, r3
 800539a:	bf38      	it	cc
 800539c:	461d      	movcc	r5, r3
 800539e:	0553      	lsls	r3, r2, #21
 80053a0:	d527      	bpl.n	80053f2 <__ssputs_r+0x8e>
 80053a2:	4629      	mov	r1, r5
 80053a4:	f7ff fbd0 	bl	8004b48 <_malloc_r>
 80053a8:	4606      	mov	r6, r0
 80053aa:	b360      	cbz	r0, 8005406 <__ssputs_r+0xa2>
 80053ac:	6921      	ldr	r1, [r4, #16]
 80053ae:	464a      	mov	r2, r9
 80053b0:	f000 fa06 	bl	80057c0 <memcpy>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	6126      	str	r6, [r4, #16]
 80053c2:	6165      	str	r5, [r4, #20]
 80053c4:	444e      	add	r6, r9
 80053c6:	eba5 0509 	sub.w	r5, r5, r9
 80053ca:	6026      	str	r6, [r4, #0]
 80053cc:	60a5      	str	r5, [r4, #8]
 80053ce:	463e      	mov	r6, r7
 80053d0:	42be      	cmp	r6, r7
 80053d2:	d900      	bls.n	80053d6 <__ssputs_r+0x72>
 80053d4:	463e      	mov	r6, r7
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	4632      	mov	r2, r6
 80053da:	4641      	mov	r1, r8
 80053dc:	f000 f9c6 	bl	800576c <memmove>
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	1b9b      	subs	r3, r3, r6
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	4433      	add	r3, r6
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	2000      	movs	r0, #0
 80053ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f2:	462a      	mov	r2, r5
 80053f4:	f000 fa36 	bl	8005864 <_realloc_r>
 80053f8:	4606      	mov	r6, r0
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d1e0      	bne.n	80053c0 <__ssputs_r+0x5c>
 80053fe:	6921      	ldr	r1, [r4, #16]
 8005400:	4650      	mov	r0, sl
 8005402:	f7ff fb2d 	bl	8004a60 <_free_r>
 8005406:	230c      	movs	r3, #12
 8005408:	f8ca 3000 	str.w	r3, [sl]
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e7e9      	b.n	80053ee <__ssputs_r+0x8a>
	...

0800541c <_svfiprintf_r>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	4698      	mov	r8, r3
 8005422:	898b      	ldrh	r3, [r1, #12]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	b09d      	sub	sp, #116	@ 0x74
 8005428:	4607      	mov	r7, r0
 800542a:	460d      	mov	r5, r1
 800542c:	4614      	mov	r4, r2
 800542e:	d510      	bpl.n	8005452 <_svfiprintf_r+0x36>
 8005430:	690b      	ldr	r3, [r1, #16]
 8005432:	b973      	cbnz	r3, 8005452 <_svfiprintf_r+0x36>
 8005434:	2140      	movs	r1, #64	@ 0x40
 8005436:	f7ff fb87 	bl	8004b48 <_malloc_r>
 800543a:	6028      	str	r0, [r5, #0]
 800543c:	6128      	str	r0, [r5, #16]
 800543e:	b930      	cbnz	r0, 800544e <_svfiprintf_r+0x32>
 8005440:	230c      	movs	r3, #12
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	b01d      	add	sp, #116	@ 0x74
 800544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544e:	2340      	movs	r3, #64	@ 0x40
 8005450:	616b      	str	r3, [r5, #20]
 8005452:	2300      	movs	r3, #0
 8005454:	9309      	str	r3, [sp, #36]	@ 0x24
 8005456:	2320      	movs	r3, #32
 8005458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800545c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005460:	2330      	movs	r3, #48	@ 0x30
 8005462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005600 <_svfiprintf_r+0x1e4>
 8005466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800546a:	f04f 0901 	mov.w	r9, #1
 800546e:	4623      	mov	r3, r4
 8005470:	469a      	mov	sl, r3
 8005472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005476:	b10a      	cbz	r2, 800547c <_svfiprintf_r+0x60>
 8005478:	2a25      	cmp	r2, #37	@ 0x25
 800547a:	d1f9      	bne.n	8005470 <_svfiprintf_r+0x54>
 800547c:	ebba 0b04 	subs.w	fp, sl, r4
 8005480:	d00b      	beq.n	800549a <_svfiprintf_r+0x7e>
 8005482:	465b      	mov	r3, fp
 8005484:	4622      	mov	r2, r4
 8005486:	4629      	mov	r1, r5
 8005488:	4638      	mov	r0, r7
 800548a:	f7ff ff6b 	bl	8005364 <__ssputs_r>
 800548e:	3001      	adds	r0, #1
 8005490:	f000 80a7 	beq.w	80055e2 <_svfiprintf_r+0x1c6>
 8005494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005496:	445a      	add	r2, fp
 8005498:	9209      	str	r2, [sp, #36]	@ 0x24
 800549a:	f89a 3000 	ldrb.w	r3, [sl]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 809f 	beq.w	80055e2 <_svfiprintf_r+0x1c6>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f04f 32ff 	mov.w	r2, #4294967295
 80054aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ae:	f10a 0a01 	add.w	sl, sl, #1
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80054bc:	4654      	mov	r4, sl
 80054be:	2205      	movs	r2, #5
 80054c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c4:	484e      	ldr	r0, [pc, #312]	@ (8005600 <_svfiprintf_r+0x1e4>)
 80054c6:	f7fa fe83 	bl	80001d0 <memchr>
 80054ca:	9a04      	ldr	r2, [sp, #16]
 80054cc:	b9d8      	cbnz	r0, 8005506 <_svfiprintf_r+0xea>
 80054ce:	06d0      	lsls	r0, r2, #27
 80054d0:	bf44      	itt	mi
 80054d2:	2320      	movmi	r3, #32
 80054d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054d8:	0711      	lsls	r1, r2, #28
 80054da:	bf44      	itt	mi
 80054dc:	232b      	movmi	r3, #43	@ 0x2b
 80054de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054e2:	f89a 3000 	ldrb.w	r3, [sl]
 80054e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054e8:	d015      	beq.n	8005516 <_svfiprintf_r+0xfa>
 80054ea:	9a07      	ldr	r2, [sp, #28]
 80054ec:	4654      	mov	r4, sl
 80054ee:	2000      	movs	r0, #0
 80054f0:	f04f 0c0a 	mov.w	ip, #10
 80054f4:	4621      	mov	r1, r4
 80054f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054fa:	3b30      	subs	r3, #48	@ 0x30
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	d94b      	bls.n	8005598 <_svfiprintf_r+0x17c>
 8005500:	b1b0      	cbz	r0, 8005530 <_svfiprintf_r+0x114>
 8005502:	9207      	str	r2, [sp, #28]
 8005504:	e014      	b.n	8005530 <_svfiprintf_r+0x114>
 8005506:	eba0 0308 	sub.w	r3, r0, r8
 800550a:	fa09 f303 	lsl.w	r3, r9, r3
 800550e:	4313      	orrs	r3, r2
 8005510:	9304      	str	r3, [sp, #16]
 8005512:	46a2      	mov	sl, r4
 8005514:	e7d2      	b.n	80054bc <_svfiprintf_r+0xa0>
 8005516:	9b03      	ldr	r3, [sp, #12]
 8005518:	1d19      	adds	r1, r3, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	9103      	str	r1, [sp, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	bfbb      	ittet	lt
 8005522:	425b      	neglt	r3, r3
 8005524:	f042 0202 	orrlt.w	r2, r2, #2
 8005528:	9307      	strge	r3, [sp, #28]
 800552a:	9307      	strlt	r3, [sp, #28]
 800552c:	bfb8      	it	lt
 800552e:	9204      	strlt	r2, [sp, #16]
 8005530:	7823      	ldrb	r3, [r4, #0]
 8005532:	2b2e      	cmp	r3, #46	@ 0x2e
 8005534:	d10a      	bne.n	800554c <_svfiprintf_r+0x130>
 8005536:	7863      	ldrb	r3, [r4, #1]
 8005538:	2b2a      	cmp	r3, #42	@ 0x2a
 800553a:	d132      	bne.n	80055a2 <_svfiprintf_r+0x186>
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	9203      	str	r2, [sp, #12]
 8005544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005548:	3402      	adds	r4, #2
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005610 <_svfiprintf_r+0x1f4>
 8005550:	7821      	ldrb	r1, [r4, #0]
 8005552:	2203      	movs	r2, #3
 8005554:	4650      	mov	r0, sl
 8005556:	f7fa fe3b 	bl	80001d0 <memchr>
 800555a:	b138      	cbz	r0, 800556c <_svfiprintf_r+0x150>
 800555c:	9b04      	ldr	r3, [sp, #16]
 800555e:	eba0 000a 	sub.w	r0, r0, sl
 8005562:	2240      	movs	r2, #64	@ 0x40
 8005564:	4082      	lsls	r2, r0
 8005566:	4313      	orrs	r3, r2
 8005568:	3401      	adds	r4, #1
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005570:	4824      	ldr	r0, [pc, #144]	@ (8005604 <_svfiprintf_r+0x1e8>)
 8005572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005576:	2206      	movs	r2, #6
 8005578:	f7fa fe2a 	bl	80001d0 <memchr>
 800557c:	2800      	cmp	r0, #0
 800557e:	d036      	beq.n	80055ee <_svfiprintf_r+0x1d2>
 8005580:	4b21      	ldr	r3, [pc, #132]	@ (8005608 <_svfiprintf_r+0x1ec>)
 8005582:	bb1b      	cbnz	r3, 80055cc <_svfiprintf_r+0x1b0>
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	3307      	adds	r3, #7
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	3308      	adds	r3, #8
 800558e:	9303      	str	r3, [sp, #12]
 8005590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005592:	4433      	add	r3, r6
 8005594:	9309      	str	r3, [sp, #36]	@ 0x24
 8005596:	e76a      	b.n	800546e <_svfiprintf_r+0x52>
 8005598:	fb0c 3202 	mla	r2, ip, r2, r3
 800559c:	460c      	mov	r4, r1
 800559e:	2001      	movs	r0, #1
 80055a0:	e7a8      	b.n	80054f4 <_svfiprintf_r+0xd8>
 80055a2:	2300      	movs	r3, #0
 80055a4:	3401      	adds	r4, #1
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	4619      	mov	r1, r3
 80055aa:	f04f 0c0a 	mov.w	ip, #10
 80055ae:	4620      	mov	r0, r4
 80055b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055b4:	3a30      	subs	r2, #48	@ 0x30
 80055b6:	2a09      	cmp	r2, #9
 80055b8:	d903      	bls.n	80055c2 <_svfiprintf_r+0x1a6>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0c6      	beq.n	800554c <_svfiprintf_r+0x130>
 80055be:	9105      	str	r1, [sp, #20]
 80055c0:	e7c4      	b.n	800554c <_svfiprintf_r+0x130>
 80055c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c6:	4604      	mov	r4, r0
 80055c8:	2301      	movs	r3, #1
 80055ca:	e7f0      	b.n	80055ae <_svfiprintf_r+0x192>
 80055cc:	ab03      	add	r3, sp, #12
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	462a      	mov	r2, r5
 80055d2:	4b0e      	ldr	r3, [pc, #56]	@ (800560c <_svfiprintf_r+0x1f0>)
 80055d4:	a904      	add	r1, sp, #16
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7fd fe96 	bl	8003308 <_printf_float>
 80055dc:	1c42      	adds	r2, r0, #1
 80055de:	4606      	mov	r6, r0
 80055e0:	d1d6      	bne.n	8005590 <_svfiprintf_r+0x174>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	065b      	lsls	r3, r3, #25
 80055e6:	f53f af2d 	bmi.w	8005444 <_svfiprintf_r+0x28>
 80055ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055ec:	e72c      	b.n	8005448 <_svfiprintf_r+0x2c>
 80055ee:	ab03      	add	r3, sp, #12
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	462a      	mov	r2, r5
 80055f4:	4b05      	ldr	r3, [pc, #20]	@ (800560c <_svfiprintf_r+0x1f0>)
 80055f6:	a904      	add	r1, sp, #16
 80055f8:	4638      	mov	r0, r7
 80055fa:	f7fe f91d 	bl	8003838 <_printf_i>
 80055fe:	e7ed      	b.n	80055dc <_svfiprintf_r+0x1c0>
 8005600:	08006f88 	.word	0x08006f88
 8005604:	08006f92 	.word	0x08006f92
 8005608:	08003309 	.word	0x08003309
 800560c:	08005365 	.word	0x08005365
 8005610:	08006f8e 	.word	0x08006f8e

08005614 <__sflush_r>:
 8005614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561c:	0716      	lsls	r6, r2, #28
 800561e:	4605      	mov	r5, r0
 8005620:	460c      	mov	r4, r1
 8005622:	d454      	bmi.n	80056ce <__sflush_r+0xba>
 8005624:	684b      	ldr	r3, [r1, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	dc02      	bgt.n	8005630 <__sflush_r+0x1c>
 800562a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	dd48      	ble.n	80056c2 <__sflush_r+0xae>
 8005630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005632:	2e00      	cmp	r6, #0
 8005634:	d045      	beq.n	80056c2 <__sflush_r+0xae>
 8005636:	2300      	movs	r3, #0
 8005638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800563c:	682f      	ldr	r7, [r5, #0]
 800563e:	6a21      	ldr	r1, [r4, #32]
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	d030      	beq.n	80056a6 <__sflush_r+0x92>
 8005644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	0759      	lsls	r1, r3, #29
 800564a:	d505      	bpl.n	8005658 <__sflush_r+0x44>
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005652:	b10b      	cbz	r3, 8005658 <__sflush_r+0x44>
 8005654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	2300      	movs	r3, #0
 800565a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800565c:	6a21      	ldr	r1, [r4, #32]
 800565e:	4628      	mov	r0, r5
 8005660:	47b0      	blx	r6
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	d106      	bne.n	8005676 <__sflush_r+0x62>
 8005668:	6829      	ldr	r1, [r5, #0]
 800566a:	291d      	cmp	r1, #29
 800566c:	d82b      	bhi.n	80056c6 <__sflush_r+0xb2>
 800566e:	4a2a      	ldr	r2, [pc, #168]	@ (8005718 <__sflush_r+0x104>)
 8005670:	410a      	asrs	r2, r1
 8005672:	07d6      	lsls	r6, r2, #31
 8005674:	d427      	bmi.n	80056c6 <__sflush_r+0xb2>
 8005676:	2200      	movs	r2, #0
 8005678:	6062      	str	r2, [r4, #4]
 800567a:	04d9      	lsls	r1, r3, #19
 800567c:	6922      	ldr	r2, [r4, #16]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	d504      	bpl.n	800568c <__sflush_r+0x78>
 8005682:	1c42      	adds	r2, r0, #1
 8005684:	d101      	bne.n	800568a <__sflush_r+0x76>
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	b903      	cbnz	r3, 800568c <__sflush_r+0x78>
 800568a:	6560      	str	r0, [r4, #84]	@ 0x54
 800568c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800568e:	602f      	str	r7, [r5, #0]
 8005690:	b1b9      	cbz	r1, 80056c2 <__sflush_r+0xae>
 8005692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005696:	4299      	cmp	r1, r3
 8005698:	d002      	beq.n	80056a0 <__sflush_r+0x8c>
 800569a:	4628      	mov	r0, r5
 800569c:	f7ff f9e0 	bl	8004a60 <_free_r>
 80056a0:	2300      	movs	r3, #0
 80056a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80056a4:	e00d      	b.n	80056c2 <__sflush_r+0xae>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b0      	blx	r6
 80056ac:	4602      	mov	r2, r0
 80056ae:	1c50      	adds	r0, r2, #1
 80056b0:	d1c9      	bne.n	8005646 <__sflush_r+0x32>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0c6      	beq.n	8005646 <__sflush_r+0x32>
 80056b8:	2b1d      	cmp	r3, #29
 80056ba:	d001      	beq.n	80056c0 <__sflush_r+0xac>
 80056bc:	2b16      	cmp	r3, #22
 80056be:	d11e      	bne.n	80056fe <__sflush_r+0xea>
 80056c0:	602f      	str	r7, [r5, #0]
 80056c2:	2000      	movs	r0, #0
 80056c4:	e022      	b.n	800570c <__sflush_r+0xf8>
 80056c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	e01b      	b.n	8005706 <__sflush_r+0xf2>
 80056ce:	690f      	ldr	r7, [r1, #16]
 80056d0:	2f00      	cmp	r7, #0
 80056d2:	d0f6      	beq.n	80056c2 <__sflush_r+0xae>
 80056d4:	0793      	lsls	r3, r2, #30
 80056d6:	680e      	ldr	r6, [r1, #0]
 80056d8:	bf08      	it	eq
 80056da:	694b      	ldreq	r3, [r1, #20]
 80056dc:	600f      	str	r7, [r1, #0]
 80056de:	bf18      	it	ne
 80056e0:	2300      	movne	r3, #0
 80056e2:	eba6 0807 	sub.w	r8, r6, r7
 80056e6:	608b      	str	r3, [r1, #8]
 80056e8:	f1b8 0f00 	cmp.w	r8, #0
 80056ec:	dde9      	ble.n	80056c2 <__sflush_r+0xae>
 80056ee:	6a21      	ldr	r1, [r4, #32]
 80056f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056f2:	4643      	mov	r3, r8
 80056f4:	463a      	mov	r2, r7
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b0      	blx	r6
 80056fa:	2800      	cmp	r0, #0
 80056fc:	dc08      	bgt.n	8005710 <__sflush_r+0xfc>
 80056fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	4407      	add	r7, r0
 8005712:	eba8 0800 	sub.w	r8, r8, r0
 8005716:	e7e7      	b.n	80056e8 <__sflush_r+0xd4>
 8005718:	dfbffffe 	.word	0xdfbffffe

0800571c <_fflush_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	4605      	mov	r5, r0
 8005722:	460c      	mov	r4, r1
 8005724:	b913      	cbnz	r3, 800572c <_fflush_r+0x10>
 8005726:	2500      	movs	r5, #0
 8005728:	4628      	mov	r0, r5
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	b118      	cbz	r0, 8005736 <_fflush_r+0x1a>
 800572e:	6a03      	ldr	r3, [r0, #32]
 8005730:	b90b      	cbnz	r3, 8005736 <_fflush_r+0x1a>
 8005732:	f7fe fa2d 	bl	8003b90 <__sinit>
 8005736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f3      	beq.n	8005726 <_fflush_r+0xa>
 800573e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005740:	07d0      	lsls	r0, r2, #31
 8005742:	d404      	bmi.n	800574e <_fflush_r+0x32>
 8005744:	0599      	lsls	r1, r3, #22
 8005746:	d402      	bmi.n	800574e <_fflush_r+0x32>
 8005748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800574a:	f7fe fb38 	bl	8003dbe <__retarget_lock_acquire_recursive>
 800574e:	4628      	mov	r0, r5
 8005750:	4621      	mov	r1, r4
 8005752:	f7ff ff5f 	bl	8005614 <__sflush_r>
 8005756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005758:	07da      	lsls	r2, r3, #31
 800575a:	4605      	mov	r5, r0
 800575c:	d4e4      	bmi.n	8005728 <_fflush_r+0xc>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	059b      	lsls	r3, r3, #22
 8005762:	d4e1      	bmi.n	8005728 <_fflush_r+0xc>
 8005764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005766:	f7fe fb2b 	bl	8003dc0 <__retarget_lock_release_recursive>
 800576a:	e7dd      	b.n	8005728 <_fflush_r+0xc>

0800576c <memmove>:
 800576c:	4288      	cmp	r0, r1
 800576e:	b510      	push	{r4, lr}
 8005770:	eb01 0402 	add.w	r4, r1, r2
 8005774:	d902      	bls.n	800577c <memmove+0x10>
 8005776:	4284      	cmp	r4, r0
 8005778:	4623      	mov	r3, r4
 800577a:	d807      	bhi.n	800578c <memmove+0x20>
 800577c:	1e43      	subs	r3, r0, #1
 800577e:	42a1      	cmp	r1, r4
 8005780:	d008      	beq.n	8005794 <memmove+0x28>
 8005782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800578a:	e7f8      	b.n	800577e <memmove+0x12>
 800578c:	4402      	add	r2, r0
 800578e:	4601      	mov	r1, r0
 8005790:	428a      	cmp	r2, r1
 8005792:	d100      	bne.n	8005796 <memmove+0x2a>
 8005794:	bd10      	pop	{r4, pc}
 8005796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800579a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800579e:	e7f7      	b.n	8005790 <memmove+0x24>

080057a0 <_sbrk_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d06      	ldr	r5, [pc, #24]	@ (80057bc <_sbrk_r+0x1c>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	602b      	str	r3, [r5, #0]
 80057ac:	f7fc f9f8 	bl	8001ba0 <_sbrk>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_sbrk_r+0x1a>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_sbrk_r+0x1a>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	20000370 	.word	0x20000370

080057c0 <memcpy>:
 80057c0:	440a      	add	r2, r1
 80057c2:	4291      	cmp	r1, r2
 80057c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057c8:	d100      	bne.n	80057cc <memcpy+0xc>
 80057ca:	4770      	bx	lr
 80057cc:	b510      	push	{r4, lr}
 80057ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057d6:	4291      	cmp	r1, r2
 80057d8:	d1f9      	bne.n	80057ce <memcpy+0xe>
 80057da:	bd10      	pop	{r4, pc}

080057dc <__assert_func>:
 80057dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057de:	4614      	mov	r4, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <__assert_func+0x2c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4605      	mov	r5, r0
 80057e8:	68d8      	ldr	r0, [r3, #12]
 80057ea:	b954      	cbnz	r4, 8005802 <__assert_func+0x26>
 80057ec:	4b07      	ldr	r3, [pc, #28]	@ (800580c <__assert_func+0x30>)
 80057ee:	461c      	mov	r4, r3
 80057f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057f4:	9100      	str	r1, [sp, #0]
 80057f6:	462b      	mov	r3, r5
 80057f8:	4905      	ldr	r1, [pc, #20]	@ (8005810 <__assert_func+0x34>)
 80057fa:	f000 f86f 	bl	80058dc <fiprintf>
 80057fe:	f000 f87f 	bl	8005900 <abort>
 8005802:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <__assert_func+0x38>)
 8005804:	e7f4      	b.n	80057f0 <__assert_func+0x14>
 8005806:	bf00      	nop
 8005808:	20000014 	.word	0x20000014
 800580c:	08006fde 	.word	0x08006fde
 8005810:	08006fb0 	.word	0x08006fb0
 8005814:	08006fa3 	.word	0x08006fa3

08005818 <_calloc_r>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	fba1 5402 	umull	r5, r4, r1, r2
 800581e:	b93c      	cbnz	r4, 8005830 <_calloc_r+0x18>
 8005820:	4629      	mov	r1, r5
 8005822:	f7ff f991 	bl	8004b48 <_malloc_r>
 8005826:	4606      	mov	r6, r0
 8005828:	b928      	cbnz	r0, 8005836 <_calloc_r+0x1e>
 800582a:	2600      	movs	r6, #0
 800582c:	4630      	mov	r0, r6
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	220c      	movs	r2, #12
 8005832:	6002      	str	r2, [r0, #0]
 8005834:	e7f9      	b.n	800582a <_calloc_r+0x12>
 8005836:	462a      	mov	r2, r5
 8005838:	4621      	mov	r1, r4
 800583a:	f7fe fa42 	bl	8003cc2 <memset>
 800583e:	e7f5      	b.n	800582c <_calloc_r+0x14>

08005840 <__ascii_mbtowc>:
 8005840:	b082      	sub	sp, #8
 8005842:	b901      	cbnz	r1, 8005846 <__ascii_mbtowc+0x6>
 8005844:	a901      	add	r1, sp, #4
 8005846:	b142      	cbz	r2, 800585a <__ascii_mbtowc+0x1a>
 8005848:	b14b      	cbz	r3, 800585e <__ascii_mbtowc+0x1e>
 800584a:	7813      	ldrb	r3, [r2, #0]
 800584c:	600b      	str	r3, [r1, #0]
 800584e:	7812      	ldrb	r2, [r2, #0]
 8005850:	1e10      	subs	r0, r2, #0
 8005852:	bf18      	it	ne
 8005854:	2001      	movne	r0, #1
 8005856:	b002      	add	sp, #8
 8005858:	4770      	bx	lr
 800585a:	4610      	mov	r0, r2
 800585c:	e7fb      	b.n	8005856 <__ascii_mbtowc+0x16>
 800585e:	f06f 0001 	mvn.w	r0, #1
 8005862:	e7f8      	b.n	8005856 <__ascii_mbtowc+0x16>

08005864 <_realloc_r>:
 8005864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005868:	4680      	mov	r8, r0
 800586a:	4615      	mov	r5, r2
 800586c:	460c      	mov	r4, r1
 800586e:	b921      	cbnz	r1, 800587a <_realloc_r+0x16>
 8005870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	4611      	mov	r1, r2
 8005876:	f7ff b967 	b.w	8004b48 <_malloc_r>
 800587a:	b92a      	cbnz	r2, 8005888 <_realloc_r+0x24>
 800587c:	f7ff f8f0 	bl	8004a60 <_free_r>
 8005880:	2400      	movs	r4, #0
 8005882:	4620      	mov	r0, r4
 8005884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005888:	f000 f841 	bl	800590e <_malloc_usable_size_r>
 800588c:	4285      	cmp	r5, r0
 800588e:	4606      	mov	r6, r0
 8005890:	d802      	bhi.n	8005898 <_realloc_r+0x34>
 8005892:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005896:	d8f4      	bhi.n	8005882 <_realloc_r+0x1e>
 8005898:	4629      	mov	r1, r5
 800589a:	4640      	mov	r0, r8
 800589c:	f7ff f954 	bl	8004b48 <_malloc_r>
 80058a0:	4607      	mov	r7, r0
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d0ec      	beq.n	8005880 <_realloc_r+0x1c>
 80058a6:	42b5      	cmp	r5, r6
 80058a8:	462a      	mov	r2, r5
 80058aa:	4621      	mov	r1, r4
 80058ac:	bf28      	it	cs
 80058ae:	4632      	movcs	r2, r6
 80058b0:	f7ff ff86 	bl	80057c0 <memcpy>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4640      	mov	r0, r8
 80058b8:	f7ff f8d2 	bl	8004a60 <_free_r>
 80058bc:	463c      	mov	r4, r7
 80058be:	e7e0      	b.n	8005882 <_realloc_r+0x1e>

080058c0 <__ascii_wctomb>:
 80058c0:	4603      	mov	r3, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	b141      	cbz	r1, 80058d8 <__ascii_wctomb+0x18>
 80058c6:	2aff      	cmp	r2, #255	@ 0xff
 80058c8:	d904      	bls.n	80058d4 <__ascii_wctomb+0x14>
 80058ca:	228a      	movs	r2, #138	@ 0x8a
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	4770      	bx	lr
 80058d4:	700a      	strb	r2, [r1, #0]
 80058d6:	2001      	movs	r0, #1
 80058d8:	4770      	bx	lr
	...

080058dc <fiprintf>:
 80058dc:	b40e      	push	{r1, r2, r3}
 80058de:	b503      	push	{r0, r1, lr}
 80058e0:	4601      	mov	r1, r0
 80058e2:	ab03      	add	r3, sp, #12
 80058e4:	4805      	ldr	r0, [pc, #20]	@ (80058fc <fiprintf+0x20>)
 80058e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	f000 f83f 	bl	8005970 <_vfiprintf_r>
 80058f2:	b002      	add	sp, #8
 80058f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f8:	b003      	add	sp, #12
 80058fa:	4770      	bx	lr
 80058fc:	20000014 	.word	0x20000014

08005900 <abort>:
 8005900:	b508      	push	{r3, lr}
 8005902:	2006      	movs	r0, #6
 8005904:	f000 fa08 	bl	8005d18 <raise>
 8005908:	2001      	movs	r0, #1
 800590a:	f7fc f8d1 	bl	8001ab0 <_exit>

0800590e <_malloc_usable_size_r>:
 800590e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005912:	1f18      	subs	r0, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	bfbc      	itt	lt
 8005918:	580b      	ldrlt	r3, [r1, r0]
 800591a:	18c0      	addlt	r0, r0, r3
 800591c:	4770      	bx	lr

0800591e <__sfputc_r>:
 800591e:	6893      	ldr	r3, [r2, #8]
 8005920:	3b01      	subs	r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	b410      	push	{r4}
 8005926:	6093      	str	r3, [r2, #8]
 8005928:	da08      	bge.n	800593c <__sfputc_r+0x1e>
 800592a:	6994      	ldr	r4, [r2, #24]
 800592c:	42a3      	cmp	r3, r4
 800592e:	db01      	blt.n	8005934 <__sfputc_r+0x16>
 8005930:	290a      	cmp	r1, #10
 8005932:	d103      	bne.n	800593c <__sfputc_r+0x1e>
 8005934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005938:	f000 b932 	b.w	8005ba0 <__swbuf_r>
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	1c58      	adds	r0, r3, #1
 8005940:	6010      	str	r0, [r2, #0]
 8005942:	7019      	strb	r1, [r3, #0]
 8005944:	4608      	mov	r0, r1
 8005946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800594a:	4770      	bx	lr

0800594c <__sfputs_r>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	4614      	mov	r4, r2
 8005954:	18d5      	adds	r5, r2, r3
 8005956:	42ac      	cmp	r4, r5
 8005958:	d101      	bne.n	800595e <__sfputs_r+0x12>
 800595a:	2000      	movs	r0, #0
 800595c:	e007      	b.n	800596e <__sfputs_r+0x22>
 800595e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005962:	463a      	mov	r2, r7
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ffda 	bl	800591e <__sfputc_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d1f3      	bne.n	8005956 <__sfputs_r+0xa>
 800596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005970 <_vfiprintf_r>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	460d      	mov	r5, r1
 8005976:	b09d      	sub	sp, #116	@ 0x74
 8005978:	4614      	mov	r4, r2
 800597a:	4698      	mov	r8, r3
 800597c:	4606      	mov	r6, r0
 800597e:	b118      	cbz	r0, 8005988 <_vfiprintf_r+0x18>
 8005980:	6a03      	ldr	r3, [r0, #32]
 8005982:	b90b      	cbnz	r3, 8005988 <_vfiprintf_r+0x18>
 8005984:	f7fe f904 	bl	8003b90 <__sinit>
 8005988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800598a:	07d9      	lsls	r1, r3, #31
 800598c:	d405      	bmi.n	800599a <_vfiprintf_r+0x2a>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	059a      	lsls	r2, r3, #22
 8005992:	d402      	bmi.n	800599a <_vfiprintf_r+0x2a>
 8005994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005996:	f7fe fa12 	bl	8003dbe <__retarget_lock_acquire_recursive>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	071b      	lsls	r3, r3, #28
 800599e:	d501      	bpl.n	80059a4 <_vfiprintf_r+0x34>
 80059a0:	692b      	ldr	r3, [r5, #16]
 80059a2:	b99b      	cbnz	r3, 80059cc <_vfiprintf_r+0x5c>
 80059a4:	4629      	mov	r1, r5
 80059a6:	4630      	mov	r0, r6
 80059a8:	f000 f938 	bl	8005c1c <__swsetup_r>
 80059ac:	b170      	cbz	r0, 80059cc <_vfiprintf_r+0x5c>
 80059ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059b0:	07dc      	lsls	r4, r3, #31
 80059b2:	d504      	bpl.n	80059be <_vfiprintf_r+0x4e>
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	b01d      	add	sp, #116	@ 0x74
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059be:	89ab      	ldrh	r3, [r5, #12]
 80059c0:	0598      	lsls	r0, r3, #22
 80059c2:	d4f7      	bmi.n	80059b4 <_vfiprintf_r+0x44>
 80059c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059c6:	f7fe f9fb 	bl	8003dc0 <__retarget_lock_release_recursive>
 80059ca:	e7f3      	b.n	80059b4 <_vfiprintf_r+0x44>
 80059cc:	2300      	movs	r3, #0
 80059ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d0:	2320      	movs	r3, #32
 80059d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059da:	2330      	movs	r3, #48	@ 0x30
 80059dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b8c <_vfiprintf_r+0x21c>
 80059e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059e4:	f04f 0901 	mov.w	r9, #1
 80059e8:	4623      	mov	r3, r4
 80059ea:	469a      	mov	sl, r3
 80059ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f0:	b10a      	cbz	r2, 80059f6 <_vfiprintf_r+0x86>
 80059f2:	2a25      	cmp	r2, #37	@ 0x25
 80059f4:	d1f9      	bne.n	80059ea <_vfiprintf_r+0x7a>
 80059f6:	ebba 0b04 	subs.w	fp, sl, r4
 80059fa:	d00b      	beq.n	8005a14 <_vfiprintf_r+0xa4>
 80059fc:	465b      	mov	r3, fp
 80059fe:	4622      	mov	r2, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7ff ffa2 	bl	800594c <__sfputs_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f000 80a7 	beq.w	8005b5c <_vfiprintf_r+0x1ec>
 8005a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a10:	445a      	add	r2, fp
 8005a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a14:	f89a 3000 	ldrb.w	r3, [sl]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 809f 	beq.w	8005b5c <_vfiprintf_r+0x1ec>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295
 8005a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a28:	f10a 0a01 	add.w	sl, sl, #1
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	9307      	str	r3, [sp, #28]
 8005a30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a34:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a36:	4654      	mov	r4, sl
 8005a38:	2205      	movs	r2, #5
 8005a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3e:	4853      	ldr	r0, [pc, #332]	@ (8005b8c <_vfiprintf_r+0x21c>)
 8005a40:	f7fa fbc6 	bl	80001d0 <memchr>
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	b9d8      	cbnz	r0, 8005a80 <_vfiprintf_r+0x110>
 8005a48:	06d1      	lsls	r1, r2, #27
 8005a4a:	bf44      	itt	mi
 8005a4c:	2320      	movmi	r3, #32
 8005a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a52:	0713      	lsls	r3, r2, #28
 8005a54:	bf44      	itt	mi
 8005a56:	232b      	movmi	r3, #43	@ 0x2b
 8005a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a62:	d015      	beq.n	8005a90 <_vfiprintf_r+0x120>
 8005a64:	9a07      	ldr	r2, [sp, #28]
 8005a66:	4654      	mov	r4, sl
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f04f 0c0a 	mov.w	ip, #10
 8005a6e:	4621      	mov	r1, r4
 8005a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a74:	3b30      	subs	r3, #48	@ 0x30
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	d94b      	bls.n	8005b12 <_vfiprintf_r+0x1a2>
 8005a7a:	b1b0      	cbz	r0, 8005aaa <_vfiprintf_r+0x13a>
 8005a7c:	9207      	str	r2, [sp, #28]
 8005a7e:	e014      	b.n	8005aaa <_vfiprintf_r+0x13a>
 8005a80:	eba0 0308 	sub.w	r3, r0, r8
 8005a84:	fa09 f303 	lsl.w	r3, r9, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	9304      	str	r3, [sp, #16]
 8005a8c:	46a2      	mov	sl, r4
 8005a8e:	e7d2      	b.n	8005a36 <_vfiprintf_r+0xc6>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	1d19      	adds	r1, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9103      	str	r1, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfbb      	ittet	lt
 8005a9c:	425b      	neglt	r3, r3
 8005a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa2:	9307      	strge	r3, [sp, #28]
 8005aa4:	9307      	strlt	r3, [sp, #28]
 8005aa6:	bfb8      	it	lt
 8005aa8:	9204      	strlt	r2, [sp, #16]
 8005aaa:	7823      	ldrb	r3, [r4, #0]
 8005aac:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aae:	d10a      	bne.n	8005ac6 <_vfiprintf_r+0x156>
 8005ab0:	7863      	ldrb	r3, [r4, #1]
 8005ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab4:	d132      	bne.n	8005b1c <_vfiprintf_r+0x1ac>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	9203      	str	r2, [sp, #12]
 8005abe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ac2:	3402      	adds	r4, #2
 8005ac4:	9305      	str	r3, [sp, #20]
 8005ac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b9c <_vfiprintf_r+0x22c>
 8005aca:	7821      	ldrb	r1, [r4, #0]
 8005acc:	2203      	movs	r2, #3
 8005ace:	4650      	mov	r0, sl
 8005ad0:	f7fa fb7e 	bl	80001d0 <memchr>
 8005ad4:	b138      	cbz	r0, 8005ae6 <_vfiprintf_r+0x176>
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	eba0 000a 	sub.w	r0, r0, sl
 8005adc:	2240      	movs	r2, #64	@ 0x40
 8005ade:	4082      	lsls	r2, r0
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	3401      	adds	r4, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aea:	4829      	ldr	r0, [pc, #164]	@ (8005b90 <_vfiprintf_r+0x220>)
 8005aec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005af0:	2206      	movs	r2, #6
 8005af2:	f7fa fb6d 	bl	80001d0 <memchr>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d03f      	beq.n	8005b7a <_vfiprintf_r+0x20a>
 8005afa:	4b26      	ldr	r3, [pc, #152]	@ (8005b94 <_vfiprintf_r+0x224>)
 8005afc:	bb1b      	cbnz	r3, 8005b46 <_vfiprintf_r+0x1d6>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	3307      	adds	r3, #7
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	3308      	adds	r3, #8
 8005b08:	9303      	str	r3, [sp, #12]
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	443b      	add	r3, r7
 8005b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b10:	e76a      	b.n	80059e8 <_vfiprintf_r+0x78>
 8005b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b16:	460c      	mov	r4, r1
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e7a8      	b.n	8005a6e <_vfiprintf_r+0xfe>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0c0a 	mov.w	ip, #10
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2e:	3a30      	subs	r2, #48	@ 0x30
 8005b30:	2a09      	cmp	r2, #9
 8005b32:	d903      	bls.n	8005b3c <_vfiprintf_r+0x1cc>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0c6      	beq.n	8005ac6 <_vfiprintf_r+0x156>
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	e7c4      	b.n	8005ac6 <_vfiprintf_r+0x156>
 8005b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b40:	4604      	mov	r4, r0
 8005b42:	2301      	movs	r3, #1
 8005b44:	e7f0      	b.n	8005b28 <_vfiprintf_r+0x1b8>
 8005b46:	ab03      	add	r3, sp, #12
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	4b12      	ldr	r3, [pc, #72]	@ (8005b98 <_vfiprintf_r+0x228>)
 8005b4e:	a904      	add	r1, sp, #16
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7fd fbd9 	bl	8003308 <_printf_float>
 8005b56:	4607      	mov	r7, r0
 8005b58:	1c78      	adds	r0, r7, #1
 8005b5a:	d1d6      	bne.n	8005b0a <_vfiprintf_r+0x19a>
 8005b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b5e:	07d9      	lsls	r1, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_vfiprintf_r+0x1fe>
 8005b62:	89ab      	ldrh	r3, [r5, #12]
 8005b64:	059a      	lsls	r2, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_vfiprintf_r+0x1fe>
 8005b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b6a:	f7fe f929 	bl	8003dc0 <__retarget_lock_release_recursive>
 8005b6e:	89ab      	ldrh	r3, [r5, #12]
 8005b70:	065b      	lsls	r3, r3, #25
 8005b72:	f53f af1f 	bmi.w	80059b4 <_vfiprintf_r+0x44>
 8005b76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b78:	e71e      	b.n	80059b8 <_vfiprintf_r+0x48>
 8005b7a:	ab03      	add	r3, sp, #12
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	462a      	mov	r2, r5
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <_vfiprintf_r+0x228>)
 8005b82:	a904      	add	r1, sp, #16
 8005b84:	4630      	mov	r0, r6
 8005b86:	f7fd fe57 	bl	8003838 <_printf_i>
 8005b8a:	e7e4      	b.n	8005b56 <_vfiprintf_r+0x1e6>
 8005b8c:	08006f88 	.word	0x08006f88
 8005b90:	08006f92 	.word	0x08006f92
 8005b94:	08003309 	.word	0x08003309
 8005b98:	0800594d 	.word	0x0800594d
 8005b9c:	08006f8e 	.word	0x08006f8e

08005ba0 <__swbuf_r>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	460e      	mov	r6, r1
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	b118      	cbz	r0, 8005bb2 <__swbuf_r+0x12>
 8005baa:	6a03      	ldr	r3, [r0, #32]
 8005bac:	b90b      	cbnz	r3, 8005bb2 <__swbuf_r+0x12>
 8005bae:	f7fd ffef 	bl	8003b90 <__sinit>
 8005bb2:	69a3      	ldr	r3, [r4, #24]
 8005bb4:	60a3      	str	r3, [r4, #8]
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	071a      	lsls	r2, r3, #28
 8005bba:	d501      	bpl.n	8005bc0 <__swbuf_r+0x20>
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	b943      	cbnz	r3, 8005bd2 <__swbuf_r+0x32>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 f82a 	bl	8005c1c <__swsetup_r>
 8005bc8:	b118      	cbz	r0, 8005bd2 <__swbuf_r+0x32>
 8005bca:	f04f 37ff 	mov.w	r7, #4294967295
 8005bce:	4638      	mov	r0, r7
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	1a98      	subs	r0, r3, r2
 8005bd8:	6963      	ldr	r3, [r4, #20]
 8005bda:	b2f6      	uxtb	r6, r6
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	4637      	mov	r7, r6
 8005be0:	dc05      	bgt.n	8005bee <__swbuf_r+0x4e>
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f7ff fd99 	bl	800571c <_fflush_r>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d1ed      	bne.n	8005bca <__swbuf_r+0x2a>
 8005bee:	68a3      	ldr	r3, [r4, #8]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	60a3      	str	r3, [r4, #8]
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	701e      	strb	r6, [r3, #0]
 8005bfc:	6962      	ldr	r2, [r4, #20]
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d004      	beq.n	8005c0e <__swbuf_r+0x6e>
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	07db      	lsls	r3, r3, #31
 8005c08:	d5e1      	bpl.n	8005bce <__swbuf_r+0x2e>
 8005c0a:	2e0a      	cmp	r6, #10
 8005c0c:	d1df      	bne.n	8005bce <__swbuf_r+0x2e>
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4628      	mov	r0, r5
 8005c12:	f7ff fd83 	bl	800571c <_fflush_r>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d0d9      	beq.n	8005bce <__swbuf_r+0x2e>
 8005c1a:	e7d6      	b.n	8005bca <__swbuf_r+0x2a>

08005c1c <__swsetup_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4b29      	ldr	r3, [pc, #164]	@ (8005cc4 <__swsetup_r+0xa8>)
 8005c20:	4605      	mov	r5, r0
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	460c      	mov	r4, r1
 8005c26:	b118      	cbz	r0, 8005c30 <__swsetup_r+0x14>
 8005c28:	6a03      	ldr	r3, [r0, #32]
 8005c2a:	b90b      	cbnz	r3, 8005c30 <__swsetup_r+0x14>
 8005c2c:	f7fd ffb0 	bl	8003b90 <__sinit>
 8005c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c34:	0719      	lsls	r1, r3, #28
 8005c36:	d422      	bmi.n	8005c7e <__swsetup_r+0x62>
 8005c38:	06da      	lsls	r2, r3, #27
 8005c3a:	d407      	bmi.n	8005c4c <__swsetup_r+0x30>
 8005c3c:	2209      	movs	r2, #9
 8005c3e:	602a      	str	r2, [r5, #0]
 8005c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4a:	e033      	b.n	8005cb4 <__swsetup_r+0x98>
 8005c4c:	0758      	lsls	r0, r3, #29
 8005c4e:	d512      	bpl.n	8005c76 <__swsetup_r+0x5a>
 8005c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c52:	b141      	cbz	r1, 8005c66 <__swsetup_r+0x4a>
 8005c54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	d002      	beq.n	8005c62 <__swsetup_r+0x46>
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f7fe feff 	bl	8004a60 <_free_r>
 8005c62:	2300      	movs	r3, #0
 8005c64:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6063      	str	r3, [r4, #4]
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f043 0308 	orr.w	r3, r3, #8
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	b94b      	cbnz	r3, 8005c96 <__swsetup_r+0x7a>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c8c:	d003      	beq.n	8005c96 <__swsetup_r+0x7a>
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4628      	mov	r0, r5
 8005c92:	f000 f883 	bl	8005d9c <__smakebuf_r>
 8005c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9a:	f013 0201 	ands.w	r2, r3, #1
 8005c9e:	d00a      	beq.n	8005cb6 <__swsetup_r+0x9a>
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60a2      	str	r2, [r4, #8]
 8005ca4:	6962      	ldr	r2, [r4, #20]
 8005ca6:	4252      	negs	r2, r2
 8005ca8:	61a2      	str	r2, [r4, #24]
 8005caa:	6922      	ldr	r2, [r4, #16]
 8005cac:	b942      	cbnz	r2, 8005cc0 <__swsetup_r+0xa4>
 8005cae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cb2:	d1c5      	bne.n	8005c40 <__swsetup_r+0x24>
 8005cb4:	bd38      	pop	{r3, r4, r5, pc}
 8005cb6:	0799      	lsls	r1, r3, #30
 8005cb8:	bf58      	it	pl
 8005cba:	6962      	ldrpl	r2, [r4, #20]
 8005cbc:	60a2      	str	r2, [r4, #8]
 8005cbe:	e7f4      	b.n	8005caa <__swsetup_r+0x8e>
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e7f7      	b.n	8005cb4 <__swsetup_r+0x98>
 8005cc4:	20000014 	.word	0x20000014

08005cc8 <_raise_r>:
 8005cc8:	291f      	cmp	r1, #31
 8005cca:	b538      	push	{r3, r4, r5, lr}
 8005ccc:	4605      	mov	r5, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	d904      	bls.n	8005cdc <_raise_r+0x14>
 8005cd2:	2316      	movs	r3, #22
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005cde:	b112      	cbz	r2, 8005ce6 <_raise_r+0x1e>
 8005ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ce4:	b94b      	cbnz	r3, 8005cfa <_raise_r+0x32>
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 f830 	bl	8005d4c <_getpid_r>
 8005cec:	4622      	mov	r2, r4
 8005cee:	4601      	mov	r1, r0
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf6:	f000 b817 	b.w	8005d28 <_kill_r>
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d00a      	beq.n	8005d14 <_raise_r+0x4c>
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	d103      	bne.n	8005d0a <_raise_r+0x42>
 8005d02:	2316      	movs	r3, #22
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	2001      	movs	r0, #1
 8005d08:	e7e7      	b.n	8005cda <_raise_r+0x12>
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d10:	4620      	mov	r0, r4
 8005d12:	4798      	blx	r3
 8005d14:	2000      	movs	r0, #0
 8005d16:	e7e0      	b.n	8005cda <_raise_r+0x12>

08005d18 <raise>:
 8005d18:	4b02      	ldr	r3, [pc, #8]	@ (8005d24 <raise+0xc>)
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7ff bfd3 	b.w	8005cc8 <_raise_r>
 8005d22:	bf00      	nop
 8005d24:	20000014 	.word	0x20000014

08005d28 <_kill_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	@ (8005d48 <_kill_r+0x20>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f7fb feab 	bl	8001a90 <_kill>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d102      	bne.n	8005d44 <_kill_r+0x1c>
 8005d3e:	682b      	ldr	r3, [r5, #0]
 8005d40:	b103      	cbz	r3, 8005d44 <_kill_r+0x1c>
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	20000370 	.word	0x20000370

08005d4c <_getpid_r>:
 8005d4c:	f7fb be98 	b.w	8001a80 <_getpid>

08005d50 <__swhatbuf_r>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	b096      	sub	sp, #88	@ 0x58
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	461e      	mov	r6, r3
 8005d60:	da0d      	bge.n	8005d7e <__swhatbuf_r+0x2e>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d68:	f04f 0100 	mov.w	r1, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2340      	movne	r3, #64	@ 0x40
 8005d70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d74:	2000      	movs	r0, #0
 8005d76:	6031      	str	r1, [r6, #0]
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	b016      	add	sp, #88	@ 0x58
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	466a      	mov	r2, sp
 8005d80:	f000 f848 	bl	8005e14 <_fstat_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	dbec      	blt.n	8005d62 <__swhatbuf_r+0x12>
 8005d88:	9901      	ldr	r1, [sp, #4]
 8005d8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d92:	4259      	negs	r1, r3
 8005d94:	4159      	adcs	r1, r3
 8005d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d9a:	e7eb      	b.n	8005d74 <__swhatbuf_r+0x24>

08005d9c <__smakebuf_r>:
 8005d9c:	898b      	ldrh	r3, [r1, #12]
 8005d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da0:	079d      	lsls	r5, r3, #30
 8005da2:	4606      	mov	r6, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	d507      	bpl.n	8005db8 <__smakebuf_r+0x1c>
 8005da8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	2301      	movs	r3, #1
 8005db2:	6163      	str	r3, [r4, #20]
 8005db4:	b003      	add	sp, #12
 8005db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db8:	ab01      	add	r3, sp, #4
 8005dba:	466a      	mov	r2, sp
 8005dbc:	f7ff ffc8 	bl	8005d50 <__swhatbuf_r>
 8005dc0:	9f00      	ldr	r7, [sp, #0]
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7fe febe 	bl	8004b48 <_malloc_r>
 8005dcc:	b948      	cbnz	r0, 8005de2 <__smakebuf_r+0x46>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	059a      	lsls	r2, r3, #22
 8005dd4:	d4ee      	bmi.n	8005db4 <__smakebuf_r+0x18>
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	f043 0302 	orr.w	r3, r3, #2
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	e7e2      	b.n	8005da8 <__smakebuf_r+0xc>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	6020      	str	r0, [r4, #0]
 8005de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	9b01      	ldr	r3, [sp, #4]
 8005dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005df2:	b15b      	cbz	r3, 8005e0c <__smakebuf_r+0x70>
 8005df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f81d 	bl	8005e38 <_isatty_r>
 8005dfe:	b128      	cbz	r0, 8005e0c <__smakebuf_r+0x70>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	431d      	orrs	r5, r3
 8005e10:	81a5      	strh	r5, [r4, #12]
 8005e12:	e7cf      	b.n	8005db4 <__smakebuf_r+0x18>

08005e14 <_fstat_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d07      	ldr	r5, [pc, #28]	@ (8005e34 <_fstat_r+0x20>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f7fb fe95 	bl	8001b50 <_fstat>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d102      	bne.n	8005e30 <_fstat_r+0x1c>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b103      	cbz	r3, 8005e30 <_fstat_r+0x1c>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	20000370 	.word	0x20000370

08005e38 <_isatty_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d06      	ldr	r5, [pc, #24]	@ (8005e54 <_isatty_r+0x1c>)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	f7fb fe94 	bl	8001b70 <_isatty>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_isatty_r+0x1a>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_isatty_r+0x1a>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20000370 	.word	0x20000370

08005e58 <pow>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	ed2d 8b02 	vpush	{d8}
 8005e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8005e62:	eef0 8a60 	vmov.f32	s17, s1
 8005e66:	ec55 4b11 	vmov	r4, r5, d1
 8005e6a:	f000 f871 	bl	8005f50 <__ieee754_pow>
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	4620      	mov	r0, r4
 8005e74:	4629      	mov	r1, r5
 8005e76:	ec57 6b10 	vmov	r6, r7, d0
 8005e7a:	f7fa fe57 	bl	8000b2c <__aeabi_dcmpun>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d13b      	bne.n	8005efa <pow+0xa2>
 8005e82:	ec51 0b18 	vmov	r0, r1, d8
 8005e86:	2200      	movs	r2, #0
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f7fa fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e8e:	b1b8      	cbz	r0, 8005ec0 <pow+0x68>
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	4620      	mov	r0, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	f7fa fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d146      	bne.n	8005f2e <pow+0xd6>
 8005ea0:	ec45 4b10 	vmov	d0, r4, r5
 8005ea4:	f000 f848 	bl	8005f38 <finite>
 8005ea8:	b338      	cbz	r0, 8005efa <pow+0xa2>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7fa fe13 	bl	8000adc <__aeabi_dcmplt>
 8005eb6:	b300      	cbz	r0, 8005efa <pow+0xa2>
 8005eb8:	f7fd ff56 	bl	8003d68 <__errno>
 8005ebc:	2322      	movs	r3, #34	@ 0x22
 8005ebe:	e01b      	b.n	8005ef8 <pow+0xa0>
 8005ec0:	ec47 6b10 	vmov	d0, r6, r7
 8005ec4:	f000 f838 	bl	8005f38 <finite>
 8005ec8:	b9e0      	cbnz	r0, 8005f04 <pow+0xac>
 8005eca:	eeb0 0a48 	vmov.f32	s0, s16
 8005ece:	eef0 0a68 	vmov.f32	s1, s17
 8005ed2:	f000 f831 	bl	8005f38 <finite>
 8005ed6:	b1a8      	cbz	r0, 8005f04 <pow+0xac>
 8005ed8:	ec45 4b10 	vmov	d0, r4, r5
 8005edc:	f000 f82c 	bl	8005f38 <finite>
 8005ee0:	b180      	cbz	r0, 8005f04 <pow+0xac>
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa fe1f 	bl	8000b2c <__aeabi_dcmpun>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d0e2      	beq.n	8005eb8 <pow+0x60>
 8005ef2:	f7fd ff39 	bl	8003d68 <__errno>
 8005ef6:	2321      	movs	r3, #33	@ 0x21
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	ecbd 8b02 	vpop	{d8}
 8005efe:	ec47 6b10 	vmov	d0, r6, r7
 8005f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d0f2      	beq.n	8005efa <pow+0xa2>
 8005f14:	eeb0 0a48 	vmov.f32	s0, s16
 8005f18:	eef0 0a68 	vmov.f32	s1, s17
 8005f1c:	f000 f80c 	bl	8005f38 <finite>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d0ea      	beq.n	8005efa <pow+0xa2>
 8005f24:	ec45 4b10 	vmov	d0, r4, r5
 8005f28:	f000 f806 	bl	8005f38 <finite>
 8005f2c:	e7c3      	b.n	8005eb6 <pow+0x5e>
 8005f2e:	4f01      	ldr	r7, [pc, #4]	@ (8005f34 <pow+0xdc>)
 8005f30:	2600      	movs	r6, #0
 8005f32:	e7e2      	b.n	8005efa <pow+0xa2>
 8005f34:	3ff00000 	.word	0x3ff00000

08005f38 <finite>:
 8005f38:	b082      	sub	sp, #8
 8005f3a:	ed8d 0b00 	vstr	d0, [sp]
 8005f3e:	9801      	ldr	r0, [sp, #4]
 8005f40:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005f44:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005f48:	0fc0      	lsrs	r0, r0, #31
 8005f4a:	b002      	add	sp, #8
 8005f4c:	4770      	bx	lr
	...

08005f50 <__ieee754_pow>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	b091      	sub	sp, #68	@ 0x44
 8005f56:	ed8d 1b00 	vstr	d1, [sp]
 8005f5a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005f5e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005f62:	ea5a 0001 	orrs.w	r0, sl, r1
 8005f66:	ec57 6b10 	vmov	r6, r7, d0
 8005f6a:	d113      	bne.n	8005f94 <__ieee754_pow+0x44>
 8005f6c:	19b3      	adds	r3, r6, r6
 8005f6e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005f72:	4152      	adcs	r2, r2
 8005f74:	4298      	cmp	r0, r3
 8005f76:	4b98      	ldr	r3, [pc, #608]	@ (80061d8 <__ieee754_pow+0x288>)
 8005f78:	4193      	sbcs	r3, r2
 8005f7a:	f080 84ea 	bcs.w	8006952 <__ieee754_pow+0xa02>
 8005f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa f981 	bl	800028c <__adddf3>
 8005f8a:	ec41 0b10 	vmov	d0, r0, r1
 8005f8e:	b011      	add	sp, #68	@ 0x44
 8005f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f94:	4a91      	ldr	r2, [pc, #580]	@ (80061dc <__ieee754_pow+0x28c>)
 8005f96:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005f9a:	4590      	cmp	r8, r2
 8005f9c:	463d      	mov	r5, r7
 8005f9e:	4633      	mov	r3, r6
 8005fa0:	d806      	bhi.n	8005fb0 <__ieee754_pow+0x60>
 8005fa2:	d101      	bne.n	8005fa8 <__ieee754_pow+0x58>
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	d1ea      	bne.n	8005f7e <__ieee754_pow+0x2e>
 8005fa8:	4592      	cmp	sl, r2
 8005faa:	d801      	bhi.n	8005fb0 <__ieee754_pow+0x60>
 8005fac:	d10e      	bne.n	8005fcc <__ieee754_pow+0x7c>
 8005fae:	b169      	cbz	r1, 8005fcc <__ieee754_pow+0x7c>
 8005fb0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005fb4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005fb8:	431d      	orrs	r5, r3
 8005fba:	d1e0      	bne.n	8005f7e <__ieee754_pow+0x2e>
 8005fbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005fc0:	18db      	adds	r3, r3, r3
 8005fc2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005fc6:	4152      	adcs	r2, r2
 8005fc8:	429d      	cmp	r5, r3
 8005fca:	e7d4      	b.n	8005f76 <__ieee754_pow+0x26>
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	46c3      	mov	fp, r8
 8005fd0:	da3a      	bge.n	8006048 <__ieee754_pow+0xf8>
 8005fd2:	4a83      	ldr	r2, [pc, #524]	@ (80061e0 <__ieee754_pow+0x290>)
 8005fd4:	4592      	cmp	sl, r2
 8005fd6:	d84d      	bhi.n	8006074 <__ieee754_pow+0x124>
 8005fd8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005fdc:	4592      	cmp	sl, r2
 8005fde:	f240 84c7 	bls.w	8006970 <__ieee754_pow+0xa20>
 8005fe2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005fe6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005fea:	2a14      	cmp	r2, #20
 8005fec:	dd0f      	ble.n	800600e <__ieee754_pow+0xbe>
 8005fee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005ff2:	fa21 f402 	lsr.w	r4, r1, r2
 8005ff6:	fa04 f202 	lsl.w	r2, r4, r2
 8005ffa:	428a      	cmp	r2, r1
 8005ffc:	f040 84b8 	bne.w	8006970 <__ieee754_pow+0xa20>
 8006000:	f004 0401 	and.w	r4, r4, #1
 8006004:	f1c4 0402 	rsb	r4, r4, #2
 8006008:	2900      	cmp	r1, #0
 800600a:	d158      	bne.n	80060be <__ieee754_pow+0x16e>
 800600c:	e00e      	b.n	800602c <__ieee754_pow+0xdc>
 800600e:	2900      	cmp	r1, #0
 8006010:	d154      	bne.n	80060bc <__ieee754_pow+0x16c>
 8006012:	f1c2 0214 	rsb	r2, r2, #20
 8006016:	fa4a f402 	asr.w	r4, sl, r2
 800601a:	fa04 f202 	lsl.w	r2, r4, r2
 800601e:	4552      	cmp	r2, sl
 8006020:	f040 84a3 	bne.w	800696a <__ieee754_pow+0xa1a>
 8006024:	f004 0401 	and.w	r4, r4, #1
 8006028:	f1c4 0402 	rsb	r4, r4, #2
 800602c:	4a6d      	ldr	r2, [pc, #436]	@ (80061e4 <__ieee754_pow+0x294>)
 800602e:	4592      	cmp	sl, r2
 8006030:	d12e      	bne.n	8006090 <__ieee754_pow+0x140>
 8006032:	f1b9 0f00 	cmp.w	r9, #0
 8006036:	f280 8494 	bge.w	8006962 <__ieee754_pow+0xa12>
 800603a:	496a      	ldr	r1, [pc, #424]	@ (80061e4 <__ieee754_pow+0x294>)
 800603c:	4632      	mov	r2, r6
 800603e:	463b      	mov	r3, r7
 8006040:	2000      	movs	r0, #0
 8006042:	f7fa fc03 	bl	800084c <__aeabi_ddiv>
 8006046:	e7a0      	b.n	8005f8a <__ieee754_pow+0x3a>
 8006048:	2400      	movs	r4, #0
 800604a:	bbc1      	cbnz	r1, 80060be <__ieee754_pow+0x16e>
 800604c:	4a63      	ldr	r2, [pc, #396]	@ (80061dc <__ieee754_pow+0x28c>)
 800604e:	4592      	cmp	sl, r2
 8006050:	d1ec      	bne.n	800602c <__ieee754_pow+0xdc>
 8006052:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006056:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800605a:	431a      	orrs	r2, r3
 800605c:	f000 8479 	beq.w	8006952 <__ieee754_pow+0xa02>
 8006060:	4b61      	ldr	r3, [pc, #388]	@ (80061e8 <__ieee754_pow+0x298>)
 8006062:	4598      	cmp	r8, r3
 8006064:	d908      	bls.n	8006078 <__ieee754_pow+0x128>
 8006066:	f1b9 0f00 	cmp.w	r9, #0
 800606a:	f2c0 8476 	blt.w	800695a <__ieee754_pow+0xa0a>
 800606e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006072:	e78a      	b.n	8005f8a <__ieee754_pow+0x3a>
 8006074:	2402      	movs	r4, #2
 8006076:	e7e8      	b.n	800604a <__ieee754_pow+0xfa>
 8006078:	f1b9 0f00 	cmp.w	r9, #0
 800607c:	f04f 0000 	mov.w	r0, #0
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	da81      	bge.n	8005f8a <__ieee754_pow+0x3a>
 8006086:	e9dd 0300 	ldrd	r0, r3, [sp]
 800608a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800608e:	e77c      	b.n	8005f8a <__ieee754_pow+0x3a>
 8006090:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006094:	d106      	bne.n	80060a4 <__ieee754_pow+0x154>
 8006096:	4632      	mov	r2, r6
 8006098:	463b      	mov	r3, r7
 800609a:	4630      	mov	r0, r6
 800609c:	4639      	mov	r1, r7
 800609e:	f7fa faab 	bl	80005f8 <__aeabi_dmul>
 80060a2:	e772      	b.n	8005f8a <__ieee754_pow+0x3a>
 80060a4:	4a51      	ldr	r2, [pc, #324]	@ (80061ec <__ieee754_pow+0x29c>)
 80060a6:	4591      	cmp	r9, r2
 80060a8:	d109      	bne.n	80060be <__ieee754_pow+0x16e>
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	db07      	blt.n	80060be <__ieee754_pow+0x16e>
 80060ae:	ec47 6b10 	vmov	d0, r6, r7
 80060b2:	b011      	add	sp, #68	@ 0x44
 80060b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	f000 bd52 	b.w	8006b60 <__ieee754_sqrt>
 80060bc:	2400      	movs	r4, #0
 80060be:	ec47 6b10 	vmov	d0, r6, r7
 80060c2:	9302      	str	r3, [sp, #8]
 80060c4:	f000 fc88 	bl	80069d8 <fabs>
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	ec51 0b10 	vmov	r0, r1, d0
 80060ce:	bb53      	cbnz	r3, 8006126 <__ieee754_pow+0x1d6>
 80060d0:	4b44      	ldr	r3, [pc, #272]	@ (80061e4 <__ieee754_pow+0x294>)
 80060d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d002      	beq.n	80060e0 <__ieee754_pow+0x190>
 80060da:	f1b8 0f00 	cmp.w	r8, #0
 80060de:	d122      	bne.n	8006126 <__ieee754_pow+0x1d6>
 80060e0:	f1b9 0f00 	cmp.w	r9, #0
 80060e4:	da05      	bge.n	80060f2 <__ieee754_pow+0x1a2>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	2000      	movs	r0, #0
 80060ec:	493d      	ldr	r1, [pc, #244]	@ (80061e4 <__ieee754_pow+0x294>)
 80060ee:	f7fa fbad 	bl	800084c <__aeabi_ddiv>
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	f6bf af49 	bge.w	8005f8a <__ieee754_pow+0x3a>
 80060f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80060fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006100:	ea58 0804 	orrs.w	r8, r8, r4
 8006104:	d108      	bne.n	8006118 <__ieee754_pow+0x1c8>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	f7fa f8bb 	bl	8000288 <__aeabi_dsub>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	e794      	b.n	8006042 <__ieee754_pow+0xf2>
 8006118:	2c01      	cmp	r4, #1
 800611a:	f47f af36 	bne.w	8005f8a <__ieee754_pow+0x3a>
 800611e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006122:	4619      	mov	r1, r3
 8006124:	e731      	b.n	8005f8a <__ieee754_pow+0x3a>
 8006126:	0feb      	lsrs	r3, r5, #31
 8006128:	3b01      	subs	r3, #1
 800612a:	ea53 0204 	orrs.w	r2, r3, r4
 800612e:	d102      	bne.n	8006136 <__ieee754_pow+0x1e6>
 8006130:	4632      	mov	r2, r6
 8006132:	463b      	mov	r3, r7
 8006134:	e7e9      	b.n	800610a <__ieee754_pow+0x1ba>
 8006136:	3c01      	subs	r4, #1
 8006138:	431c      	orrs	r4, r3
 800613a:	d016      	beq.n	800616a <__ieee754_pow+0x21a>
 800613c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80061c8 <__ieee754_pow+0x278>
 8006140:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006144:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006148:	f240 8112 	bls.w	8006370 <__ieee754_pow+0x420>
 800614c:	4b28      	ldr	r3, [pc, #160]	@ (80061f0 <__ieee754_pow+0x2a0>)
 800614e:	459a      	cmp	sl, r3
 8006150:	4b25      	ldr	r3, [pc, #148]	@ (80061e8 <__ieee754_pow+0x298>)
 8006152:	d916      	bls.n	8006182 <__ieee754_pow+0x232>
 8006154:	4598      	cmp	r8, r3
 8006156:	d80b      	bhi.n	8006170 <__ieee754_pow+0x220>
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	da0b      	bge.n	8006176 <__ieee754_pow+0x226>
 800615e:	2000      	movs	r0, #0
 8006160:	b011      	add	sp, #68	@ 0x44
 8006162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006166:	f000 bcf3 	b.w	8006b50 <__math_oflow>
 800616a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80061d0 <__ieee754_pow+0x280>
 800616e:	e7e7      	b.n	8006140 <__ieee754_pow+0x1f0>
 8006170:	f1b9 0f00 	cmp.w	r9, #0
 8006174:	dcf3      	bgt.n	800615e <__ieee754_pow+0x20e>
 8006176:	2000      	movs	r0, #0
 8006178:	b011      	add	sp, #68	@ 0x44
 800617a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617e:	f000 bcdf 	b.w	8006b40 <__math_uflow>
 8006182:	4598      	cmp	r8, r3
 8006184:	d20c      	bcs.n	80061a0 <__ieee754_pow+0x250>
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	2300      	movs	r3, #0
 800618e:	f7fa fca5 	bl	8000adc <__aeabi_dcmplt>
 8006192:	3800      	subs	r0, #0
 8006194:	bf18      	it	ne
 8006196:	2001      	movne	r0, #1
 8006198:	f1b9 0f00 	cmp.w	r9, #0
 800619c:	daec      	bge.n	8006178 <__ieee754_pow+0x228>
 800619e:	e7df      	b.n	8006160 <__ieee754_pow+0x210>
 80061a0:	4b10      	ldr	r3, [pc, #64]	@ (80061e4 <__ieee754_pow+0x294>)
 80061a2:	4598      	cmp	r8, r3
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	d924      	bls.n	80061f4 <__ieee754_pow+0x2a4>
 80061aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ae:	2300      	movs	r3, #0
 80061b0:	f7fa fc94 	bl	8000adc <__aeabi_dcmplt>
 80061b4:	3800      	subs	r0, #0
 80061b6:	bf18      	it	ne
 80061b8:	2001      	movne	r0, #1
 80061ba:	f1b9 0f00 	cmp.w	r9, #0
 80061be:	dccf      	bgt.n	8006160 <__ieee754_pow+0x210>
 80061c0:	e7da      	b.n	8006178 <__ieee754_pow+0x228>
 80061c2:	bf00      	nop
 80061c4:	f3af 8000 	nop.w
 80061c8:	00000000 	.word	0x00000000
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	00000000 	.word	0x00000000
 80061d4:	bff00000 	.word	0xbff00000
 80061d8:	fff00000 	.word	0xfff00000
 80061dc:	7ff00000 	.word	0x7ff00000
 80061e0:	433fffff 	.word	0x433fffff
 80061e4:	3ff00000 	.word	0x3ff00000
 80061e8:	3fefffff 	.word	0x3fefffff
 80061ec:	3fe00000 	.word	0x3fe00000
 80061f0:	43f00000 	.word	0x43f00000
 80061f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006360 <__ieee754_pow+0x410>)
 80061f6:	f7fa f847 	bl	8000288 <__aeabi_dsub>
 80061fa:	a351      	add	r3, pc, #324	@ (adr r3, 8006340 <__ieee754_pow+0x3f0>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	f7fa f9f8 	bl	80005f8 <__aeabi_dmul>
 8006208:	a34f      	add	r3, pc, #316	@ (adr r3, 8006348 <__ieee754_pow+0x3f8>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f7fa f9ef 	bl	80005f8 <__aeabi_dmul>
 800621a:	4b52      	ldr	r3, [pc, #328]	@ (8006364 <__ieee754_pow+0x414>)
 800621c:	4682      	mov	sl, r0
 800621e:	468b      	mov	fp, r1
 8006220:	2200      	movs	r2, #0
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	f7fa f9e7 	bl	80005f8 <__aeabi_dmul>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	a148      	add	r1, pc, #288	@ (adr r1, 8006350 <__ieee754_pow+0x400>)
 8006230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006234:	f7fa f828 	bl	8000288 <__aeabi_dsub>
 8006238:	4622      	mov	r2, r4
 800623a:	462b      	mov	r3, r5
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	2000      	movs	r0, #0
 8006246:	4948      	ldr	r1, [pc, #288]	@ (8006368 <__ieee754_pow+0x418>)
 8006248:	f7fa f81e 	bl	8000288 <__aeabi_dsub>
 800624c:	4622      	mov	r2, r4
 800624e:	4680      	mov	r8, r0
 8006250:	4689      	mov	r9, r1
 8006252:	462b      	mov	r3, r5
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	f7fa f9ce 	bl	80005f8 <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4640      	mov	r0, r8
 8006262:	4649      	mov	r1, r9
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	a33b      	add	r3, pc, #236	@ (adr r3, 8006358 <__ieee754_pow+0x408>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f9c3 	bl	80005f8 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4650      	mov	r0, sl
 8006278:	4659      	mov	r1, fp
 800627a:	f7fa f805 	bl	8000288 <__aeabi_dsub>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4680      	mov	r8, r0
 8006284:	4689      	mov	r9, r1
 8006286:	4630      	mov	r0, r6
 8006288:	4639      	mov	r1, r7
 800628a:	f7f9 ffff 	bl	800028c <__adddf3>
 800628e:	2400      	movs	r4, #0
 8006290:	4632      	mov	r2, r6
 8006292:	463b      	mov	r3, r7
 8006294:	4620      	mov	r0, r4
 8006296:	460d      	mov	r5, r1
 8006298:	f7f9 fff6 	bl	8000288 <__aeabi_dsub>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7f9 fff0 	bl	8000288 <__aeabi_dsub>
 80062a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062b0:	2300      	movs	r3, #0
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80062b8:	4606      	mov	r6, r0
 80062ba:	460f      	mov	r7, r1
 80062bc:	4652      	mov	r2, sl
 80062be:	465b      	mov	r3, fp
 80062c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062c4:	f7f9 ffe0 	bl	8000288 <__aeabi_dsub>
 80062c8:	4622      	mov	r2, r4
 80062ca:	462b      	mov	r3, r5
 80062cc:	f7fa f994 	bl	80005f8 <__aeabi_dmul>
 80062d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d4:	4680      	mov	r8, r0
 80062d6:	4689      	mov	r9, r1
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa f98c 	bl	80005f8 <__aeabi_dmul>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7f9 ffd0 	bl	800028c <__adddf3>
 80062ec:	4652      	mov	r2, sl
 80062ee:	465b      	mov	r3, fp
 80062f0:	4606      	mov	r6, r0
 80062f2:	460f      	mov	r7, r1
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7fa f97e 	bl	80005f8 <__aeabi_dmul>
 80062fc:	460b      	mov	r3, r1
 80062fe:	4602      	mov	r2, r0
 8006300:	4680      	mov	r8, r0
 8006302:	4689      	mov	r9, r1
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7f9 ffc0 	bl	800028c <__adddf3>
 800630c:	4b17      	ldr	r3, [pc, #92]	@ (800636c <__ieee754_pow+0x41c>)
 800630e:	4299      	cmp	r1, r3
 8006310:	4604      	mov	r4, r0
 8006312:	460d      	mov	r5, r1
 8006314:	468a      	mov	sl, r1
 8006316:	468b      	mov	fp, r1
 8006318:	f340 82ef 	ble.w	80068fa <__ieee754_pow+0x9aa>
 800631c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006320:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006324:	4303      	orrs	r3, r0
 8006326:	f000 81e8 	beq.w	80066fa <__ieee754_pow+0x7aa>
 800632a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	2300      	movs	r3, #0
 8006332:	f7fa fbd3 	bl	8000adc <__aeabi_dcmplt>
 8006336:	3800      	subs	r0, #0
 8006338:	bf18      	it	ne
 800633a:	2001      	movne	r0, #1
 800633c:	e710      	b.n	8006160 <__ieee754_pow+0x210>
 800633e:	bf00      	nop
 8006340:	60000000 	.word	0x60000000
 8006344:	3ff71547 	.word	0x3ff71547
 8006348:	f85ddf44 	.word	0xf85ddf44
 800634c:	3e54ae0b 	.word	0x3e54ae0b
 8006350:	55555555 	.word	0x55555555
 8006354:	3fd55555 	.word	0x3fd55555
 8006358:	652b82fe 	.word	0x652b82fe
 800635c:	3ff71547 	.word	0x3ff71547
 8006360:	3ff00000 	.word	0x3ff00000
 8006364:	3fd00000 	.word	0x3fd00000
 8006368:	3fe00000 	.word	0x3fe00000
 800636c:	408fffff 	.word	0x408fffff
 8006370:	4bd5      	ldr	r3, [pc, #852]	@ (80066c8 <__ieee754_pow+0x778>)
 8006372:	402b      	ands	r3, r5
 8006374:	2200      	movs	r2, #0
 8006376:	b92b      	cbnz	r3, 8006384 <__ieee754_pow+0x434>
 8006378:	4bd4      	ldr	r3, [pc, #848]	@ (80066cc <__ieee754_pow+0x77c>)
 800637a:	f7fa f93d 	bl	80005f8 <__aeabi_dmul>
 800637e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006382:	468b      	mov	fp, r1
 8006384:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006388:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800638c:	4413      	add	r3, r2
 800638e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006390:	4bcf      	ldr	r3, [pc, #828]	@ (80066d0 <__ieee754_pow+0x780>)
 8006392:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006396:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800639a:	459b      	cmp	fp, r3
 800639c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80063a0:	dd08      	ble.n	80063b4 <__ieee754_pow+0x464>
 80063a2:	4bcc      	ldr	r3, [pc, #816]	@ (80066d4 <__ieee754_pow+0x784>)
 80063a4:	459b      	cmp	fp, r3
 80063a6:	f340 81a5 	ble.w	80066f4 <__ieee754_pow+0x7a4>
 80063aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ac:	3301      	adds	r3, #1
 80063ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80063b4:	f04f 0a00 	mov.w	sl, #0
 80063b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80063bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063be:	4bc6      	ldr	r3, [pc, #792]	@ (80066d8 <__ieee754_pow+0x788>)
 80063c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063c4:	ed93 7b00 	vldr	d7, [r3]
 80063c8:	4629      	mov	r1, r5
 80063ca:	ec53 2b17 	vmov	r2, r3, d7
 80063ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80063d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063d6:	f7f9 ff57 	bl	8000288 <__aeabi_dsub>
 80063da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063de:	4606      	mov	r6, r0
 80063e0:	460f      	mov	r7, r1
 80063e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063e6:	f7f9 ff51 	bl	800028c <__adddf3>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	2000      	movs	r0, #0
 80063f0:	49ba      	ldr	r1, [pc, #744]	@ (80066dc <__ieee754_pow+0x78c>)
 80063f2:	f7fa fa2b 	bl	800084c <__aeabi_ddiv>
 80063f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7fa f8f9 	bl	80005f8 <__aeabi_dmul>
 8006406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800640a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800640e:	106d      	asrs	r5, r5, #1
 8006410:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006414:	f04f 0b00 	mov.w	fp, #0
 8006418:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800641c:	4661      	mov	r1, ip
 800641e:	2200      	movs	r2, #0
 8006420:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006424:	4658      	mov	r0, fp
 8006426:	46e1      	mov	r9, ip
 8006428:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800642c:	4614      	mov	r4, r2
 800642e:	461d      	mov	r5, r3
 8006430:	f7fa f8e2 	bl	80005f8 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006444:	4606      	mov	r6, r0
 8006446:	460f      	mov	r7, r1
 8006448:	4620      	mov	r0, r4
 800644a:	4629      	mov	r1, r5
 800644c:	f7f9 ff1c 	bl	8000288 <__aeabi_dsub>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006458:	f7f9 ff16 	bl	8000288 <__aeabi_dsub>
 800645c:	465a      	mov	r2, fp
 800645e:	464b      	mov	r3, r9
 8006460:	f7fa f8ca 	bl	80005f8 <__aeabi_dmul>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4630      	mov	r0, r6
 800646a:	4639      	mov	r1, r7
 800646c:	f7f9 ff0c 	bl	8000288 <__aeabi_dsub>
 8006470:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006474:	f7fa f8c0 	bl	80005f8 <__aeabi_dmul>
 8006478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800647c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006480:	4610      	mov	r0, r2
 8006482:	4619      	mov	r1, r3
 8006484:	f7fa f8b8 	bl	80005f8 <__aeabi_dmul>
 8006488:	a37d      	add	r3, pc, #500	@ (adr r3, 8006680 <__ieee754_pow+0x730>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	4604      	mov	r4, r0
 8006490:	460d      	mov	r5, r1
 8006492:	f7fa f8b1 	bl	80005f8 <__aeabi_dmul>
 8006496:	a37c      	add	r3, pc, #496	@ (adr r3, 8006688 <__ieee754_pow+0x738>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f7f9 fef6 	bl	800028c <__adddf3>
 80064a0:	4622      	mov	r2, r4
 80064a2:	462b      	mov	r3, r5
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	a379      	add	r3, pc, #484	@ (adr r3, 8006690 <__ieee754_pow+0x740>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7f9 feed 	bl	800028c <__adddf3>
 80064b2:	4622      	mov	r2, r4
 80064b4:	462b      	mov	r3, r5
 80064b6:	f7fa f89f 	bl	80005f8 <__aeabi_dmul>
 80064ba:	a377      	add	r3, pc, #476	@ (adr r3, 8006698 <__ieee754_pow+0x748>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7f9 fee4 	bl	800028c <__adddf3>
 80064c4:	4622      	mov	r2, r4
 80064c6:	462b      	mov	r3, r5
 80064c8:	f7fa f896 	bl	80005f8 <__aeabi_dmul>
 80064cc:	a374      	add	r3, pc, #464	@ (adr r3, 80066a0 <__ieee754_pow+0x750>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7f9 fedb 	bl	800028c <__adddf3>
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	f7fa f88d 	bl	80005f8 <__aeabi_dmul>
 80064de:	a372      	add	r3, pc, #456	@ (adr r3, 80066a8 <__ieee754_pow+0x758>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7f9 fed2 	bl	800028c <__adddf3>
 80064e8:	4622      	mov	r2, r4
 80064ea:	4606      	mov	r6, r0
 80064ec:	460f      	mov	r7, r1
 80064ee:	462b      	mov	r3, r5
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7fa f880 	bl	80005f8 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7fa f87a 	bl	80005f8 <__aeabi_dmul>
 8006504:	465a      	mov	r2, fp
 8006506:	4604      	mov	r4, r0
 8006508:	460d      	mov	r5, r1
 800650a:	464b      	mov	r3, r9
 800650c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006510:	f7f9 febc 	bl	800028c <__adddf3>
 8006514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006518:	f7fa f86e 	bl	80005f8 <__aeabi_dmul>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7f9 feb4 	bl	800028c <__adddf3>
 8006524:	465a      	mov	r2, fp
 8006526:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800652a:	464b      	mov	r3, r9
 800652c:	4658      	mov	r0, fp
 800652e:	4649      	mov	r1, r9
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <__ieee754_pow+0x790>)
 8006536:	2200      	movs	r2, #0
 8006538:	4606      	mov	r6, r0
 800653a:	460f      	mov	r7, r1
 800653c:	f7f9 fea6 	bl	800028c <__adddf3>
 8006540:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006544:	f7f9 fea2 	bl	800028c <__adddf3>
 8006548:	46d8      	mov	r8, fp
 800654a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800654e:	460d      	mov	r5, r1
 8006550:	465a      	mov	r2, fp
 8006552:	460b      	mov	r3, r1
 8006554:	4640      	mov	r0, r8
 8006556:	4649      	mov	r1, r9
 8006558:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800655c:	f7fa f84c 	bl	80005f8 <__aeabi_dmul>
 8006560:	465c      	mov	r4, fp
 8006562:	4680      	mov	r8, r0
 8006564:	4689      	mov	r9, r1
 8006566:	4b5e      	ldr	r3, [pc, #376]	@ (80066e0 <__ieee754_pow+0x790>)
 8006568:	2200      	movs	r2, #0
 800656a:	4620      	mov	r0, r4
 800656c:	4629      	mov	r1, r5
 800656e:	f7f9 fe8b 	bl	8000288 <__aeabi_dsub>
 8006572:	4632      	mov	r2, r6
 8006574:	463b      	mov	r3, r7
 8006576:	f7f9 fe87 	bl	8000288 <__aeabi_dsub>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006582:	f7f9 fe81 	bl	8000288 <__aeabi_dsub>
 8006586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800658a:	f7fa f835 	bl	80005f8 <__aeabi_dmul>
 800658e:	4622      	mov	r2, r4
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	462b      	mov	r3, r5
 8006596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659a:	f7fa f82d 	bl	80005f8 <__aeabi_dmul>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4630      	mov	r0, r6
 80065a4:	4639      	mov	r1, r7
 80065a6:	f7f9 fe71 	bl	800028c <__adddf3>
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7f9 fe69 	bl	800028c <__adddf3>
 80065ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80065be:	a33c      	add	r3, pc, #240	@ (adr r3, 80066b0 <__ieee754_pow+0x760>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	4658      	mov	r0, fp
 80065c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80065ca:	460d      	mov	r5, r1
 80065cc:	f7fa f814 	bl	80005f8 <__aeabi_dmul>
 80065d0:	465c      	mov	r4, fp
 80065d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	f7f9 fe53 	bl	8000288 <__aeabi_dsub>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4630      	mov	r0, r6
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7f9 fe4d 	bl	8000288 <__aeabi_dsub>
 80065ee:	a332      	add	r3, pc, #200	@ (adr r3, 80066b8 <__ieee754_pow+0x768>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f7fa f800 	bl	80005f8 <__aeabi_dmul>
 80065f8:	a331      	add	r3, pc, #196	@ (adr r3, 80066c0 <__ieee754_pow+0x770>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	4620      	mov	r0, r4
 8006604:	4629      	mov	r1, r5
 8006606:	f7f9 fff7 	bl	80005f8 <__aeabi_dmul>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7f9 fe3b 	bl	800028c <__adddf3>
 8006616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006618:	4b32      	ldr	r3, [pc, #200]	@ (80066e4 <__ieee754_pow+0x794>)
 800661a:	4413      	add	r3, r2
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fe34 	bl	800028c <__adddf3>
 8006624:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006628:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800662a:	f7f9 ff7b 	bl	8000524 <__aeabi_i2d>
 800662e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006630:	4b2d      	ldr	r3, [pc, #180]	@ (80066e8 <__ieee754_pow+0x798>)
 8006632:	4413      	add	r3, r2
 8006634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006638:	4606      	mov	r6, r0
 800663a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800663e:	460f      	mov	r7, r1
 8006640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006644:	f7f9 fe22 	bl	800028c <__adddf3>
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	f7f9 fe1e 	bl	800028c <__adddf3>
 8006650:	4632      	mov	r2, r6
 8006652:	463b      	mov	r3, r7
 8006654:	f7f9 fe1a 	bl	800028c <__adddf3>
 8006658:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	4658      	mov	r0, fp
 8006662:	460d      	mov	r5, r1
 8006664:	f7f9 fe10 	bl	8000288 <__aeabi_dsub>
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	f7f9 fe0c 	bl	8000288 <__aeabi_dsub>
 8006670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006674:	f7f9 fe08 	bl	8000288 <__aeabi_dsub>
 8006678:	465c      	mov	r4, fp
 800667a:	4602      	mov	r2, r0
 800667c:	e036      	b.n	80066ec <__ieee754_pow+0x79c>
 800667e:	bf00      	nop
 8006680:	4a454eef 	.word	0x4a454eef
 8006684:	3fca7e28 	.word	0x3fca7e28
 8006688:	93c9db65 	.word	0x93c9db65
 800668c:	3fcd864a 	.word	0x3fcd864a
 8006690:	a91d4101 	.word	0xa91d4101
 8006694:	3fd17460 	.word	0x3fd17460
 8006698:	518f264d 	.word	0x518f264d
 800669c:	3fd55555 	.word	0x3fd55555
 80066a0:	db6fabff 	.word	0xdb6fabff
 80066a4:	3fdb6db6 	.word	0x3fdb6db6
 80066a8:	33333303 	.word	0x33333303
 80066ac:	3fe33333 	.word	0x3fe33333
 80066b0:	e0000000 	.word	0xe0000000
 80066b4:	3feec709 	.word	0x3feec709
 80066b8:	dc3a03fd 	.word	0xdc3a03fd
 80066bc:	3feec709 	.word	0x3feec709
 80066c0:	145b01f5 	.word	0x145b01f5
 80066c4:	be3e2fe0 	.word	0xbe3e2fe0
 80066c8:	7ff00000 	.word	0x7ff00000
 80066cc:	43400000 	.word	0x43400000
 80066d0:	0003988e 	.word	0x0003988e
 80066d4:	000bb679 	.word	0x000bb679
 80066d8:	08007100 	.word	0x08007100
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	40080000 	.word	0x40080000
 80066e4:	080070e0 	.word	0x080070e0
 80066e8:	080070f0 	.word	0x080070f0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f2:	e5d7      	b.n	80062a4 <__ieee754_pow+0x354>
 80066f4:	f04f 0a01 	mov.w	sl, #1
 80066f8:	e65e      	b.n	80063b8 <__ieee754_pow+0x468>
 80066fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 80069cc <__ieee754_pow+0xa7c>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7f9 fdc2 	bl	800028c <__adddf3>
 8006708:	4642      	mov	r2, r8
 800670a:	e9cd 0100 	strd	r0, r1, [sp]
 800670e:	464b      	mov	r3, r9
 8006710:	4620      	mov	r0, r4
 8006712:	4629      	mov	r1, r5
 8006714:	f7f9 fdb8 	bl	8000288 <__aeabi_dsub>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006720:	f7fa f9fa 	bl	8000b18 <__aeabi_dcmpgt>
 8006724:	2800      	cmp	r0, #0
 8006726:	f47f ae00 	bne.w	800632a <__ieee754_pow+0x3da>
 800672a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800672e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006732:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006736:	fa43 fa0a 	asr.w	sl, r3, sl
 800673a:	44da      	add	sl, fp
 800673c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006740:	489d      	ldr	r0, [pc, #628]	@ (80069b8 <__ieee754_pow+0xa68>)
 8006742:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006746:	4108      	asrs	r0, r1
 8006748:	ea00 030a 	and.w	r3, r0, sl
 800674c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006750:	f1c1 0114 	rsb	r1, r1, #20
 8006754:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006758:	fa4a fa01 	asr.w	sl, sl, r1
 800675c:	f1bb 0f00 	cmp.w	fp, #0
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	bfb8      	it	lt
 800676a:	f1ca 0a00 	rsblt	sl, sl, #0
 800676e:	f7f9 fd8b 	bl	8000288 <__aeabi_dsub>
 8006772:	4680      	mov	r8, r0
 8006774:	4689      	mov	r9, r1
 8006776:	4632      	mov	r2, r6
 8006778:	463b      	mov	r3, r7
 800677a:	4640      	mov	r0, r8
 800677c:	4649      	mov	r1, r9
 800677e:	f7f9 fd85 	bl	800028c <__adddf3>
 8006782:	2400      	movs	r4, #0
 8006784:	a37c      	add	r3, pc, #496	@ (adr r3, 8006978 <__ieee754_pow+0xa28>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	4620      	mov	r0, r4
 800678c:	460d      	mov	r5, r1
 800678e:	f7f9 ff33 	bl	80005f8 <__aeabi_dmul>
 8006792:	4642      	mov	r2, r8
 8006794:	e9cd 0100 	strd	r0, r1, [sp]
 8006798:	464b      	mov	r3, r9
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	f7f9 fd73 	bl	8000288 <__aeabi_dsub>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4630      	mov	r0, r6
 80067a8:	4639      	mov	r1, r7
 80067aa:	f7f9 fd6d 	bl	8000288 <__aeabi_dsub>
 80067ae:	a374      	add	r3, pc, #464	@ (adr r3, 8006980 <__ieee754_pow+0xa30>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7f9 ff20 	bl	80005f8 <__aeabi_dmul>
 80067b8:	a373      	add	r3, pc, #460	@ (adr r3, 8006988 <__ieee754_pow+0xa38>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	4680      	mov	r8, r0
 80067c0:	4689      	mov	r9, r1
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7f9 ff17 	bl	80005f8 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7f9 fd5b 	bl	800028c <__adddf3>
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e2:	f7f9 fd53 	bl	800028c <__adddf3>
 80067e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ea:	4680      	mov	r8, r0
 80067ec:	4689      	mov	r9, r1
 80067ee:	f7f9 fd4b 	bl	8000288 <__aeabi_dsub>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4620      	mov	r0, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4642      	mov	r2, r8
 8006800:	4606      	mov	r6, r0
 8006802:	460f      	mov	r7, r1
 8006804:	464b      	mov	r3, r9
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7f9 fef5 	bl	80005f8 <__aeabi_dmul>
 800680e:	a360      	add	r3, pc, #384	@ (adr r3, 8006990 <__ieee754_pow+0xa40>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	f7f9 feee 	bl	80005f8 <__aeabi_dmul>
 800681c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006998 <__ieee754_pow+0xa48>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fd31 	bl	8000288 <__aeabi_dsub>
 8006826:	4622      	mov	r2, r4
 8006828:	462b      	mov	r3, r5
 800682a:	f7f9 fee5 	bl	80005f8 <__aeabi_dmul>
 800682e:	a35c      	add	r3, pc, #368	@ (adr r3, 80069a0 <__ieee754_pow+0xa50>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 fd2a 	bl	800028c <__adddf3>
 8006838:	4622      	mov	r2, r4
 800683a:	462b      	mov	r3, r5
 800683c:	f7f9 fedc 	bl	80005f8 <__aeabi_dmul>
 8006840:	a359      	add	r3, pc, #356	@ (adr r3, 80069a8 <__ieee754_pow+0xa58>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fd1f 	bl	8000288 <__aeabi_dsub>
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	f7f9 fed3 	bl	80005f8 <__aeabi_dmul>
 8006852:	a357      	add	r3, pc, #348	@ (adr r3, 80069b0 <__ieee754_pow+0xa60>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f7f9 fd18 	bl	800028c <__adddf3>
 800685c:	4622      	mov	r2, r4
 800685e:	462b      	mov	r3, r5
 8006860:	f7f9 feca 	bl	80005f8 <__aeabi_dmul>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7f9 fd0c 	bl	8000288 <__aeabi_dsub>
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4640      	mov	r0, r8
 800687a:	4649      	mov	r1, r9
 800687c:	f7f9 febc 	bl	80005f8 <__aeabi_dmul>
 8006880:	2200      	movs	r2, #0
 8006882:	e9cd 0100 	strd	r0, r1, [sp]
 8006886:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7f9 fcfb 	bl	8000288 <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800689a:	f7f9 ffd7 	bl	800084c <__aeabi_ddiv>
 800689e:	4632      	mov	r2, r6
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	463b      	mov	r3, r7
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fea5 	bl	80005f8 <__aeabi_dmul>
 80068ae:	4632      	mov	r2, r6
 80068b0:	463b      	mov	r3, r7
 80068b2:	f7f9 fceb 	bl	800028c <__adddf3>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	f7f9 fce3 	bl	8000288 <__aeabi_dsub>
 80068c2:	4642      	mov	r2, r8
 80068c4:	464b      	mov	r3, r9
 80068c6:	f7f9 fcdf 	bl	8000288 <__aeabi_dsub>
 80068ca:	460b      	mov	r3, r1
 80068cc:	4602      	mov	r2, r0
 80068ce:	493b      	ldr	r1, [pc, #236]	@ (80069bc <__ieee754_pow+0xa6c>)
 80068d0:	2000      	movs	r0, #0
 80068d2:	f7f9 fcd9 	bl	8000288 <__aeabi_dsub>
 80068d6:	ec41 0b10 	vmov	d0, r0, r1
 80068da:	ee10 3a90 	vmov	r3, s1
 80068de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80068e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e6:	da30      	bge.n	800694a <__ieee754_pow+0x9fa>
 80068e8:	4650      	mov	r0, sl
 80068ea:	f000 f87d 	bl	80069e8 <scalbn>
 80068ee:	ec51 0b10 	vmov	r0, r1, d0
 80068f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068f6:	f7ff bbd2 	b.w	800609e <__ieee754_pow+0x14e>
 80068fa:	4c31      	ldr	r4, [pc, #196]	@ (80069c0 <__ieee754_pow+0xa70>)
 80068fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006900:	42a3      	cmp	r3, r4
 8006902:	d91a      	bls.n	800693a <__ieee754_pow+0x9ea>
 8006904:	4b2f      	ldr	r3, [pc, #188]	@ (80069c4 <__ieee754_pow+0xa74>)
 8006906:	440b      	add	r3, r1
 8006908:	4303      	orrs	r3, r0
 800690a:	d009      	beq.n	8006920 <__ieee754_pow+0x9d0>
 800690c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f8e2 	bl	8000adc <__aeabi_dcmplt>
 8006918:	3800      	subs	r0, #0
 800691a:	bf18      	it	ne
 800691c:	2001      	movne	r0, #1
 800691e:	e42b      	b.n	8006178 <__ieee754_pow+0x228>
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	f7f9 fcb0 	bl	8000288 <__aeabi_dsub>
 8006928:	4632      	mov	r2, r6
 800692a:	463b      	mov	r3, r7
 800692c:	f7fa f8ea 	bl	8000b04 <__aeabi_dcmpge>
 8006930:	2800      	cmp	r0, #0
 8006932:	d1eb      	bne.n	800690c <__ieee754_pow+0x9bc>
 8006934:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80069d4 <__ieee754_pow+0xa84>
 8006938:	e6f7      	b.n	800672a <__ieee754_pow+0x7da>
 800693a:	469a      	mov	sl, r3
 800693c:	4b22      	ldr	r3, [pc, #136]	@ (80069c8 <__ieee754_pow+0xa78>)
 800693e:	459a      	cmp	sl, r3
 8006940:	f63f aef3 	bhi.w	800672a <__ieee754_pow+0x7da>
 8006944:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006948:	e715      	b.n	8006776 <__ieee754_pow+0x826>
 800694a:	ec51 0b10 	vmov	r0, r1, d0
 800694e:	4619      	mov	r1, r3
 8006950:	e7cf      	b.n	80068f2 <__ieee754_pow+0x9a2>
 8006952:	491a      	ldr	r1, [pc, #104]	@ (80069bc <__ieee754_pow+0xa6c>)
 8006954:	2000      	movs	r0, #0
 8006956:	f7ff bb18 	b.w	8005f8a <__ieee754_pow+0x3a>
 800695a:	2000      	movs	r0, #0
 800695c:	2100      	movs	r1, #0
 800695e:	f7ff bb14 	b.w	8005f8a <__ieee754_pow+0x3a>
 8006962:	4630      	mov	r0, r6
 8006964:	4639      	mov	r1, r7
 8006966:	f7ff bb10 	b.w	8005f8a <__ieee754_pow+0x3a>
 800696a:	460c      	mov	r4, r1
 800696c:	f7ff bb5e 	b.w	800602c <__ieee754_pow+0xdc>
 8006970:	2400      	movs	r4, #0
 8006972:	f7ff bb49 	b.w	8006008 <__ieee754_pow+0xb8>
 8006976:	bf00      	nop
 8006978:	00000000 	.word	0x00000000
 800697c:	3fe62e43 	.word	0x3fe62e43
 8006980:	fefa39ef 	.word	0xfefa39ef
 8006984:	3fe62e42 	.word	0x3fe62e42
 8006988:	0ca86c39 	.word	0x0ca86c39
 800698c:	be205c61 	.word	0xbe205c61
 8006990:	72bea4d0 	.word	0x72bea4d0
 8006994:	3e663769 	.word	0x3e663769
 8006998:	c5d26bf1 	.word	0xc5d26bf1
 800699c:	3ebbbd41 	.word	0x3ebbbd41
 80069a0:	af25de2c 	.word	0xaf25de2c
 80069a4:	3f11566a 	.word	0x3f11566a
 80069a8:	16bebd93 	.word	0x16bebd93
 80069ac:	3f66c16c 	.word	0x3f66c16c
 80069b0:	5555553e 	.word	0x5555553e
 80069b4:	3fc55555 	.word	0x3fc55555
 80069b8:	fff00000 	.word	0xfff00000
 80069bc:	3ff00000 	.word	0x3ff00000
 80069c0:	4090cbff 	.word	0x4090cbff
 80069c4:	3f6f3400 	.word	0x3f6f3400
 80069c8:	3fe00000 	.word	0x3fe00000
 80069cc:	652b82fe 	.word	0x652b82fe
 80069d0:	3c971547 	.word	0x3c971547
 80069d4:	4090cc00 	.word	0x4090cc00

080069d8 <fabs>:
 80069d8:	ec51 0b10 	vmov	r0, r1, d0
 80069dc:	4602      	mov	r2, r0
 80069de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80069e2:	ec43 2b10 	vmov	d0, r2, r3
 80069e6:	4770      	bx	lr

080069e8 <scalbn>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	ec55 4b10 	vmov	r4, r5, d0
 80069ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80069f2:	4606      	mov	r6, r0
 80069f4:	462b      	mov	r3, r5
 80069f6:	b991      	cbnz	r1, 8006a1e <scalbn+0x36>
 80069f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80069fc:	4323      	orrs	r3, r4
 80069fe:	d03d      	beq.n	8006a7c <scalbn+0x94>
 8006a00:	4b35      	ldr	r3, [pc, #212]	@ (8006ad8 <scalbn+0xf0>)
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	2200      	movs	r2, #0
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	4b33      	ldr	r3, [pc, #204]	@ (8006adc <scalbn+0xf4>)
 8006a0e:	429e      	cmp	r6, r3
 8006a10:	4604      	mov	r4, r0
 8006a12:	460d      	mov	r5, r1
 8006a14:	da0f      	bge.n	8006a36 <scalbn+0x4e>
 8006a16:	a328      	add	r3, pc, #160	@ (adr r3, 8006ab8 <scalbn+0xd0>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	e01e      	b.n	8006a5c <scalbn+0x74>
 8006a1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006a22:	4291      	cmp	r1, r2
 8006a24:	d10b      	bne.n	8006a3e <scalbn+0x56>
 8006a26:	4622      	mov	r2, r4
 8006a28:	4620      	mov	r0, r4
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	f7f9 fc2e 	bl	800028c <__adddf3>
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	e022      	b.n	8006a7c <scalbn+0x94>
 8006a36:	460b      	mov	r3, r1
 8006a38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006a3c:	3936      	subs	r1, #54	@ 0x36
 8006a3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006a42:	4296      	cmp	r6, r2
 8006a44:	dd0d      	ble.n	8006a62 <scalbn+0x7a>
 8006a46:	2d00      	cmp	r5, #0
 8006a48:	a11d      	add	r1, pc, #116	@ (adr r1, 8006ac0 <scalbn+0xd8>)
 8006a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4e:	da02      	bge.n	8006a56 <scalbn+0x6e>
 8006a50:	a11d      	add	r1, pc, #116	@ (adr r1, 8006ac8 <scalbn+0xe0>)
 8006a52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a56:	a31a      	add	r3, pc, #104	@ (adr r3, 8006ac0 <scalbn+0xd8>)
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	e7e6      	b.n	8006a30 <scalbn+0x48>
 8006a62:	1872      	adds	r2, r6, r1
 8006a64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006a68:	428a      	cmp	r2, r1
 8006a6a:	dcec      	bgt.n	8006a46 <scalbn+0x5e>
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	dd08      	ble.n	8006a82 <scalbn+0x9a>
 8006a70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006a74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006a78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a7c:	ec45 4b10 	vmov	d0, r4, r5
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006a86:	da08      	bge.n	8006a9a <scalbn+0xb2>
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006ab8 <scalbn+0xd0>)
 8006a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a90:	dac1      	bge.n	8006a16 <scalbn+0x2e>
 8006a92:	a10f      	add	r1, pc, #60	@ (adr r1, 8006ad0 <scalbn+0xe8>)
 8006a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a98:	e7bd      	b.n	8006a16 <scalbn+0x2e>
 8006a9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006a9e:	3236      	adds	r2, #54	@ 0x36
 8006aa0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006aa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <scalbn+0xf8>)
 8006aac:	4629      	mov	r1, r5
 8006aae:	2200      	movs	r2, #0
 8006ab0:	e7d4      	b.n	8006a5c <scalbn+0x74>
 8006ab2:	bf00      	nop
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	c2f8f359 	.word	0xc2f8f359
 8006abc:	01a56e1f 	.word	0x01a56e1f
 8006ac0:	8800759c 	.word	0x8800759c
 8006ac4:	7e37e43c 	.word	0x7e37e43c
 8006ac8:	8800759c 	.word	0x8800759c
 8006acc:	fe37e43c 	.word	0xfe37e43c
 8006ad0:	c2f8f359 	.word	0xc2f8f359
 8006ad4:	81a56e1f 	.word	0x81a56e1f
 8006ad8:	43500000 	.word	0x43500000
 8006adc:	ffff3cb0 	.word	0xffff3cb0
 8006ae0:	3c900000 	.word	0x3c900000

08006ae4 <with_errno>:
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	ed2d 8b02 	vpush	{d8}
 8006aea:	eeb0 8a40 	vmov.f32	s16, s0
 8006aee:	eef0 8a60 	vmov.f32	s17, s1
 8006af2:	4604      	mov	r4, r0
 8006af4:	f7fd f938 	bl	8003d68 <__errno>
 8006af8:	eeb0 0a48 	vmov.f32	s0, s16
 8006afc:	eef0 0a68 	vmov.f32	s1, s17
 8006b00:	ecbd 8b02 	vpop	{d8}
 8006b04:	6004      	str	r4, [r0, #0]
 8006b06:	bd10      	pop	{r4, pc}

08006b08 <xflow>:
 8006b08:	4603      	mov	r3, r0
 8006b0a:	b507      	push	{r0, r1, r2, lr}
 8006b0c:	ec51 0b10 	vmov	r0, r1, d0
 8006b10:	b183      	cbz	r3, 8006b34 <xflow+0x2c>
 8006b12:	4602      	mov	r2, r0
 8006b14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b18:	e9cd 2300 	strd	r2, r3, [sp]
 8006b1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b20:	f7f9 fd6a 	bl	80005f8 <__aeabi_dmul>
 8006b24:	ec41 0b10 	vmov	d0, r0, r1
 8006b28:	2022      	movs	r0, #34	@ 0x22
 8006b2a:	b003      	add	sp, #12
 8006b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b30:	f7ff bfd8 	b.w	8006ae4 <with_errno>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	e7ee      	b.n	8006b18 <xflow+0x10>
 8006b3a:	0000      	movs	r0, r0
 8006b3c:	0000      	movs	r0, r0
	...

08006b40 <__math_uflow>:
 8006b40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006b48 <__math_uflow+0x8>
 8006b44:	f7ff bfe0 	b.w	8006b08 <xflow>
 8006b48:	00000000 	.word	0x00000000
 8006b4c:	10000000 	.word	0x10000000

08006b50 <__math_oflow>:
 8006b50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006b58 <__math_oflow+0x8>
 8006b54:	f7ff bfd8 	b.w	8006b08 <xflow>
 8006b58:	00000000 	.word	0x00000000
 8006b5c:	70000000 	.word	0x70000000

08006b60 <__ieee754_sqrt>:
 8006b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4a68      	ldr	r2, [pc, #416]	@ (8006d08 <__ieee754_sqrt+0x1a8>)
 8006b66:	ec55 4b10 	vmov	r4, r5, d0
 8006b6a:	43aa      	bics	r2, r5
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	4621      	mov	r1, r4
 8006b70:	d110      	bne.n	8006b94 <__ieee754_sqrt+0x34>
 8006b72:	4622      	mov	r2, r4
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	f7f9 fd3e 	bl	80005f8 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7f9 fb82 	bl	800028c <__adddf3>
 8006b88:	4604      	mov	r4, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	ec45 4b10 	vmov	d0, r4, r5
 8006b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	dc0e      	bgt.n	8006bb6 <__ieee754_sqrt+0x56>
 8006b98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006b9c:	4322      	orrs	r2, r4
 8006b9e:	d0f5      	beq.n	8006b8c <__ieee754_sqrt+0x2c>
 8006ba0:	b19d      	cbz	r5, 8006bca <__ieee754_sqrt+0x6a>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fb6e 	bl	8000288 <__aeabi_dsub>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	f7f9 fe4c 	bl	800084c <__aeabi_ddiv>
 8006bb4:	e7e8      	b.n	8006b88 <__ieee754_sqrt+0x28>
 8006bb6:	152a      	asrs	r2, r5, #20
 8006bb8:	d115      	bne.n	8006be6 <__ieee754_sqrt+0x86>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e009      	b.n	8006bd2 <__ieee754_sqrt+0x72>
 8006bbe:	0acb      	lsrs	r3, r1, #11
 8006bc0:	3a15      	subs	r2, #21
 8006bc2:	0549      	lsls	r1, r1, #21
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0fa      	beq.n	8006bbe <__ieee754_sqrt+0x5e>
 8006bc8:	e7f7      	b.n	8006bba <__ieee754_sqrt+0x5a>
 8006bca:	462a      	mov	r2, r5
 8006bcc:	e7fa      	b.n	8006bc4 <__ieee754_sqrt+0x64>
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	02dc      	lsls	r4, r3, #11
 8006bd4:	d5fb      	bpl.n	8006bce <__ieee754_sqrt+0x6e>
 8006bd6:	1e44      	subs	r4, r0, #1
 8006bd8:	1b12      	subs	r2, r2, r4
 8006bda:	f1c0 0420 	rsb	r4, r0, #32
 8006bde:	fa21 f404 	lsr.w	r4, r1, r4
 8006be2:	4323      	orrs	r3, r4
 8006be4:	4081      	lsls	r1, r0
 8006be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf2:	07d2      	lsls	r2, r2, #31
 8006bf4:	bf5c      	itt	pl
 8006bf6:	005b      	lslpl	r3, r3, #1
 8006bf8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c00:	bf58      	it	pl
 8006c02:	0049      	lslpl	r1, r1, #1
 8006c04:	2600      	movs	r6, #0
 8006c06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006c0a:	106d      	asrs	r5, r5, #1
 8006c0c:	0049      	lsls	r1, r1, #1
 8006c0e:	2016      	movs	r0, #22
 8006c10:	4632      	mov	r2, r6
 8006c12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006c16:	1917      	adds	r7, r2, r4
 8006c18:	429f      	cmp	r7, r3
 8006c1a:	bfde      	ittt	le
 8006c1c:	193a      	addle	r2, r7, r4
 8006c1e:	1bdb      	suble	r3, r3, r7
 8006c20:	1936      	addle	r6, r6, r4
 8006c22:	0fcf      	lsrs	r7, r1, #31
 8006c24:	3801      	subs	r0, #1
 8006c26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006c2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006c32:	d1f0      	bne.n	8006c16 <__ieee754_sqrt+0xb6>
 8006c34:	4604      	mov	r4, r0
 8006c36:	2720      	movs	r7, #32
 8006c38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	eb00 0e0c 	add.w	lr, r0, ip
 8006c42:	db02      	blt.n	8006c4a <__ieee754_sqrt+0xea>
 8006c44:	d113      	bne.n	8006c6e <__ieee754_sqrt+0x10e>
 8006c46:	458e      	cmp	lr, r1
 8006c48:	d811      	bhi.n	8006c6e <__ieee754_sqrt+0x10e>
 8006c4a:	f1be 0f00 	cmp.w	lr, #0
 8006c4e:	eb0e 000c 	add.w	r0, lr, ip
 8006c52:	da42      	bge.n	8006cda <__ieee754_sqrt+0x17a>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	db40      	blt.n	8006cda <__ieee754_sqrt+0x17a>
 8006c58:	f102 0801 	add.w	r8, r2, #1
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	458e      	cmp	lr, r1
 8006c60:	bf88      	it	hi
 8006c62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006c66:	eba1 010e 	sub.w	r1, r1, lr
 8006c6a:	4464      	add	r4, ip
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006c72:	3f01      	subs	r7, #1
 8006c74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006c78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006c80:	d1dc      	bne.n	8006c3c <__ieee754_sqrt+0xdc>
 8006c82:	4319      	orrs	r1, r3
 8006c84:	d01b      	beq.n	8006cbe <__ieee754_sqrt+0x15e>
 8006c86:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006d0c <__ieee754_sqrt+0x1ac>
 8006c8a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006d10 <__ieee754_sqrt+0x1b0>
 8006c8e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006c92:	e9db 2300 	ldrd	r2, r3, [fp]
 8006c96:	f7f9 faf7 	bl	8000288 <__aeabi_dsub>
 8006c9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	f7f9 ff23 	bl	8000af0 <__aeabi_dcmple>
 8006caa:	b140      	cbz	r0, 8006cbe <__ieee754_sqrt+0x15e>
 8006cac:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006cb0:	e9da 0100 	ldrd	r0, r1, [sl]
 8006cb4:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cb8:	d111      	bne.n	8006cde <__ieee754_sqrt+0x17e>
 8006cba:	3601      	adds	r6, #1
 8006cbc:	463c      	mov	r4, r7
 8006cbe:	1072      	asrs	r2, r6, #1
 8006cc0:	0863      	lsrs	r3, r4, #1
 8006cc2:	07f1      	lsls	r1, r6, #31
 8006cc4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006cc8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006ccc:	bf48      	it	mi
 8006cce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006cd2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	e756      	b.n	8006b88 <__ieee754_sqrt+0x28>
 8006cda:	4690      	mov	r8, r2
 8006cdc:	e7be      	b.n	8006c5c <__ieee754_sqrt+0xfc>
 8006cde:	f7f9 fad5 	bl	800028c <__adddf3>
 8006ce2:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fef5 	bl	8000adc <__aeabi_dcmplt>
 8006cf2:	b120      	cbz	r0, 8006cfe <__ieee754_sqrt+0x19e>
 8006cf4:	1ca0      	adds	r0, r4, #2
 8006cf6:	bf08      	it	eq
 8006cf8:	3601      	addeq	r6, #1
 8006cfa:	3402      	adds	r4, #2
 8006cfc:	e7df      	b.n	8006cbe <__ieee754_sqrt+0x15e>
 8006cfe:	1c63      	adds	r3, r4, #1
 8006d00:	f023 0401 	bic.w	r4, r3, #1
 8006d04:	e7db      	b.n	8006cbe <__ieee754_sqrt+0x15e>
 8006d06:	bf00      	nop
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	200001d8 	.word	0x200001d8
 8006d10:	200001d0 	.word	0x200001d0

08006d14 <_init>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr

08006d20 <_fini>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr
